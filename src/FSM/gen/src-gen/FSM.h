/** Generated by itemis CREATE code generator. */

#ifndef FSM_H_
#define FSM_H_

/*!
Forward declaration for the FSM state machine.
*/
class FSM;


#include <deque>
#include "../src/sc_types.h"
#include "../src/sc_rxcpp.h"
#include "../src/sc_statemachine.h"
#include "../src/sc_eventdriven.h"
#include <string.h>

/*! \file
Header of the state machine 'FSM'.
*/


class FSM : public sc::EventDrivenInterface
{
	public:
		FSM() noexcept;
		
		virtual ~FSM();
		
		
		
		/*! Enumeration of all states. */
		enum class State
		{
			NO_STATE,
			FSM_Festo1_Ingress_FSM_Festo1__Ingress,
			FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress,
			FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress_Idle,
			FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress_PukPresent,
			FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress_CreatingDistance,
			FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_ErrorFST1,
			FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Stop,
			FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Start,
			FSM_Festo1_Ingress_ESTOP__HEARTBEATFAILED,
			FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement,
			FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement,
			FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Idle,
			FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring,
			FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_A,
			FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_B,
			FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_C,
			FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_Error,
			FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement__final_,
			FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_PukExpected,
			FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_Start,
			FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_Stop,
			FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_ErrorFST1,
			FSM_Festo1__HeightMeasurement_ESTOP__HEARTBEATFAILED,
			FSM_Festo1__Sorting_FSM_Festo1__Sorting,
			FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting,
			FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_Idle,
			FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_PukExpected,
			FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_Evaluate,
			FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EjectingDiverter,
			FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_TransferEjector,
			FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_TransferDivider,
			FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EjectingEjector,
			FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EvaluateCounter,
			FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Start,
			FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Stop,
			FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_ErrorFST1,
			FSM_Festo1__Sorting_ESTOP__HEARTBEATFAILED,
			FSM_Festo1__Egress_FSM_Festo1__Egress,
			FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress,
			FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_Waiting,
			FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_Transfer,
			FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_PukExpected,
			FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_IDLE,
			FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_FST1Error,
			FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Stop,
			FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Start,
			FSM_Festo1__Egress_ESTOP__HEARTBEATFAILED,
			FSM_QualityGate__Motor_SystemMotor,
			FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward,
			FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow,
			FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop,
			FSM_Festo2__Ingress_FSM_Festo2__Ingress,
			FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress,
			FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress_Idle,
			FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress_PukExpected,
			FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress_PukinLBF2,
			FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Stop,
			FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Start,
			FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_ErrorFST2,
			FSM_Festo2__Ingress_ESTOP__HEARTBEATFAILED,
			FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement,
			FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement,
			FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Idle,
			FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_PukExpected,
			FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring,
			FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_A,
			FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_B,
			FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_C,
			FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_Error,
			FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement__final_,
			FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_Start,
			FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_Stop,
			FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_FST2Error,
			FSM_Festo2__HeightMeasurement_ESTOP__HEARTBEATFAILED,
			FSM_Festo2__Egress_FSM_Festo2__Egress,
			FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress,
			FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress_IDLE,
			FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress_Transfer,
			FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress_PukExpected,
			FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Start,
			FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Stop,
			FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_ErrorFST2,
			FSM_Festo2__Egress_ESTOP__HEARTBEATFAILED,
			FSM_Festo2__Motor_SystemMotor,
			FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward,
			FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow,
			FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop,
			Evaluate_EvaluateTester,
			FSM_Festo1__Errors_FSM_Errors,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinHMRestart,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_SortingUnknownPuk,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinIngressRestart,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_SortingUnkwonPukAcknowledged,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_Idle,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinSortingRestart,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_EgressUnknownPukAcknowledged,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_EgressMissingPuk,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_HMUnknownPukAcknowledged,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_HMUnknownPuk,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_IngressUnkownPuk,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinEgressRestart,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_RampFullUnknownPuk,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_RampFullUnknownPukAcknowledged,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinRampRestart,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_IngressMissingPuk,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_EgressUnknownPuk,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_RampFullMissingPuk,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_SortingMissingPuk,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_IngressUnkownPukAcknowledged,
			FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_HMMissingPuk,
			FSM_Festo1__Errors_EStop,
			FSM_Festo1__Errors_Start,
			FSM_Festo2__Sorting_FSM_Festo2__Sorting,
			FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting,
			FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_Idle,
			FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_PukExpected,
			FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_Evaluate,
			FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EjectingDiverter,
			FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_TransferEjector,
			FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_TransferDivider,
			FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EjectingEjector,
			FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EvaluateCounter,
			FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_AwaitingRampClearanceDivider,
			FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_AwaitingRampClearanceEjector,
			FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Stop,
			FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Start,
			FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_ErrorFST2,
			FSM_Festo2__Sorting_ESTOP__HEARTBEATFAILED,
			Festo1__FSM_LAMP_RED_FSM_Festo1__LR,
			Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_OFF,
			Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorMissingPuk,
			Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorUnknownPuk,
			Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorUnknownPukAcknowledged,
			Festo1__FSM_LAMP_RED_EStop,
			Festo1__FSM_LAMP_RED_HeartbeatFailed,
			Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG,
			Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_OFF,
			Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_ServiceMode,
			Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_Distancing,
			Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_operational,
			Festo1__FSM_LAMP_GREEN_EStop,
			Festo1__FSM_LAMP_GREEN_HeartBeatFailed,
			Festo1__FSM_LAMP_GREEN_Error,
			Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG,
			Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_OFF,
			Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_ServiceMode,
			Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_Distancing,
			Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_Operational,
			Festo2__FSM_LAMP_GREEN_EStop,
			Festo2__FSM_LAMP_GREEN_Error,
			Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY,
			Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY_FSM_Festo1__Inner_LampYellow_OFF,
			Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY_FSM_Festo1__Inner_LampYellow_RampFull,
			Festo1__FSM_LAMP_YELLOW_EStop,
			Festo1__FSM_LAMP_YELLOW_HeartbeatFailed,
			Festo2__FSM_LAMP_RED_FSM_Festo2__LR,
			Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_OFF,
			Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorMissingPuk,
			Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorUnknownPuk,
			Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorUnknownPukAcknowledged,
			Festo2__FSM_LAMP_RED_EStop,
			Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY,
			Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY_FSM_Festo2__Inner_LampYellow_OFF,
			Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY_FSM_Festo2__Inner_LampYellow_RampFull,
			Festo2__FSM_LAMP_YELLOW_EStop,
			FSM_SystemV2_HeartBeatFailed,
			FSM_SystemV2_FSM_System,
			Festo_FSM_System,
			Ready,
			ServiceMode,
			Operational,
			Error,
			EStop,
			EStop_FSM_EStop_EStopReceived,
			EStop_FSM_EStop_EStopCleared,
			EStop_FSM_EStop_BGR1Pressed,
			EStop_FSM_EStop_BGR2Pressed,
			EStop_FSM_EStop_BGR2PressedAfterBGR1,
			EStop_FSM_EStop_BGR1PressedAfterBGR2,
			EStop_FSM_EStop__final_,
			EStopCalibration,
			Festo2__Errors_FSM_Errors,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinHMRestart,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_SortingUnknownPuk,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinIngressRestart,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_SortingUnkwonPukAcknowledged,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_Idle,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinSortingRestart,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_EgressUnknownPukAcknowledged,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_EgressMissingPuk,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_HMUnknownPukAcknowledged,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_HMUnknownPuk,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_IngressUnkownPuk,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinEgressRestart,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_RampFullUnknownPuk,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_RampFullUnknownPukAcknowledged,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinRampRestart,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_IngressMissingPuk,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_EgressUnknownPuk,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_RampFullMissingPuk,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_SortingMissingPuk,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_IngressUnkownPukAcknowledged,
			Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_HMMissingPuk,
			Festo2__Errors_EStop,
			Festo2__Errors_Start
		};
		
		/*! The number of states. */
		static constexpr const sc::integer numStates {205};
		static constexpr const sc::integer scvi_FSM_Festo1_Ingress_FSM_Festo1__Ingress {0};
		static constexpr const sc::integer scvi_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress {0};
		static constexpr const sc::integer scvi_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress_Idle {0};
		static constexpr const sc::integer scvi_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress_PukPresent {0};
		static constexpr const sc::integer scvi_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress_CreatingDistance {0};
		static constexpr const sc::integer scvi_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_ErrorFST1 {0};
		static constexpr const sc::integer scvi_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Stop {0};
		static constexpr const sc::integer scvi_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Start {0};
		static constexpr const sc::integer scvi_FSM_Festo1_Ingress_ESTOP__HEARTBEATFAILED {0};
		static constexpr const sc::integer scvi_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement {1};
		static constexpr const sc::integer scvi_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement {1};
		static constexpr const sc::integer scvi_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Idle {1};
		static constexpr const sc::integer scvi_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring {1};
		static constexpr const sc::integer scvi_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_A {1};
		static constexpr const sc::integer scvi_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_B {1};
		static constexpr const sc::integer scvi_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_C {1};
		static constexpr const sc::integer scvi_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_Error {1};
		static constexpr const sc::integer scvi_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement__final_ {1};
		static constexpr const sc::integer scvi_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_PukExpected {1};
		static constexpr const sc::integer scvi_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_Start {1};
		static constexpr const sc::integer scvi_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_Stop {1};
		static constexpr const sc::integer scvi_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_ErrorFST1 {1};
		static constexpr const sc::integer scvi_FSM_Festo1__HeightMeasurement_ESTOP__HEARTBEATFAILED {1};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_FSM_Festo1__Sorting {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_Idle {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_PukExpected {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_Evaluate {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EjectingDiverter {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_TransferEjector {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_TransferDivider {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EjectingEjector {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EvaluateCounter {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Start {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Stop {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_ErrorFST1 {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_ESTOP__HEARTBEATFAILED {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_FSM_Festo1__Egress {3};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress {3};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_Waiting {3};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_Transfer {3};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_PukExpected {3};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_IDLE {3};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_FST1Error {3};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Stop {3};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Start {3};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_ESTOP__HEARTBEATFAILED {3};
		static constexpr const sc::integer scvi_FSM_QualityGate__Motor_SystemMotor {4};
		static constexpr const sc::integer scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward {4};
		static constexpr const sc::integer scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow {4};
		static constexpr const sc::integer scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop {4};
		static constexpr const sc::integer scvi_FSM_Festo2__Ingress_FSM_Festo2__Ingress {5};
		static constexpr const sc::integer scvi_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress {5};
		static constexpr const sc::integer scvi_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress_Idle {5};
		static constexpr const sc::integer scvi_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress_PukExpected {5};
		static constexpr const sc::integer scvi_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress_PukinLBF2 {5};
		static constexpr const sc::integer scvi_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Stop {5};
		static constexpr const sc::integer scvi_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Start {5};
		static constexpr const sc::integer scvi_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_ErrorFST2 {5};
		static constexpr const sc::integer scvi_FSM_Festo2__Ingress_ESTOP__HEARTBEATFAILED {5};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement {6};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement {6};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Idle {6};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_PukExpected {6};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring {6};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_A {6};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_B {6};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_C {6};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_Error {6};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement__final_ {6};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_Start {6};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_Stop {6};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_FST2Error {6};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_ESTOP__HEARTBEATFAILED {6};
		static constexpr const sc::integer scvi_FSM_Festo2__Egress_FSM_Festo2__Egress {7};
		static constexpr const sc::integer scvi_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress {7};
		static constexpr const sc::integer scvi_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress_IDLE {7};
		static constexpr const sc::integer scvi_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress_Transfer {7};
		static constexpr const sc::integer scvi_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress_PukExpected {7};
		static constexpr const sc::integer scvi_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Start {7};
		static constexpr const sc::integer scvi_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Stop {7};
		static constexpr const sc::integer scvi_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_ErrorFST2 {7};
		static constexpr const sc::integer scvi_FSM_Festo2__Egress_ESTOP__HEARTBEATFAILED {7};
		static constexpr const sc::integer scvi_FSM_Festo2__Motor_SystemMotor {8};
		static constexpr const sc::integer scvi_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward {8};
		static constexpr const sc::integer scvi_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow {8};
		static constexpr const sc::integer scvi_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop {8};
		static constexpr const sc::integer scvi_Evaluate_EvaluateTester {9};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinHMRestart {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_SortingUnknownPuk {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinIngressRestart {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_SortingUnkwonPukAcknowledged {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_Idle {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinSortingRestart {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_EgressUnknownPukAcknowledged {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_EgressMissingPuk {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_HMUnknownPukAcknowledged {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_HMUnknownPuk {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_IngressUnkownPuk {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinEgressRestart {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_RampFullUnknownPuk {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_RampFullUnknownPukAcknowledged {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinRampRestart {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_IngressMissingPuk {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_EgressUnknownPuk {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_RampFullMissingPuk {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_SortingMissingPuk {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_IngressUnkownPukAcknowledged {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_HMMissingPuk {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_EStop {10};
		static constexpr const sc::integer scvi_FSM_Festo1__Errors_Start {10};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_FSM_Festo2__Sorting {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_Idle {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_PukExpected {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_Evaluate {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EjectingDiverter {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_TransferEjector {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_TransferDivider {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EjectingEjector {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EvaluateCounter {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_AwaitingRampClearanceDivider {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_AwaitingRampClearanceEjector {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Stop {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Start {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_ErrorFST2 {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_ESTOP__HEARTBEATFAILED {11};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_RED_FSM_Festo1__LR {12};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_OFF {12};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorMissingPuk {12};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorUnknownPuk {12};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorUnknownPukAcknowledged {12};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_RED_EStop {12};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_RED_HeartbeatFailed {12};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG {13};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_OFF {13};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_ServiceMode {13};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_Distancing {13};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_operational {13};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_GREEN_EStop {13};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_GREEN_HeartBeatFailed {13};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_GREEN_Error {13};
		static constexpr const sc::integer scvi_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG {14};
		static constexpr const sc::integer scvi_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_OFF {14};
		static constexpr const sc::integer scvi_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_ServiceMode {14};
		static constexpr const sc::integer scvi_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_Distancing {14};
		static constexpr const sc::integer scvi_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_Operational {14};
		static constexpr const sc::integer scvi_Festo2__FSM_LAMP_GREEN_EStop {14};
		static constexpr const sc::integer scvi_Festo2__FSM_LAMP_GREEN_Error {14};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY {15};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY_FSM_Festo1__Inner_LampYellow_OFF {15};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY_FSM_Festo1__Inner_LampYellow_RampFull {15};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_YELLOW_EStop {15};
		static constexpr const sc::integer scvi_Festo1__FSM_LAMP_YELLOW_HeartbeatFailed {15};
		static constexpr const sc::integer scvi_Festo2__FSM_LAMP_RED_FSM_Festo2__LR {16};
		static constexpr const sc::integer scvi_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_OFF {16};
		static constexpr const sc::integer scvi_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorMissingPuk {16};
		static constexpr const sc::integer scvi_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorUnknownPuk {16};
		static constexpr const sc::integer scvi_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorUnknownPukAcknowledged {16};
		static constexpr const sc::integer scvi_Festo2__FSM_LAMP_RED_EStop {16};
		static constexpr const sc::integer scvi_Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY {17};
		static constexpr const sc::integer scvi_Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY_FSM_Festo2__Inner_LampYellow_OFF {17};
		static constexpr const sc::integer scvi_Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY_FSM_Festo2__Inner_LampYellow_RampFull {17};
		static constexpr const sc::integer scvi_Festo2__FSM_LAMP_YELLOW_EStop {17};
		static constexpr const sc::integer scvi_FSM_SystemV2_HeartBeatFailed {18};
		static constexpr const sc::integer scvi_FSM_SystemV2_FSM_System {18};
		static constexpr const sc::integer scvi_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System {18};
		static constexpr const sc::integer scvi_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_Ready {18};
		static constexpr const sc::integer scvi_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_ServiceMode {18};
		static constexpr const sc::integer scvi_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_Operational {18};
		static constexpr const sc::integer scvi_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_Error {18};
		static constexpr const sc::integer scvi_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop {18};
		static constexpr const sc::integer scvi_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_EStopReceived {18};
		static constexpr const sc::integer scvi_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_EStopCleared {18};
		static constexpr const sc::integer scvi_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR1Pressed {18};
		static constexpr const sc::integer scvi_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR2Pressed {18};
		static constexpr const sc::integer scvi_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR2PressedAfterBGR1 {18};
		static constexpr const sc::integer scvi_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR1PressedAfterBGR2 {18};
		static constexpr const sc::integer scvi_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop__final_ {18};
		static constexpr const sc::integer scvi_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStopCalibration {18};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinHMRestart {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_SortingUnknownPuk {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinIngressRestart {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_SortingUnkwonPukAcknowledged {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_Idle {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinSortingRestart {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_EgressUnknownPukAcknowledged {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_EgressMissingPuk {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_HMUnknownPukAcknowledged {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_HMUnknownPuk {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_IngressUnkownPuk {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinEgressRestart {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_RampFullUnknownPuk {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_RampFullUnknownPukAcknowledged {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinRampRestart {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_IngressMissingPuk {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_EgressUnknownPuk {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_RampFullMissingPuk {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_SortingMissingPuk {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_IngressUnkownPukAcknowledged {19};
		static constexpr const sc::integer scvi_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_HMMissingPuk {19};
		static constexpr const sc::integer scvi_Festo2__Errors_EStop {19};
		static constexpr const sc::integer scvi_Festo2__Errors_Start {19};
		
		/*! Enumeration of all events which are consumed. */
		enum class Event
		{
			NO_EVENT,
			HEARTBEAT_FAILED,
			HEARTBEAT_RECONNECT,
			FST_1_HEARTBEAT_RECONNECT,
			FST_2_HEARTBEAT_RECONNECT,
			SYSTEM_OPERATIONAL_IN,
			ESTOP_1_HIGH,
			ESTOP_1_LOW,
			ESTOP_2_HIGH,
			ESTOP_2_LOW,
			FST_1_POSITION_INGRESS_DISTANCE_VALID,
			FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED,
			FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED,
			FST_1_POSITION_SORTING_PUK_EXPECTED,
			FST_1_POSITION_SORTING_PUK_EXPIRED,
			FST_1_POSITION_DIVERTER_DISTANCE_VALID,
			FST_1_POSITION_EGRESS_PUK_EXPECTED,
			FST_1_POSITION_EGRESS_PUK_EXPIRED,
			FST_2_POSITION_INGRESS_DISTANCE_VALID,
			FST_2_POSITION_INGRESS_PUK_EXPECTED,
			FST_2_POSITION_INGRESS_PUK_EXPIRED,
			FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED,
			FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED,
			FST_2_POSITION_SORTING_PUK_EXPECTED,
			FST_2_POSITION_SORTING_PUK_EXPIRED,
			FST_2_POSITION_EGRESS_PUK_EXPECTED,
			FST_2_POSITION_EGRESS_PUK_EXPIRED,
			FST_2_POSITION_DIVERTER_DISTANCE_VALID,
			FST_1_ERROR_SYSTEM_RESOLVED,
			LBF_1_INTERRUPTED,
			LBF_1_OPEN,
			FST_1_PUK_ENTRY_HeightMeasurement,
			HS_1_SAMPLE,
			HS_1_SAMPLING_DONE,
			LBM_1_INTERRUPTED,
			LBM_1_OPEN,
			MS_1_HIGH,
			MS_1_LOW,
			LBR_1_INTERRUPTED,
			LBR_1_OPEN,
			FST_1_PUK_SORTING_PASSTHROUGH,
			FST_1_PUK_SORTING_EJECT,
			LBE_1_OPEN,
			LBE_1_INTERRUPTED,
			BGS_1_LONG_PRESSED,
			BGS_1_INTERRUPTED,
			BRS_1_INTERRUPTED,
			BGR_1_INTERRUPTED,
			FST_2_ERROR_SYSTEM_RESOLVED,
			LBF_2_INTERRUPTED,
			LBF_2_OPEN,
			HS_2_SAMPLE,
			HS_2_SAMPLING_DONE,
			LBM_2_INTERRUPTED,
			LBM_2_OPEN,
			MS_2_HIGH,
			MS_2_LOW,
			LBR_2_INTERRUPTED,
			LBR_2_OPEN,
			FST_2_PUK_ENTRY_EGRESS,
			FST_2_PUK_SORTING_PASSTHROUGH,
			FST_2_PUK_SORTING_EJECT,
			LBE_2_OPEN,
			LBE_2_INTERRUPTED,
			BGS_2_LONG_PRESSED,
			BGS_2_INTERRUPTED,
			BRS_2_INTERRUPTED,
			BGR_2_INTERRUPTED,
			ESTOP_SIGNAL,
			ESTOP_SIGNAL_RESET,
			RUNNING_SIGNAL,
			RUNNING_SIGNAL_RESET,
			WARNING_SIGNAL,
			WARNING_SIGNAL_RESET,
			READY_SIGNAL,
			READY_RESET,
			ERROR_SIGNAL,
			Internal_local_ESTOP_RECEIVED,
			Internal_local_SYSTEM_OPERATIONAL_OUT,
			Internal_local_FST_1_ERROR_SYSTEM,
			Internal_local_ESTOP_CLEARED,
			Internal_local_FST_2_NOT_READY,
			Internal_local_FST_2_IS_READY,
			Internal_local_FST_2_ERROR_SYSTEM,
			Internal_local_EVALUATE,
			Internal_local_FST_1_ERROR_HM_UNKNOWNPUK,
			Internal_local_FST_1_ERROR_SORTING_UNKNOWNPUK,
			Internal_local_FST_1_ERROR_EGRESS_MISSING_PUK,
			Internal_local_FST_1_ERROR_RAMPFULL_UNKNOWNPUK,
			Internal_local_FST_1_ERROR_INGRESS_UNKNOWNPUK,
			Internal_local_FST_1_ERROR_INGRESS_MISSING_PUK,
			Internal_local_FST_1_ERROR_EGRESS_UNKNOWNPUK,
			Internal_local_FST_1_ERROR_RAMPFULL_MISSING_PUK,
			Internal_local_FST_1_ERROR_SORTING_MISSING_PUK,
			Internal_local_FST_1_ERROR_HM_MISSING_PUK,
			Internal_local_FST_1_ERROR_IN_READY,
			Internal_local_FST_1_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED,
			Internal_local_FST_1_ERROR_LAMP_UNACKNOWLEDGED,
			Internal_local_FST_1_ERROR_LAMP_RESOLVED,
			Internal_local_FST_1_ERROR_ACKNOWLEDGED,
			Internal_local_SYSTEM_SERVICE_IN,
			Internal_local_SYSTEM_SERVICE_OUT,
			Internal_local_FST_2_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED,
			Internal_local_FST_2_ERROR_UNACKNOWLEDGED,
			Internal_local_FST_2_ERROR_LAMP_RESOLVED,
			Internal_local_FST_2_ERROR_ACKNOWLEDGED,
			Internal_local_FST_2_ERROR_HM_UNKNOWNPUK,
			Internal_local_FST_2_ERROR_SORTING_UNKNOWNPUK,
			Internal_local_FST_2_ERROR_EGRESS_MISSING_PUK,
			Internal_local_FST_2_ERROR_RAMPFULL_UNKNOWNPUK,
			Internal_local_FST_2_ERROR_INGRESS_UNKNOWNPUK,
			Internal_local_FST_2_ERROR_INGRESS_MISSING_PUK,
			Internal_local_FST_2_ERROR_EGRESS_UNKNOWNPUK,
			Internal_local_FST_2_ERROR_RAMPFULL_MISSINGPUK,
			Internal_local_FST_2_ERROR_SORTING_MISSING_PUK,
			Internal_local_FST_2_ERROR_HM_MISSING_PUK,
			Internal_local_FST_2_ERROR_IN_READY
		};
		
		class EventInstance
		{
			public:
				explicit  EventInstance(Event id) noexcept : eventId(id){}
				virtual ~EventInstance() = default;
				const Event eventId;
		};
		/*! Raises the in event 'HEARTBEAT_FAILED' of default interface scope. */
		void raiseHEARTBEAT_FAILED();
		/*! Raises the in event 'HEARTBEAT_RECONNECT' of default interface scope. */
		void raiseHEARTBEAT_RECONNECT();
		/*! Raises the in event 'FST_1_HEARTBEAT_RECONNECT' of default interface scope. */
		void raiseFST_1_HEARTBEAT_RECONNECT();
		/*! Raises the in event 'FST_2_HEARTBEAT_RECONNECT' of default interface scope. */
		void raiseFST_2_HEARTBEAT_RECONNECT();
		/*! Raises the in event 'SYSTEM_OPERATIONAL_IN' of default interface scope. */
		void raiseSYSTEM_OPERATIONAL_IN();
		/*! Get observable for event 'SYSTEM_OPERATIONAL_OUT' of default interface scope. */
		sc::rx::Observable<void>& getSYSTEM_OPERATIONAL_OUT() noexcept;
		/*! Get observable for event 'SYSTEM_SERVICE_IN' of default interface scope. */
		sc::rx::Observable<void>& getSYSTEM_SERVICE_IN() noexcept;
		/*! Get observable for event 'SYSTEM_SERVICE_OUT' of default interface scope. */
		sc::rx::Observable<void>& getSYSTEM_SERVICE_OUT() noexcept;
		/*! Get observable for event 'ESTOP_RECEIVED' of default interface scope. */
		sc::rx::Observable<void>& getESTOP_RECEIVED() noexcept;
		/*! Get observable for event 'ESTOP_CLEARED' of default interface scope. */
		sc::rx::Observable<void>& getESTOP_CLEARED() noexcept;
		/*! Get observable for event 'EVALUATE' of default interface scope. */
		sc::rx::Observable<void>& getEVALUATE() noexcept;
		/*! Get observable for event 'FST_1_ERROR_IN_READY' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_IN_READY() noexcept;
		/*! Get observable for event 'FST_2_ERROR_IN_READY' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_IN_READY() noexcept;
		/*! Get observable for event 'FST_1_ERROR_IN_READY_CLEARED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_IN_READY_CLEARED() noexcept;
		/*! Get observable for event 'FST_2_ERROR_IN_READY_CLEARED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_IN_READY_CLEARED() noexcept;
		/*! Raises the in event 'ESTOP_1_HIGH' of default interface scope. */
		void raiseESTOP_1_HIGH();
		/*! Raises the in event 'ESTOP_1_LOW' of default interface scope. */
		void raiseESTOP_1_LOW();
		/*! Raises the in event 'ESTOP_2_HIGH' of default interface scope. */
		void raiseESTOP_2_HIGH();
		/*! Raises the in event 'ESTOP_2_LOW' of default interface scope. */
		void raiseESTOP_2_LOW();
		/*! Get observable for event 'FST_1_POSITION_INGRESS_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_POSITION_INGRESS_NEW_PUK() noexcept;
		/*! Raises the in event 'FST_1_POSITION_INGRESS_DISTANCE_VALID' of default interface scope. */
		void raiseFST_1_POSITION_INGRESS_DISTANCE_VALID();
		/*! Get observable for event 'FST_1_POSITION_HEIGHTMEASUREMENT_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_POSITION_HEIGHTMEASUREMENT_NEW_PUK() noexcept;
		/*! Raises the in event 'FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED' of default interface scope. */
		void raiseFST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED();
		/*! Raises the in event 'FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED' of default interface scope. */
		void raiseFST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED();
		/*! Get observable for event 'FST_1_POSITION_SORTING_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_POSITION_SORTING_NEW_PUK() noexcept;
		/*! Raises the in event 'FST_1_POSITION_SORTING_PUK_EXPECTED' of default interface scope. */
		void raiseFST_1_POSITION_SORTING_PUK_EXPECTED();
		/*! Raises the in event 'FST_1_POSITION_SORTING_PUK_EXPIRED' of default interface scope. */
		void raiseFST_1_POSITION_SORTING_PUK_EXPIRED();
		/*! Raises the in event 'FST_1_POSITION_DIVERTER_DISTANCE_VALID' of default interface scope. */
		void raiseFST_1_POSITION_DIVERTER_DISTANCE_VALID();
		/*! Get observable for event 'FST_1_POSITION_EGRESS_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_POSITION_EGRESS_NEW_PUK() noexcept;
		/*! Raises the in event 'FST_1_POSITION_EGRESS_PUK_EXPECTED' of default interface scope. */
		void raiseFST_1_POSITION_EGRESS_PUK_EXPECTED();
		/*! Raises the in event 'FST_1_POSITION_EGRESS_PUK_EXPIRED' of default interface scope. */
		void raiseFST_1_POSITION_EGRESS_PUK_EXPIRED();
		/*! Get observable for event 'FST_1_POSITION_INGRESS_PUK_REMOVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_POSITION_INGRESS_PUK_REMOVED() noexcept;
		/*! Get observable for event 'FST_1_POSITION_HEIGHTMEASUREMENT_PUK_REMOVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_POSITION_HEIGHTMEASUREMENT_PUK_REMOVED() noexcept;
		/*! Get observable for event 'FST_1_POSITION_SORTING_PUK_REMOVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_POSITION_SORTING_PUK_REMOVED() noexcept;
		/*! Get observable for event 'FST_1_POSITION_EGRESS_PUK_REMOVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_POSITION_EGRESS_PUK_REMOVED() noexcept;
		/*! Get observable for event 'FST_2_POSITION_INGRESS_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_POSITION_INGRESS_NEW_PUK() noexcept;
		/*! Raises the in event 'FST_2_POSITION_INGRESS_DISTANCE_VALID' of default interface scope. */
		void raiseFST_2_POSITION_INGRESS_DISTANCE_VALID();
		/*! Raises the in event 'FST_2_POSITION_INGRESS_PUK_EXPECTED' of default interface scope. */
		void raiseFST_2_POSITION_INGRESS_PUK_EXPECTED();
		/*! Raises the in event 'FST_2_POSITION_INGRESS_PUK_EXPIRED' of default interface scope. */
		void raiseFST_2_POSITION_INGRESS_PUK_EXPIRED();
		/*! Get observable for event 'FST_2_POSITION_HEIGHTMEASUREMENT_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_POSITION_HEIGHTMEASUREMENT_NEW_PUK() noexcept;
		/*! Raises the in event 'FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED' of default interface scope. */
		void raiseFST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED();
		/*! Raises the in event 'FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED' of default interface scope. */
		void raiseFST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED();
		/*! Get observable for event 'FST_2_POSITION_SORTING_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_POSITION_SORTING_NEW_PUK() noexcept;
		/*! Raises the in event 'FST_2_POSITION_SORTING_PUK_EXPECTED' of default interface scope. */
		void raiseFST_2_POSITION_SORTING_PUK_EXPECTED();
		/*! Raises the in event 'FST_2_POSITION_SORTING_PUK_EXPIRED' of default interface scope. */
		void raiseFST_2_POSITION_SORTING_PUK_EXPIRED();
		/*! Get observable for event 'FST_2_POSITION_EGRESS_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_POSITION_EGRESS_NEW_PUK() noexcept;
		/*! Raises the in event 'FST_2_POSITION_EGRESS_PUK_EXPECTED' of default interface scope. */
		void raiseFST_2_POSITION_EGRESS_PUK_EXPECTED();
		/*! Raises the in event 'FST_2_POSITION_EGRESS_PUK_EXPIRED' of default interface scope. */
		void raiseFST_2_POSITION_EGRESS_PUK_EXPIRED();
		/*! Get observable for event 'FST_2_POSITION_INGRESS_PUK_REMOVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_POSITION_INGRESS_PUK_REMOVED() noexcept;
		/*! Get observable for event 'FST_2_POSITION_HEIGHTMEASUREMENT_PUK_REMOVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_POSITION_HEIGHTMEASUREMENT_PUK_REMOVED() noexcept;
		/*! Get observable for event 'FST_2_POSITION_SORTING_PUK_REMOVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_POSITION_SORTING_PUK_REMOVED() noexcept;
		/*! Get observable for event 'FST_2_POSITION_EGRESS_PUK_REMOVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_POSITION_EGRESS_PUK_REMOVED() noexcept;
		/*! Raises the in event 'FST_2_POSITION_DIVERTER_DISTANCE_VALID' of default interface scope. */
		void raiseFST_2_POSITION_DIVERTER_DISTANCE_VALID();
		/*! Get observable for event 'FST_1_ERROR_SYSTEM' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_SYSTEM() noexcept;
		/*! Raises the in event 'FST_1_ERROR_SYSTEM_RESOLVED' of default interface scope. */
		void raiseFST_1_ERROR_SYSTEM_RESOLVED();
		/*! Get observable for event 'FST_1_ERROR_INGRESS_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_INGRESS_MISSING_PUK() noexcept;
		/*! Get observable for event 'FST_1_ERROR_INGRESS_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_INGRESS_UNKNOWNPUK() noexcept;
		/*! Get observable for event 'FST_1_ERROR_INGRESS_RESOLVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_INGRESS_RESOLVED() noexcept;
		/*! Get observable for event 'FST_1_ERROR_HM_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_HM_UNKNOWNPUK() noexcept;
		/*! Get observable for event 'FST_1_ERROR_HM_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_HM_MISSING_PUK() noexcept;
		/*! Get observable for event 'FST_1_ERROR_HM_RESOLVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_HM_RESOLVED() noexcept;
		/*! Get observable for event 'FST_1_ERROR_SORTING_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_SORTING_UNKNOWNPUK() noexcept;
		/*! Get observable for event 'FST_1_ERROR_SORTING_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_SORTING_MISSING_PUK() noexcept;
		/*! Get observable for event 'FST_1_ERROR_SORTING_RESOLVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_SORTING_RESOLVED() noexcept;
		/*! Get observable for event 'FST_1_ERROR_RAMPFULL_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_RAMPFULL_UNKNOWNPUK() noexcept;
		/*! Get observable for event 'FST_1_ERROR_RAMPFULL_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_RAMPFULL_MISSING_PUK() noexcept;
		/*! Get observable for event 'FST_1_ERROR_EGRESS_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_EGRESS_UNKNOWNPUK() noexcept;
		/*! Get observable for event 'FST_1_ERROR_EGRESS_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_EGRESS_MISSING_PUK() noexcept;
		/*! Get observable for event 'FST_1_ERROR_EGRESS_RESOLVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_EGRESS_RESOLVED() noexcept;
		/*! Get observable for event 'FST_1_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED() noexcept;
		/*! Get observable for event 'FST_1_ERROR_LAMP_UNACKNOWLEDGED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_LAMP_UNACKNOWLEDGED() noexcept;
		/*! Get observable for event 'FST_1_ERROR_LAMP_RESOLVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_LAMP_RESOLVED() noexcept;
		/*! Get observable for event 'FST_1_ERROR_UNACKNOWLEDGED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_UNACKNOWLEDGED() noexcept;
		/*! Get observable for event 'FST_1_ERROR_ACKNOWLEDGED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_ACKNOWLEDGED() noexcept;
		/*! Get observable for event 'FST_1_ERROR_SORTING_RAMPFULL_' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_ERROR_SORTING_RAMPFULL_() noexcept;
		/*! Raises the in event 'LBF_1_INTERRUPTED' of default interface scope. */
		void raiseLBF_1_INTERRUPTED();
		/*! Raises the in event 'LBF_1_OPEN' of default interface scope. */
		void raiseLBF_1_OPEN();
		/*! Raises the in event 'FST_1_PUK_ENTRY_HeightMeasurement' of default interface scope. */
		void raiseFST_1_PUK_ENTRY_HeightMeasurement();
		/*! Get observable for event 'FST_1_INGRESS_IN' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_INGRESS_IN() noexcept;
		/*! Get observable for event 'FST_1_INGRESS_OUT' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_INGRESS_OUT() noexcept;
		/*! Get observable for event 'FST_1_PUK_DISTANCE_VALID_INGRESS' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_DISTANCE_VALID_INGRESS() noexcept;
		/*! Raises the in event 'HS_1_SAMPLE' of default interface scope. */
		void raiseHS_1_SAMPLE();
		/*! Raises the in event 'HS_1_SAMPLING_DONE' of default interface scope. */
		void raiseHS_1_SAMPLING_DONE();
		/*! Get observable for event 'FST_1_PUK_ENTRY_SORTING' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_ENTRY_SORTING() noexcept;
		/*! Get observable for event 'FST_1_HeightMeasurement_Counter' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_HeightMeasurement_Counter() noexcept;
		/*! Get observable for event 'FST_1_PUK_HEIGHT_IS_VALID' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_HEIGHT_IS_VALID() noexcept;
		/*! Get observable for event 'FST_1_PUK_HEIGHT_IS_NOT_VALID' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_HEIGHT_IS_NOT_VALID() noexcept;
		/*! Raises the in event 'LBM_1_INTERRUPTED' of default interface scope. */
		void raiseLBM_1_INTERRUPTED();
		/*! Raises the in event 'LBM_1_OPEN' of default interface scope. */
		void raiseLBM_1_OPEN();
		/*! Raises the in event 'MS_1_HIGH' of default interface scope. */
		void raiseMS_1_HIGH();
		/*! Raises the in event 'MS_1_LOW' of default interface scope. */
		void raiseMS_1_LOW();
		/*! Raises the in event 'LBR_1_INTERRUPTED' of default interface scope. */
		void raiseLBR_1_INTERRUPTED();
		/*! Raises the in event 'LBR_1_OPEN' of default interface scope. */
		void raiseLBR_1_OPEN();
		/*! Get observable for event 'FST_1_PUK_IS_METAL' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_IS_METAL() noexcept;
		/*! Get observable for event 'FST_1_PUK_IS_NOT_METAL' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_IS_NOT_METAL() noexcept;
		/*! Get observable for event 'FST_1_PUK_DESIRED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_DESIRED() noexcept;
		/*! Get observable for event 'FST_1_PUK_NOT_DESIRED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_NOT_DESIRED() noexcept;
		/*! Get observable for event 'FST_1_PUK_ENTRY_EGRESS' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_ENTRY_EGRESS() noexcept;
		/*! Get observable for event 'FST_1_SORTING_MODULE_ACTIVE' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_SORTING_MODULE_ACTIVE() noexcept;
		/*! Get observable for event 'FST_1_SORTING_MODULE_RESTING' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_SORTING_MODULE_RESTING() noexcept;
		/*! Raises the in event 'FST_1_PUK_SORTING_PASSTHROUGH' of default interface scope. */
		void raiseFST_1_PUK_SORTING_PASSTHROUGH();
		/*! Raises the in event 'FST_1_PUK_SORTING_EJECT' of default interface scope. */
		void raiseFST_1_PUK_SORTING_EJECT();
		/*! Raises the in event 'LBE_1_OPEN' of default interface scope. */
		void raiseLBE_1_OPEN();
		/*! Raises the in event 'LBE_1_INTERRUPTED' of default interface scope. */
		void raiseLBE_1_INTERRUPTED();
		/*! Get observable for event 'FST_2_NOT_READY' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_NOT_READY() noexcept;
		/*! Get observable for event 'FST_2_IS_READY' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_IS_READY() noexcept;
		/*! Get observable for event 'MOTOR_1_STOP' of default interface scope. */
		sc::rx::Observable<void>& getMOTOR_1_STOP() noexcept;
		/*! Get observable for event 'MOTOR_1_FAST' of default interface scope. */
		sc::rx::Observable<void>& getMOTOR_1_FAST() noexcept;
		/*! Get observable for event 'MOTOR_1_SLOW' of default interface scope. */
		sc::rx::Observable<void>& getMOTOR_1_SLOW() noexcept;
		/*! Raises the in event 'BGS_1_LONG_PRESSED' of default interface scope. */
		void raiseBGS_1_LONG_PRESSED();
		/*! Raises the in event 'BGS_1_INTERRUPTED' of default interface scope. */
		void raiseBGS_1_INTERRUPTED();
		/*! Raises the in event 'BRS_1_INTERRUPTED' of default interface scope. */
		void raiseBRS_1_INTERRUPTED();
		/*! Raises the in event 'BGR_1_INTERRUPTED' of default interface scope. */
		void raiseBGR_1_INTERRUPTED();
		/*! Get observable for event 'LG1_ON' of default interface scope. */
		sc::rx::Observable<void>& getLG1_ON() noexcept;
		/*! Get observable for event 'LG1_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void>& getLG1_BLINKING_1HZ() noexcept;
		/*! Get observable for event 'LG1_BLINKING_2HZ' of default interface scope. */
		sc::rx::Observable<void>& getLG1_BLINKING_2HZ() noexcept;
		/*! Get observable for event 'LG1_OFF' of default interface scope. */
		sc::rx::Observable<void>& getLG1_OFF() noexcept;
		/*! Get observable for event 'LY1_ON' of default interface scope. */
		sc::rx::Observable<void>& getLY1_ON() noexcept;
		/*! Get observable for event 'LY1_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void>& getLY1_BLINKING_1HZ() noexcept;
		/*! Get observable for event 'LY1_OFF' of default interface scope. */
		sc::rx::Observable<void>& getLY1_OFF() noexcept;
		/*! Get observable for event 'LR1_ON' of default interface scope. */
		sc::rx::Observable<void>& getLR1_ON() noexcept;
		/*! Get observable for event 'LR_1_BLINKING_2HZ' of default interface scope. */
		sc::rx::Observable<void>& getLR_1_BLINKING_2HZ() noexcept;
		/*! Get observable for event 'LR_1_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void>& getLR_1_BLINKING_1HZ() noexcept;
		/*! Get observable for event 'LR_1_BLINKING_05HZ' of default interface scope. */
		sc::rx::Observable<void>& getLR_1_BLINKING_05HZ() noexcept;
		/*! Get observable for event 'LR1_OFF' of default interface scope. */
		sc::rx::Observable<void>& getLR1_OFF() noexcept;
		/*! Get observable for event 'Q11_ON' of default interface scope. */
		sc::rx::Observable<void>& getQ11_ON() noexcept;
		/*! Get observable for event 'Q12_ON' of default interface scope. */
		sc::rx::Observable<void>& getQ12_ON() noexcept;
		/*! Get observable for event 'Q11_OFF' of default interface scope. */
		sc::rx::Observable<void>& getQ11_OFF() noexcept;
		/*! Get observable for event 'Q12_OFF' of default interface scope. */
		sc::rx::Observable<void>& getQ12_OFF() noexcept;
		/*! Get observable for event 'FST_2_ERROR_SYSTEM' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_SYSTEM() noexcept;
		/*! Raises the in event 'FST_2_ERROR_SYSTEM_RESOLVED' of default interface scope. */
		void raiseFST_2_ERROR_SYSTEM_RESOLVED();
		/*! Get observable for event 'FST_2_ERROR_INGRESS_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_INGRESS_UNKNOWNPUK() noexcept;
		/*! Get observable for event 'FST_2_ERROR_INGRESS_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_INGRESS_MISSING_PUK() noexcept;
		/*! Get observable for event 'FST_2_ERROR_INGRESS_RESOLVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_INGRESS_RESOLVED() noexcept;
		/*! Get observable for event 'FST_2_ERROR_HM_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_HM_UNKNOWNPUK() noexcept;
		/*! Get observable for event 'FST_2_ERROR_HM_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_HM_MISSING_PUK() noexcept;
		/*! Get observable for event 'FST_2_ERROR_HM_RESOLVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_HM_RESOLVED() noexcept;
		/*! Get observable for event 'FST_2_ERROR_SORTING_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_SORTING_UNKNOWNPUK() noexcept;
		/*! Get observable for event 'FST_2_ERROR_SORTING_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_SORTING_MISSING_PUK() noexcept;
		/*! Get observable for event 'FST_2_ERROR_SORTING_RESOLVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_SORTING_RESOLVED() noexcept;
		/*! Get observable for event 'FST_2_ERROR_RAMPFULL_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_RAMPFULL_UNKNOWNPUK() noexcept;
		/*! Get observable for event 'FST_2_ERROR_RAMPFULL_MISSINGPUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_RAMPFULL_MISSINGPUK() noexcept;
		/*! Get observable for event 'FST_2_ERROR_RAMPCLEARED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_RAMPCLEARED() noexcept;
		/*! Get observable for event 'FST_2_ERROR_EGRESS_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_EGRESS_UNKNOWNPUK() noexcept;
		/*! Get observable for event 'FST_2_ERROR_EGRESS_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_EGRESS_MISSING_PUK() noexcept;
		/*! Get observable for event 'FST_2_ERROR_EGRESS_RESOLVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_EGRESS_RESOLVED() noexcept;
		/*! Get observable for event 'FST_2_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED() noexcept;
		/*! Get observable for event 'FST_2_ERROR_UNACKNOWLEDGED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_UNACKNOWLEDGED() noexcept;
		/*! Get observable for event 'FST_2_ERROR_ACKNOWLEDGED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_ACKNOWLEDGED() noexcept;
		/*! Raises the in event 'LBF_2_INTERRUPTED' of default interface scope. */
		void raiseLBF_2_INTERRUPTED();
		/*! Raises the in event 'LBF_2_OPEN' of default interface scope. */
		void raiseLBF_2_OPEN();
		/*! Get observable for event 'FST_2_PUK_ENTRY_HeightMeasurement' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_ENTRY_HeightMeasurement() noexcept;
		/*! Get observable for event 'FST_2_INGRESS_IN' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_INGRESS_IN() noexcept;
		/*! Get observable for event 'FST_2_INGRESS_OUT' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_INGRESS_OUT() noexcept;
		/*! Get observable for event 'FST_2_PUK_DISTANCE_VALID_INGRESS' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_DISTANCE_VALID_INGRESS() noexcept;
		/*! Get observable for event 'FST_2_YELLOW_LAMP_ON' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_YELLOW_LAMP_ON() noexcept;
		/*! Get observable for event 'FST_2_YELLOW_LAMP_OFF' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_YELLOW_LAMP_OFF() noexcept;
		/*! Raises the in event 'HS_2_SAMPLE' of default interface scope. */
		void raiseHS_2_SAMPLE();
		/*! Raises the in event 'HS_2_SAMPLING_DONE' of default interface scope. */
		void raiseHS_2_SAMPLING_DONE();
		/*! Get observable for event 'FST_2_PUK_ENTRY_SORTING' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_ENTRY_SORTING() noexcept;
		/*! Get observable for event 'FST_2_PUK_HEIGHT_IS_VALID' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_HEIGHT_IS_VALID() noexcept;
		/*! Get observable for event 'FST_2_PUK_HEIGHT_IS_NOT_VALID' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_HEIGHT_IS_NOT_VALID() noexcept;
		/*! Raises the in event 'LBM_2_INTERRUPTED' of default interface scope. */
		void raiseLBM_2_INTERRUPTED();
		/*! Raises the in event 'LBM_2_OPEN' of default interface scope. */
		void raiseLBM_2_OPEN();
		/*! Raises the in event 'MS_2_HIGH' of default interface scope. */
		void raiseMS_2_HIGH();
		/*! Raises the in event 'MS_2_LOW' of default interface scope. */
		void raiseMS_2_LOW();
		/*! Raises the in event 'LBR_2_INTERRUPTED' of default interface scope. */
		void raiseLBR_2_INTERRUPTED();
		/*! Raises the in event 'LBR_2_OPEN' of default interface scope. */
		void raiseLBR_2_OPEN();
		/*! Get observable for event 'FST_2_PUK_DESIRED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_DESIRED() noexcept;
		/*! Get observable for event 'FST_2_PUK_NOT_DESIRED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_NOT_DESIRED() noexcept;
		/*! Raises the in event 'FST_2_PUK_ENTRY_EGRESS' of default interface scope. */
		void raiseFST_2_PUK_ENTRY_EGRESS();
		/*! Get observable for event 'FST_2_PUK_EJECTOR_DISTANCE_VALID' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_EJECTOR_DISTANCE_VALID() noexcept;
		/*! Get observable for event 'FST_2_SORTING_MODULE_ACTIVE' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_SORTING_MODULE_ACTIVE() noexcept;
		/*! Get observable for event 'FST_2_SORTING_MODULE_RESTING' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_SORTING_MODULE_RESTING() noexcept;
		/*! Get observable for event 'FST_2_PUK_IS_METAL' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_IS_METAL() noexcept;
		/*! Get observable for event 'FST_2_PUK_IS_NOT_METAL' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_IS_NOT_METAL() noexcept;
		/*! Raises the in event 'FST_2_PUK_SORTING_PASSTHROUGH' of default interface scope. */
		void raiseFST_2_PUK_SORTING_PASSTHROUGH();
		/*! Raises the in event 'FST_2_PUK_SORTING_EJECT' of default interface scope. */
		void raiseFST_2_PUK_SORTING_EJECT();
		/*! Raises the in event 'LBE_2_OPEN' of default interface scope. */
		void raiseLBE_2_OPEN();
		/*! Raises the in event 'LBE_2_INTERRUPTED' of default interface scope. */
		void raiseLBE_2_INTERRUPTED();
		/*! Get observable for event 'FST_2_PUK_ENTRY_INGRESS' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_ENTRY_INGRESS() noexcept;
		/*! Get observable for event 'MOTOR_2_STOP' of default interface scope. */
		sc::rx::Observable<void>& getMOTOR_2_STOP() noexcept;
		/*! Get observable for event 'MOTOR_2_FAST' of default interface scope. */
		sc::rx::Observable<void>& getMOTOR_2_FAST() noexcept;
		/*! Get observable for event 'MOTOR_2_SLOW' of default interface scope. */
		sc::rx::Observable<void>& getMOTOR_2_SLOW() noexcept;
		/*! Raises the in event 'BGS_2_LONG_PRESSED' of default interface scope. */
		void raiseBGS_2_LONG_PRESSED();
		/*! Raises the in event 'BGS_2_INTERRUPTED' of default interface scope. */
		void raiseBGS_2_INTERRUPTED();
		/*! Raises the in event 'BRS_2_INTERRUPTED' of default interface scope. */
		void raiseBRS_2_INTERRUPTED();
		/*! Raises the in event 'BGR_2_INTERRUPTED' of default interface scope. */
		void raiseBGR_2_INTERRUPTED();
		/*! Get observable for event 'LG2_ON' of default interface scope. */
		sc::rx::Observable<void>& getLG2_ON() noexcept;
		/*! Get observable for event 'LG2_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void>& getLG2_BLINKING_1HZ() noexcept;
		/*! Get observable for event 'LG_2_BLINKING_2HZ' of default interface scope. */
		sc::rx::Observable<void>& getLG_2_BLINKING_2HZ() noexcept;
		/*! Get observable for event 'LG2_OFF' of default interface scope. */
		sc::rx::Observable<void>& getLG2_OFF() noexcept;
		/*! Get observable for event 'LY2_ON' of default interface scope. */
		sc::rx::Observable<void>& getLY2_ON() noexcept;
		/*! Get observable for event 'LY2_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void>& getLY2_BLINKING_1HZ() noexcept;
		/*! Get observable for event 'LY2_OFF' of default interface scope. */
		sc::rx::Observable<void>& getLY2_OFF() noexcept;
		/*! Get observable for event 'LR2_ON' of default interface scope. */
		sc::rx::Observable<void>& getLR2_ON() noexcept;
		/*! Get observable for event 'LR2_BLINKING2HZ' of default interface scope. */
		sc::rx::Observable<void>& getLR2_BLINKING2HZ() noexcept;
		/*! Get observable for event 'LR2_BLINKING1HZ' of default interface scope. */
		sc::rx::Observable<void>& getLR2_BLINKING1HZ() noexcept;
		/*! Get observable for event 'LR2_BLINKING05HZ' of default interface scope. */
		sc::rx::Observable<void>& getLR2_BLINKING05HZ() noexcept;
		/*! Get observable for event 'LR2_OFF' of default interface scope. */
		sc::rx::Observable<void>& getLR2_OFF() noexcept;
		/*! Get observable for event 'Q21_ON' of default interface scope. */
		sc::rx::Observable<void>& getQ21_ON() noexcept;
		/*! Get observable for event 'Q22_ON' of default interface scope. */
		sc::rx::Observable<void>& getQ22_ON() noexcept;
		/*! Get observable for event 'Q21_OFF' of default interface scope. */
		sc::rx::Observable<void>& getQ21_OFF() noexcept;
		/*! Get observable for event 'Q22_OFF' of default interface scope. */
		sc::rx::Observable<void>& getQ22_OFF() noexcept;
		/*! Get observable for event 'FST_2_ERROR_LAMP_RESOLVED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_ERROR_LAMP_RESOLVED() noexcept;
		/*! Raises the in event 'ESTOP_SIGNAL' of default interface scope. */
		void raiseESTOP_SIGNAL();
		/*! Raises the in event 'ESTOP_SIGNAL_RESET' of default interface scope. */
		void raiseESTOP_SIGNAL_RESET();
		/*! Raises the in event 'RUNNING_SIGNAL' of default interface scope. */
		void raiseRUNNING_SIGNAL();
		/*! Raises the in event 'RUNNING_SIGNAL_RESET' of default interface scope. */
		void raiseRUNNING_SIGNAL_RESET();
		/*! Raises the in event 'WARNING_SIGNAL' of default interface scope. */
		void raiseWARNING_SIGNAL();
		/*! Raises the in event 'WARNING_SIGNAL_RESET' of default interface scope. */
		void raiseWARNING_SIGNAL_RESET();
		/*! Raises the in event 'READY_SIGNAL' of default interface scope. */
		void raiseREADY_SIGNAL();
		/*! Raises the in event 'READY_RESET' of default interface scope. */
		void raiseREADY_RESET();
		/*! Raises the in event 'ERROR_SIGNAL' of default interface scope. */
		void raiseERROR_SIGNAL();
		
		
		/*! Gets the value of the variable 'calibrated' that is defined in the default interface scope. */
		bool getCalibrated() const noexcept;
		/*! Sets the value of the variable 'calibrated' that is defined in the default interface scope. */
		void setCalibrated(bool calibrated) noexcept;
		/*! Gets the value of the variable 'eStopCalibratedReturn' that is defined in the default interface scope. */
		bool getEStopCalibratedReturn() const noexcept;
		/*! Sets the value of the variable 'eStopCalibratedReturn' that is defined in the default interface scope. */
		void setEStopCalibratedReturn(bool eStopCalibratedReturn) noexcept;
		/*! Gets the value of the variable 'serviceModeReturn' that is defined in the default interface scope. */
		bool getServiceModeReturn() const noexcept;
		/*! Sets the value of the variable 'serviceModeReturn' that is defined in the default interface scope. */
		void setServiceModeReturn(bool serviceModeReturn) noexcept;
		/*! Gets the value of the variable 'readyReturn' that is defined in the default interface scope. */
		bool getReadyReturn() const noexcept;
		/*! Sets the value of the variable 'readyReturn' that is defined in the default interface scope. */
		void setReadyReturn(bool readyReturn) noexcept;
		/*! Gets the value of the variable 'fst_1_Error' that is defined in the default interface scope. */
		bool getFst_1_Error() const noexcept;
		/*! Sets the value of the variable 'fst_1_Error' that is defined in the default interface scope. */
		void setFst_1_Error(bool fst_1_Error) noexcept;
		/*! Gets the value of the variable 'fst_2_Error' that is defined in the default interface scope. */
		bool getFst_2_Error() const noexcept;
		/*! Sets the value of the variable 'fst_2_Error' that is defined in the default interface scope. */
		void setFst_2_Error(bool fst_2_Error) noexcept;
		/*! Gets the value of the variable 'firstTimeOperational' that is defined in the default interface scope. */
		bool getFirstTimeOperational() const noexcept;
		/*! Sets the value of the variable 'firstTimeOperational' that is defined in the default interface scope. */
		void setFirstTimeOperational(bool firstTimeOperational) noexcept;
		/*! Gets the value of the variable 'FST_1_HeartBeat' that is defined in the default interface scope. */
		bool getFST_1_HeartBeat() const noexcept;
		/*! Sets the value of the variable 'FST_1_HeartBeat' that is defined in the default interface scope. */
		void setFST_1_HeartBeat(bool FST_1_HeartBeat) noexcept;
		/*! Gets the value of the variable 'FST_2_HeartBeat' that is defined in the default interface scope. */
		bool getFST_2_HeartBeat() const noexcept;
		/*! Sets the value of the variable 'FST_2_HeartBeat' that is defined in the default interface scope. */
		void setFST_2_HeartBeat(bool FST_2_HeartBeat) noexcept;
		/*! Gets the value of the variable 'isEStop1High' that is defined in the default interface scope. */
		bool getIsEStop1High() const noexcept;
		/*! Sets the value of the variable 'isEStop1High' that is defined in the default interface scope. */
		void setIsEStop1High(bool isEStop1High) noexcept;
		/*! Gets the value of the variable 'isEStop2High' that is defined in the default interface scope. */
		bool getIsEStop2High() const noexcept;
		/*! Sets the value of the variable 'isEStop2High' that is defined in the default interface scope. */
		void setIsEStop2High(bool isEStop2High) noexcept;
		/*! Gets the value of the variable 'isBGR1Pressed' that is defined in the default interface scope. */
		bool getIsBGR1Pressed() const noexcept;
		/*! Sets the value of the variable 'isBGR1Pressed' that is defined in the default interface scope. */
		void setIsBGR1Pressed(bool isBGR1Pressed) noexcept;
		/*! Gets the value of the variable 'isBGR2Pressed' that is defined in the default interface scope. */
		bool getIsBGR2Pressed() const noexcept;
		/*! Sets the value of the variable 'isBGR2Pressed' that is defined in the default interface scope. */
		void setIsBGR2Pressed(bool isBGR2Pressed) noexcept;
		/*! Gets the value of the variable 'fst_1_is_distancing' that is defined in the default interface scope. */
		bool getFst_1_is_distancing() const noexcept;
		/*! Sets the value of the variable 'fst_1_is_distancing' that is defined in the default interface scope. */
		void setFst_1_is_distancing(bool fst_1_is_distancing) noexcept;
		/*! Gets the value of the variable 'FST_1_HM_Counter' that is defined in the default interface scope. */
		sc::integer getFST_1_HM_Counter() const noexcept;
		/*! Sets the value of the variable 'FST_1_HM_Counter' that is defined in the default interface scope. */
		void setFST_1_HM_Counter(sc::integer FST_1_HM_Counter) noexcept;
		/*! Gets the value of the variable 'AReferenceMinCount' that is defined in the default interface scope. */
		sc::integer getAReferenceMinCount() const noexcept;
		/*! Sets the value of the variable 'AReferenceMinCount' that is defined in the default interface scope. */
		void setAReferenceMinCount(sc::integer AReferenceMinCount) noexcept;
		/*! Gets the value of the variable 'AReferenceMaxCount' that is defined in the default interface scope. */
		sc::integer getAReferenceMaxCount() const noexcept;
		/*! Sets the value of the variable 'AReferenceMaxCount' that is defined in the default interface scope. */
		void setAReferenceMaxCount(sc::integer AReferenceMaxCount) noexcept;
		/*! Gets the value of the variable 'BReferenceMinCount' that is defined in the default interface scope. */
		sc::integer getBReferenceMinCount() const noexcept;
		/*! Sets the value of the variable 'BReferenceMinCount' that is defined in the default interface scope. */
		void setBReferenceMinCount(sc::integer BReferenceMinCount) noexcept;
		/*! Gets the value of the variable 'BReferenceMaxCount' that is defined in the default interface scope. */
		sc::integer getBReferenceMaxCount() const noexcept;
		/*! Sets the value of the variable 'BReferenceMaxCount' that is defined in the default interface scope. */
		void setBReferenceMaxCount(sc::integer BReferenceMaxCount) noexcept;
		/*! Gets the value of the variable 'CReferenceMinCount' that is defined in the default interface scope. */
		sc::integer getCReferenceMinCount() const noexcept;
		/*! Sets the value of the variable 'CReferenceMinCount' that is defined in the default interface scope. */
		void setCReferenceMinCount(sc::integer CReferenceMinCount) noexcept;
		/*! Gets the value of the variable 'CReferenceMaxCount' that is defined in the default interface scope. */
		sc::integer getCReferenceMaxCount() const noexcept;
		/*! Sets the value of the variable 'CReferenceMaxCount' that is defined in the default interface scope. */
		void setCReferenceMaxCount(sc::integer CReferenceMaxCount) noexcept;
		/*! Gets the value of the variable 'AReferenceHeight' that is defined in the default interface scope. */
		sc::integer getAReferenceHeight() const noexcept;
		/*! Sets the value of the variable 'AReferenceHeight' that is defined in the default interface scope. */
		void setAReferenceHeight(sc::integer AReferenceHeight) noexcept;
		/*! Gets the value of the variable 'BReferenceHeight' that is defined in the default interface scope. */
		sc::integer getBReferenceHeight() const noexcept;
		/*! Sets the value of the variable 'BReferenceHeight' that is defined in the default interface scope. */
		void setBReferenceHeight(sc::integer BReferenceHeight) noexcept;
		/*! Gets the value of the variable 'CReferenceHeight' that is defined in the default interface scope. */
		sc::integer getCReferenceHeight() const noexcept;
		/*! Sets the value of the variable 'CReferenceHeight' that is defined in the default interface scope. */
		void setCReferenceHeight(sc::integer CReferenceHeight) noexcept;
		/*! Gets the value of the variable 'HeightThreshhold' that is defined in the default interface scope. */
		sc::integer getHeightThreshhold() const noexcept;
		/*! Sets the value of the variable 'HeightThreshhold' that is defined in the default interface scope. */
		void setHeightThreshhold(sc::integer HeightThreshhold) noexcept;
		/*! Gets the value of the variable 'MaxSampleCount' that is defined in the default interface scope. */
		sc::integer getMaxSampleCount() const noexcept;
		/*! Sets the value of the variable 'MaxSampleCount' that is defined in the default interface scope. */
		void setMaxSampleCount(sc::integer MaxSampleCount) noexcept;
		/*! Gets the value of the variable 'FST_1_currentValue' that is defined in the default interface scope. */
		sc::integer getFST_1_currentValue() const noexcept;
		/*! Sets the value of the variable 'FST_1_currentValue' that is defined in the default interface scope. */
		void setFST_1_currentValue(sc::integer FST_1_currentValue) noexcept;
		/*! Gets the value of the variable 'FST_1_sampleCount' that is defined in the default interface scope. */
		sc::integer getFST_1_sampleCount() const noexcept;
		/*! Sets the value of the variable 'FST_1_sampleCount' that is defined in the default interface scope. */
		void setFST_1_sampleCount(sc::integer FST_1_sampleCount) noexcept;
		/*! Gets the value of the variable 'FST_1_generalCount' that is defined in the default interface scope. */
		sc::integer getFST_1_generalCount() const noexcept;
		/*! Sets the value of the variable 'FST_1_generalCount' that is defined in the default interface scope. */
		void setFST_1_generalCount(sc::integer FST_1_generalCount) noexcept;
		/*! Gets the value of the variable 'FST1RampFull' that is defined in the default interface scope. */
		bool getFST1RampFull() const noexcept;
		/*! Sets the value of the variable 'FST1RampFull' that is defined in the default interface scope. */
		void setFST1RampFull(bool FST1RampFull) noexcept;
		/*! Gets the value of the variable 'FST1isMetal' that is defined in the default interface scope. */
		bool getFST1isMetal() const noexcept;
		/*! Sets the value of the variable 'FST1isMetal' that is defined in the default interface scope. */
		void setFST1isMetal(bool FST1isMetal) noexcept;
		/*! Gets the value of the variable 'FST_1_isEjector' that is defined in the default interface scope. */
		bool getFST_1_isEjector() const noexcept;
		/*! Sets the value of the variable 'FST_1_isEjector' that is defined in the default interface scope. */
		void setFST_1_isEjector(bool FST_1_isEjector) noexcept;
		/*! Gets the value of the variable 'FST_1_Sorting_Counter' that is defined in the default interface scope. */
		sc::integer getFST_1_Sorting_Counter() const noexcept;
		/*! Sets the value of the variable 'FST_1_Sorting_Counter' that is defined in the default interface scope. */
		void setFST_1_Sorting_Counter(sc::integer FST_1_Sorting_Counter) noexcept;
		/*! Gets the value of the variable 'FST_1_Egress_Counter' that is defined in the default interface scope. */
		sc::integer getFST_1_Egress_Counter() const noexcept;
		/*! Sets the value of the variable 'FST_1_Egress_Counter' that is defined in the default interface scope. */
		void setFST_1_Egress_Counter(sc::integer FST_1_Egress_Counter) noexcept;
		/*! Gets the value of the variable 'lbf_1_isOpen' that is defined in the default interface scope. */
		bool getLbf_1_isOpen() const noexcept;
		/*! Sets the value of the variable 'lbf_1_isOpen' that is defined in the default interface scope. */
		void setLbf_1_isOpen(bool lbf_1_isOpen) noexcept;
		/*! Gets the value of the variable 'lbf_1_isOpenCopy' that is defined in the default interface scope. */
		bool getLbf_1_isOpenCopy() const noexcept;
		/*! Sets the value of the variable 'lbf_1_isOpenCopy' that is defined in the default interface scope. */
		void setLbf_1_isOpenCopy(bool lbf_1_isOpenCopy) noexcept;
		/*! Gets the value of the variable 'hs_1_isOpen' that is defined in the default interface scope. */
		bool getHs_1_isOpen() const noexcept;
		/*! Sets the value of the variable 'hs_1_isOpen' that is defined in the default interface scope. */
		void setHs_1_isOpen(bool hs_1_isOpen) noexcept;
		/*! Gets the value of the variable 'hs_1_isOpenCopy' that is defined in the default interface scope. */
		bool getHs_1_isOpenCopy() const noexcept;
		/*! Sets the value of the variable 'hs_1_isOpenCopy' that is defined in the default interface scope. */
		void setHs_1_isOpenCopy(bool hs_1_isOpenCopy) noexcept;
		/*! Gets the value of the variable 'lbm_1_isOpen' that is defined in the default interface scope. */
		bool getLbm_1_isOpen() const noexcept;
		/*! Sets the value of the variable 'lbm_1_isOpen' that is defined in the default interface scope. */
		void setLbm_1_isOpen(bool lbm_1_isOpen) noexcept;
		/*! Gets the value of the variable 'lbm_1_isOpenCopy' that is defined in the default interface scope. */
		bool getLbm_1_isOpenCopy() const noexcept;
		/*! Sets the value of the variable 'lbm_1_isOpenCopy' that is defined in the default interface scope. */
		void setLbm_1_isOpenCopy(bool lbm_1_isOpenCopy) noexcept;
		/*! Gets the value of the variable 'lbe_1_isOpen' that is defined in the default interface scope. */
		bool getLbe_1_isOpen() const noexcept;
		/*! Sets the value of the variable 'lbe_1_isOpen' that is defined in the default interface scope. */
		void setLbe_1_isOpen(bool lbe_1_isOpen) noexcept;
		/*! Gets the value of the variable 'lbe_1_isOpenCopy' that is defined in the default interface scope. */
		bool getLbe_1_isOpenCopy() const noexcept;
		/*! Sets the value of the variable 'lbe_1_isOpenCopy' that is defined in the default interface scope. */
		void setLbe_1_isOpenCopy(bool lbe_1_isOpenCopy) noexcept;
		/*! Gets the value of the variable 'lbr_1_isOpen' that is defined in the default interface scope. */
		bool getLbr_1_isOpen() const noexcept;
		/*! Sets the value of the variable 'lbr_1_isOpen' that is defined in the default interface scope. */
		void setLbr_1_isOpen(bool lbr_1_isOpen) noexcept;
		/*! Gets the value of the variable 'lbr_1_isOpenCopy' that is defined in the default interface scope. */
		bool getLbr_1_isOpenCopy() const noexcept;
		/*! Sets the value of the variable 'lbr_1_isOpenCopy' that is defined in the default interface scope. */
		void setLbr_1_isOpenCopy(bool lbr_1_isOpenCopy) noexcept;
		/*! Gets the value of the variable 'motor1Stop' that is defined in the default interface scope. */
		sc::integer getMotor1Stop() const noexcept;
		/*! Sets the value of the variable 'motor1Stop' that is defined in the default interface scope. */
		void setMotor1Stop(sc::integer motor1Stop) noexcept;
		/*! Gets the value of the variable 'motor1Slow' that is defined in the default interface scope. */
		sc::integer getMotor1Slow() const noexcept;
		/*! Sets the value of the variable 'motor1Slow' that is defined in the default interface scope. */
		void setMotor1Slow(sc::integer motor1Slow) noexcept;
		/*! Gets the value of the variable 'motor1Forward' that is defined in the default interface scope. */
		sc::integer getMotor1Forward() const noexcept;
		/*! Sets the value of the variable 'motor1Forward' that is defined in the default interface scope. */
		void setMotor1Forward(sc::integer motor1Forward) noexcept;
		/*! Gets the value of the variable 'fst1_Puk_in_Ingress' that is defined in the default interface scope. */
		bool getFst1_Puk_in_Ingress() const noexcept;
		/*! Sets the value of the variable 'fst1_Puk_in_Ingress' that is defined in the default interface scope. */
		void setFst1_Puk_in_Ingress(bool fst1_Puk_in_Ingress) noexcept;
		/*! Gets the value of the variable 'fst_2_ready' that is defined in the default interface scope. */
		bool getFst_2_ready() const noexcept;
		/*! Sets the value of the variable 'fst_2_ready' that is defined in the default interface scope. */
		void setFst_2_ready(bool fst_2_ready) noexcept;
		/*! Gets the value of the variable 'FST_2_currentValue' that is defined in the default interface scope. */
		sc::integer getFST_2_currentValue() const noexcept;
		/*! Sets the value of the variable 'FST_2_currentValue' that is defined in the default interface scope. */
		void setFST_2_currentValue(sc::integer FST_2_currentValue) noexcept;
		/*! Gets the value of the variable 'FST_2_sampleCount' that is defined in the default interface scope. */
		sc::integer getFST_2_sampleCount() const noexcept;
		/*! Sets the value of the variable 'FST_2_sampleCount' that is defined in the default interface scope. */
		void setFST_2_sampleCount(sc::integer FST_2_sampleCount) noexcept;
		/*! Gets the value of the variable 'FST_2_generalCount' that is defined in the default interface scope. */
		sc::integer getFST_2_generalCount() const noexcept;
		/*! Sets the value of the variable 'FST_2_generalCount' that is defined in the default interface scope. */
		void setFST_2_generalCount(sc::integer FST_2_generalCount) noexcept;
		/*! Gets the value of the variable 'FST2RampFull' that is defined in the default interface scope. */
		bool getFST2RampFull() const noexcept;
		/*! Sets the value of the variable 'FST2RampFull' that is defined in the default interface scope. */
		void setFST2RampFull(bool FST2RampFull) noexcept;
		/*! Gets the value of the variable 'FST2isMetal' that is defined in the default interface scope. */
		bool getFST2isMetal() const noexcept;
		/*! Sets the value of the variable 'FST2isMetal' that is defined in the default interface scope. */
		void setFST2isMetal(bool FST2isMetal) noexcept;
		/*! Gets the value of the variable 'FST_2_isEjector' that is defined in the default interface scope. */
		bool getFST_2_isEjector() const noexcept;
		/*! Sets the value of the variable 'FST_2_isEjector' that is defined in the default interface scope. */
		void setFST_2_isEjector(bool FST_2_isEjector) noexcept;
		/*! Gets the value of the variable 'lbf_2_isOpen' that is defined in the default interface scope. */
		bool getLbf_2_isOpen() const noexcept;
		/*! Sets the value of the variable 'lbf_2_isOpen' that is defined in the default interface scope. */
		void setLbf_2_isOpen(bool lbf_2_isOpen) noexcept;
		/*! Gets the value of the variable 'lbf_2_isOpenCopy' that is defined in the default interface scope. */
		bool getLbf_2_isOpenCopy() const noexcept;
		/*! Sets the value of the variable 'lbf_2_isOpenCopy' that is defined in the default interface scope. */
		void setLbf_2_isOpenCopy(bool lbf_2_isOpenCopy) noexcept;
		/*! Gets the value of the variable 'hs_2_isOpen' that is defined in the default interface scope. */
		bool getHs_2_isOpen() const noexcept;
		/*! Sets the value of the variable 'hs_2_isOpen' that is defined in the default interface scope. */
		void setHs_2_isOpen(bool hs_2_isOpen) noexcept;
		/*! Gets the value of the variable 'hs_2_isOpenCopy' that is defined in the default interface scope. */
		bool getHs_2_isOpenCopy() const noexcept;
		/*! Sets the value of the variable 'hs_2_isOpenCopy' that is defined in the default interface scope. */
		void setHs_2_isOpenCopy(bool hs_2_isOpenCopy) noexcept;
		/*! Gets the value of the variable 'lbm_2_isOpen' that is defined in the default interface scope. */
		bool getLbm_2_isOpen() const noexcept;
		/*! Sets the value of the variable 'lbm_2_isOpen' that is defined in the default interface scope. */
		void setLbm_2_isOpen(bool lbm_2_isOpen) noexcept;
		/*! Gets the value of the variable 'lbm_2_isOpenCopy' that is defined in the default interface scope. */
		bool getLbm_2_isOpenCopy() const noexcept;
		/*! Sets the value of the variable 'lbm_2_isOpenCopy' that is defined in the default interface scope. */
		void setLbm_2_isOpenCopy(bool lbm_2_isOpenCopy) noexcept;
		/*! Gets the value of the variable 'lbr_2_isOpen' that is defined in the default interface scope. */
		bool getLbr_2_isOpen() const noexcept;
		/*! Sets the value of the variable 'lbr_2_isOpen' that is defined in the default interface scope. */
		void setLbr_2_isOpen(bool lbr_2_isOpen) noexcept;
		/*! Gets the value of the variable 'lbr_2_isOpenCopy' that is defined in the default interface scope. */
		bool getLbr_2_isOpenCopy() const noexcept;
		/*! Sets the value of the variable 'lbr_2_isOpenCopy' that is defined in the default interface scope. */
		void setLbr_2_isOpenCopy(bool lbr_2_isOpenCopy) noexcept;
		/*! Gets the value of the variable 'lbe_2_isOpen' that is defined in the default interface scope. */
		bool getLbe_2_isOpen() const noexcept;
		/*! Sets the value of the variable 'lbe_2_isOpen' that is defined in the default interface scope. */
		void setLbe_2_isOpen(bool lbe_2_isOpen) noexcept;
		/*! Gets the value of the variable 'lbe_2_isOpenCopy' that is defined in the default interface scope. */
		bool getLbe_2_isOpenCopy() const noexcept;
		/*! Sets the value of the variable 'lbe_2_isOpenCopy' that is defined in the default interface scope. */
		void setLbe_2_isOpenCopy(bool lbe_2_isOpenCopy) noexcept;
		/*! Gets the value of the variable 'motor2Stop' that is defined in the default interface scope. */
		sc::integer getMotor2Stop() const noexcept;
		/*! Sets the value of the variable 'motor2Stop' that is defined in the default interface scope. */
		void setMotor2Stop(sc::integer motor2Stop) noexcept;
		/*! Gets the value of the variable 'motor2Slow' that is defined in the default interface scope. */
		sc::integer getMotor2Slow() const noexcept;
		/*! Sets the value of the variable 'motor2Slow' that is defined in the default interface scope. */
		void setMotor2Slow(sc::integer motor2Slow) noexcept;
		/*! Gets the value of the variable 'motor2Forward' that is defined in the default interface scope. */
		sc::integer getMotor2Forward() const noexcept;
		/*! Sets the value of the variable 'motor2Forward' that is defined in the default interface scope. */
		void setMotor2Forward(sc::integer motor2Forward) noexcept;
		/*! Gets the value of the variable 'eStop_lamp_active' that is defined in the default interface scope. */
		bool getEStop_lamp_active() const noexcept;
		/*! Sets the value of the variable 'eStop_lamp_active' that is defined in the default interface scope. */
		void setEStop_lamp_active(bool eStop_lamp_active) noexcept;
		/*! Gets the value of the variable 'running_lamp_active' that is defined in the default interface scope. */
		bool getRunning_lamp_active() const noexcept;
		/*! Sets the value of the variable 'running_lamp_active' that is defined in the default interface scope. */
		void setRunning_lamp_active(bool running_lamp_active) noexcept;
		/*! Gets the value of the variable 'warning_lamp_active' that is defined in the default interface scope. */
		bool getWarning_lamp_active() const noexcept;
		/*! Sets the value of the variable 'warning_lamp_active' that is defined in the default interface scope. */
		void setWarning_lamp_active(bool warning_lamp_active) noexcept;
		
		/*! Can be used by the client code to trigger a run to completion step without raising an event. */
		void triggerWithoutEvent() override;
		
		/*
		 * Functions inherited from StatemachineInterface
		 */
		 void enter() override;
		
		 void exit() override;
		
		/*!
		 * Checks if the state machine is active (until 2.4.1 this method was used for states).
		 * A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		 */
		 bool isActive() const noexcept override;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		 bool isFinal() const noexcept override;
		
		/*! 
		 * Checks if member of the state machine must be set. For example an operation callback.
		 */
		bool check() const noexcept;
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		bool isStateActive(State state) const noexcept;
		
		
		
	protected:
		
		
		std::deque<EventInstance*> incomingEventQueue;
		
		std::deque<EventInstance*> internalEventQueue;
		
		EventInstance* getNextEvent() noexcept;
		
		bool dispatchEvent(EventInstance* event) noexcept;
		
		
		
	private:
		
		bool calibrated {false};
		bool eStopCalibratedReturn {false};
		bool serviceModeReturn {false};
		bool readyReturn {false};
		bool fst_1_Error {false};
		bool fst_2_Error {false};
		bool firstTimeOperational {false};
		bool FST_1_HeartBeat {false};
		bool FST_2_HeartBeat {false};
		bool isEStop1High {false};
		bool isEStop2High {false};
		bool isBGR1Pressed {false};
		bool isBGR2Pressed {false};
		bool fst_1_is_distancing {false};
		sc::integer FST_1_HM_Counter {0};
		sc::integer AReferenceMinCount {0};
		sc::integer AReferenceMaxCount {0};
		sc::integer BReferenceMinCount {0};
		sc::integer BReferenceMaxCount {0};
		sc::integer CReferenceMinCount {0};
		sc::integer CReferenceMaxCount {0};
		sc::integer AReferenceHeight {0};
		sc::integer BReferenceHeight {0};
		sc::integer CReferenceHeight {0};
		sc::integer HeightThreshhold {0};
		sc::integer MaxSampleCount {0};
		sc::integer FST_1_currentValue {0};
		sc::integer FST_1_sampleCount {0};
		sc::integer FST_1_generalCount {0};
		bool FST1RampFull {false};
		bool FST1isMetal {false};
		bool FST_1_isEjector {false};
		sc::integer FST_1_Sorting_Counter {0};
		sc::integer FST_1_Egress_Counter {0};
		bool lbf_1_isOpen {false};
		bool lbf_1_isOpenCopy {false};
		bool hs_1_isOpen {false};
		bool hs_1_isOpenCopy {false};
		bool lbm_1_isOpen {false};
		bool lbm_1_isOpenCopy {false};
		bool lbe_1_isOpen {false};
		bool lbe_1_isOpenCopy {false};
		bool lbr_1_isOpen {false};
		bool lbr_1_isOpenCopy {false};
		sc::integer motor1Stop {0};
		sc::integer motor1Slow {0};
		sc::integer motor1Forward {0};
		bool fst1_Puk_in_Ingress {false};
		bool fst_2_ready {false};
		sc::integer FST_2_currentValue {0};
		sc::integer FST_2_sampleCount {0};
		sc::integer FST_2_generalCount {0};
		bool FST2RampFull {false};
		bool FST2isMetal {false};
		bool FST_2_isEjector {false};
		bool lbf_2_isOpen {false};
		bool lbf_2_isOpenCopy {false};
		bool hs_2_isOpen {false};
		bool hs_2_isOpenCopy {false};
		bool lbm_2_isOpen {false};
		bool lbm_2_isOpenCopy {false};
		bool lbr_2_isOpen {false};
		bool lbr_2_isOpenCopy {false};
		bool lbe_2_isOpen {false};
		bool lbe_2_isOpenCopy {false};
		sc::integer motor2Stop {0};
		sc::integer motor2Slow {0};
		sc::integer motor2Forward {0};
		bool eStop_lamp_active {false};
		bool running_lamp_active {false};
		bool warning_lamp_active {false};
		
		
		
		
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc::ushort maxOrthogonalStates {20};
		//! dimension of the state configuration vector for history states
		static const sc::ushort maxHistoryStates {11};
		
		
		
		State stateConfVector[maxOrthogonalStates];
		
		State historyVector[maxHistoryStates];
		
		
		
		bool completed {false};
		bool doCompletion {false};
		bool isExecuting {false};
		sc::integer stateConfVectorPosition {0};
		
		
		
		// prototypes of all internal functions
		
		void enact_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Idle();
		void enact_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement__final_();
		void enact_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EjectingDiverter();
		void enact_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_TransferEjector();
		void enact_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_TransferDivider();
		void enact_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EjectingEjector();
		void enact_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EvaluateCounter();
		void enact_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward();
		void enact_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow();
		void enact_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop();
		void enact_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Idle();
		void enact_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement__final_();
		void enact_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward();
		void enact_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow();
		void enact_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop();
		void enact_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_SortingUnknownPuk();
		void enact_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinIngressRestart();
		void enact_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_EgressMissingPuk();
		void enact_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_HMUnknownPuk();
		void enact_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_IngressUnkownPuk();
		void enact_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_RampFullUnknownPuk();
		void enact_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_IngressMissingPuk();
		void enact_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_EgressUnknownPuk();
		void enact_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_RampFullMissingPuk();
		void enact_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_SortingMissingPuk();
		void enact_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_HMMissingPuk();
		void enact_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_Evaluate();
		void enact_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EjectingDiverter();
		void enact_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_TransferEjector();
		void enact_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_TransferDivider();
		void enact_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EjectingEjector();
		void enact_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EvaluateCounter();
		void enact_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_OFF();
		void enact_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorMissingPuk();
		void enact_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorUnknownPuk();
		void enact_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorUnknownPukAcknowledged();
		void enact_Festo1__FSM_LAMP_RED_EStop();
		void enact_Festo1__FSM_LAMP_RED_HeartbeatFailed();
		void enact_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_OFF();
		void enact_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_ServiceMode();
		void enact_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_Distancing();
		void enact_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_operational();
		void enact_Festo1__FSM_LAMP_GREEN_EStop();
		void enact_Festo1__FSM_LAMP_GREEN_HeartBeatFailed();
		void enact_Festo1__FSM_LAMP_GREEN_Error();
		void enact_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_OFF();
		void enact_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_ServiceMode();
		void enact_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_Distancing();
		void enact_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_Operational();
		void enact_Festo2__FSM_LAMP_GREEN_EStop();
		void enact_Festo2__FSM_LAMP_GREEN_Error();
		void enact_Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY_FSM_Festo1__Inner_LampYellow_OFF();
		void enact_Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY_FSM_Festo1__Inner_LampYellow_RampFull();
		void enact_Festo1__FSM_LAMP_YELLOW_EStop();
		void enact_Festo1__FSM_LAMP_YELLOW_HeartbeatFailed();
		void enact_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_OFF();
		void enact_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorMissingPuk();
		void enact_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorUnknownPuk();
		void enact_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorUnknownPukAcknowledged();
		void enact_Festo2__FSM_LAMP_RED_EStop();
		void enact_Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY_FSM_Festo2__Inner_LampYellow_OFF();
		void enact_Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY_FSM_Festo2__Inner_LampYellow_RampFull();
		void enact_Festo2__FSM_LAMP_YELLOW_EStop();
		void enact_FSM_SystemV2_FSM_System();
		void enact_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System();
		void enact_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_Ready();
		void enact_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_Operational();
		void enact_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_EStopReceived();
		void enact_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR2PressedAfterBGR1();
		void enact_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR1PressedAfterBGR2();
		void enact_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop__final_();
		void enact_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_SortingUnknownPuk();
		void enact_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinIngressRestart();
		void enact_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_EgressMissingPuk();
		void enact_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_HMUnknownPuk();
		void enact_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_IngressUnkownPuk();
		void enact_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_RampFullUnknownPuk();
		void enact_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_IngressMissingPuk();
		void enact_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_EgressUnknownPuk();
		void enact_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_RampFullMissingPuk();
		void enact_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_SortingMissingPuk();
		void enact_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_HMMissingPuk();
		void enseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_default();
		void enseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_default();
		void enseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress_Idle_default();
		void enseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress_PukPresent_default();
		void enseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress_CreatingDistance_default();
		void enseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_ErrorFST1_default();
		void enseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Stop_default();
		void enseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Start_default();
		void enseq_FSM_Festo1_Ingress_ESTOP__HEARTBEATFAILED_default();
		void enseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_default();
		void enseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_default();
		void enseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Idle_default();
		void enseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_default();
		void enseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_A_default();
		void enseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_B_default();
		void enseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_C_default();
		void enseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_Error_default();
		void enseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement__final__default();
		void enseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_PukExpected_default();
		void enseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_Start_default();
		void enseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_Stop_default();
		void enseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_ErrorFST1_default();
		void enseq_FSM_Festo1__HeightMeasurement_ESTOP__HEARTBEATFAILED_default();
		void enseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_default();
		void enseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_default();
		void enseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_Idle_default();
		void enseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_PukExpected_default();
		void enseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_Evaluate_default();
		void enseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EjectingDiverter_default();
		void enseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_TransferEjector_default();
		void enseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_TransferDivider_default();
		void enseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EjectingEjector_default();
		void enseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EvaluateCounter_default();
		void enseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Start_default();
		void enseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Stop_default();
		void enseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_ErrorFST1_default();
		void enseq_FSM_Festo1__Sorting_ESTOP__HEARTBEATFAILED_default();
		void enseq_FSM_Festo1__Egress_FSM_Festo1__Egress_default();
		void enseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_default();
		void enseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_Waiting_default();
		void enseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_Transfer_default();
		void enseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_PukExpected_default();
		void enseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_IDLE_default();
		void enseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_FST1Error_default();
		void enseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Stop_default();
		void enseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Start_default();
		void enseq_FSM_Festo1__Egress_ESTOP__HEARTBEATFAILED_default();
		void enseq_FSM_QualityGate__Motor_SystemMotor_default();
		void enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_default();
		void enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_default();
		void enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_default();
		void enseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_default();
		void enseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_default();
		void enseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress_Idle_default();
		void enseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress_PukExpected_default();
		void enseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress_PukinLBF2_default();
		void enseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Stop_default();
		void enseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Start_default();
		void enseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_ErrorFST2_default();
		void enseq_FSM_Festo2__Ingress_ESTOP__HEARTBEATFAILED_default();
		void enseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_default();
		void enseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_default();
		void enseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Idle_default();
		void enseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_PukExpected_default();
		void enseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_default();
		void enseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_A_default();
		void enseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_B_default();
		void enseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_C_default();
		void enseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_Error_default();
		void enseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement__final__default();
		void enseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_Start_default();
		void enseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_Stop_default();
		void enseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_FST2Error_default();
		void enseq_FSM_Festo2__HeightMeasurement_ESTOP__HEARTBEATFAILED_default();
		void enseq_FSM_Festo2__Egress_FSM_Festo2__Egress_default();
		void enseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_default();
		void enseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress_IDLE_default();
		void enseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress_Transfer_default();
		void enseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress_PukExpected_default();
		void enseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Start_default();
		void enseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Stop_default();
		void enseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_ErrorFST2_default();
		void enseq_FSM_Festo2__Egress_ESTOP__HEARTBEATFAILED_default();
		void enseq_FSM_Festo2__Motor_SystemMotor_default();
		void enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward_default();
		void enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow_default();
		void enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop_default();
		void enseq_Evaluate_EvaluateTester_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinHMRestart_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_SortingUnknownPuk_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinIngressRestart_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_SortingUnkwonPukAcknowledged_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_Idle_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinSortingRestart_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_EgressUnknownPukAcknowledged_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_EgressMissingPuk_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_HMUnknownPukAcknowledged_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_HMUnknownPuk_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_IngressUnkownPuk_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinEgressRestart_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_RampFullUnknownPuk_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_RampFullUnknownPukAcknowledged_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinRampRestart_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_IngressMissingPuk_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_EgressUnknownPuk_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_RampFullMissingPuk_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_SortingMissingPuk_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_IngressUnkownPukAcknowledged_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_HMMissingPuk_default();
		void enseq_FSM_Festo1__Errors_EStop_default();
		void enseq_FSM_Festo1__Errors_Start_default();
		void enseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_default();
		void enseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_default();
		void enseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_Idle_default();
		void enseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_PukExpected_default();
		void enseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_Evaluate_default();
		void enseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EjectingDiverter_default();
		void enseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_TransferEjector_default();
		void enseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_TransferDivider_default();
		void enseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EjectingEjector_default();
		void enseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EvaluateCounter_default();
		void enseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_AwaitingRampClearanceDivider_default();
		void enseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_AwaitingRampClearanceEjector_default();
		void enseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Stop_default();
		void enseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Start_default();
		void enseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_ErrorFST2_default();
		void enseq_FSM_Festo2__Sorting_ESTOP__HEARTBEATFAILED_default();
		void enseq_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_default();
		void enseq_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_OFF_default();
		void enseq_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorMissingPuk_default();
		void enseq_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorUnknownPuk_default();
		void enseq_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorUnknownPukAcknowledged_default();
		void enseq_Festo1__FSM_LAMP_RED_EStop_default();
		void enseq_Festo1__FSM_LAMP_RED_HeartbeatFailed_default();
		void enseq_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_default();
		void enseq_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_OFF_default();
		void enseq_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_ServiceMode_default();
		void enseq_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_Distancing_default();
		void enseq_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_operational_default();
		void enseq_Festo1__FSM_LAMP_GREEN_EStop_default();
		void enseq_Festo1__FSM_LAMP_GREEN_HeartBeatFailed_default();
		void enseq_Festo1__FSM_LAMP_GREEN_Error_default();
		void enseq_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_default();
		void enseq_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_OFF_default();
		void enseq_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_ServiceMode_default();
		void enseq_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_Distancing_default();
		void enseq_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_Operational_default();
		void enseq_Festo2__FSM_LAMP_GREEN_EStop_default();
		void enseq_Festo2__FSM_LAMP_GREEN_Error_default();
		void enseq_Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY_default();
		void enseq_Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY_FSM_Festo1__Inner_LampYellow_OFF_default();
		void enseq_Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY_FSM_Festo1__Inner_LampYellow_RampFull_default();
		void enseq_Festo1__FSM_LAMP_YELLOW_EStop_default();
		void enseq_Festo1__FSM_LAMP_YELLOW_HeartbeatFailed_default();
		void enseq_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_default();
		void enseq_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_OFF_default();
		void enseq_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorMissingPuk_default();
		void enseq_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorUnknownPuk_default();
		void enseq_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorUnknownPukAcknowledged_default();
		void enseq_Festo2__FSM_LAMP_RED_EStop_default();
		void enseq_Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY_default();
		void enseq_Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY_FSM_Festo2__Inner_LampYellow_OFF_default();
		void enseq_Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY_FSM_Festo2__Inner_LampYellow_RampFull_default();
		void enseq_Festo2__FSM_LAMP_YELLOW_EStop_default();
		void enseq_FSM_SystemV2_HeartBeatFailed_default();
		void enseq_FSM_SystemV2_FSM_System_default();
		void enseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_default();
		void enseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_Ready_default();
		void enseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_ServiceMode_default();
		void enseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_Operational_default();
		void enseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_Error_default();
		void enseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_default();
		void enseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_EStopReceived_default();
		void enseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_EStopCleared_default();
		void enseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR1Pressed_default();
		void enseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR2Pressed_default();
		void enseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR2PressedAfterBGR1_default();
		void enseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR1PressedAfterBGR2_default();
		void enseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStopCalibration_default();
		void enseq_Festo2__Errors_FSM_Errors_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinHMRestart_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_SortingUnknownPuk_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinIngressRestart_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_SortingUnkwonPukAcknowledged_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_Idle_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinSortingRestart_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_EgressUnknownPukAcknowledged_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_EgressMissingPuk_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_HMUnknownPukAcknowledged_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_HMUnknownPuk_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_IngressUnkownPuk_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinEgressRestart_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_RampFullUnknownPuk_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_RampFullUnknownPukAcknowledged_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinRampRestart_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_IngressMissingPuk_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_EgressUnknownPuk_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_RampFullMissingPuk_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_SortingMissingPuk_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_IngressUnkownPukAcknowledged_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_HMMissingPuk_default();
		void enseq_Festo2__Errors_EStop_default();
		void enseq_Festo2__Errors_Start_default();
		void enseq_FSM_Festo1_Ingress_default();
		void enseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_default();
		void enseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress_default();
		void shenseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress();
		void enseq_FSM_Festo1__HeightMeasurement_default();
		void enseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_default();
		void enseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_default();
		void dhenseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement();
		void enseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_default();
		void dhenseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement();
		void enseq_FSM_Festo1__Sorting_default();
		void enseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_default();
		void enseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_default();
		void shenseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting();
		void enseq_FSM_Festo1__Egress_default();
		void enseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_default();
		void enseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_default();
		void shenseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress();
		void enseq_FSM_QualityGate__Motor_default();
		void enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_default();
		void enseq_FSM_Festo2__Ingress_default();
		void enseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_default();
		void enseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress_default();
		void shenseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress();
		void enseq_FSM_Festo2__HeightMeasurement_default();
		void enseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_default();
		void enseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_default();
		void shenseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement();
		void enseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_default();
		void enseq_FSM_Festo2__Egress_default();
		void enseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_default();
		void enseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress_default();
		void shenseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress();
		void enseq_FSM_Festo2__Motor_default();
		void enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_default();
		void enseq_Evaluate_default();
		void enseq_FSM_Festo1__Errors_default();
		void enseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_default();
		void enseq_FSM_Festo2__Sorting_default();
		void enseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_default();
		void enseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_default();
		void shenseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting();
		void enseq_Festo1__FSM_LAMP_RED_default();
		void enseq_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_default();
		void enseq_Festo1__FSM_LAMP_GREEN_default();
		void enseq_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_default();
		void shenseq_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen();
		void enseq_Festo2__FSM_LAMP_GREEN_default();
		void enseq_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_default();
		void shenseq_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen();
		void enseq_Festo1__FSM_LAMP_YELLOW_default();
		void enseq_Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY_FSM_Festo1__Inner_LampYellow_default();
		void enseq_Festo2__FSM_LAMP_RED_default();
		void enseq_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_default();
		void enseq_Festo2__FSM_LAMP_YELLOW_default();
		void enseq_Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY_FSM_Festo2__Inner_LampYellow_default();
		void enseq_FSM_SystemV2_default();
		void enseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_default();
		void enseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_default();
		void enseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_default();
		void enseq_Festo2__Errors_default();
		void enseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_default();
		void exseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress();
		void exseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress();
		void exseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress_Idle();
		void exseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress_PukPresent();
		void exseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress_CreatingDistance();
		void exseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_ErrorFST1();
		void exseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Stop();
		void exseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Start();
		void exseq_FSM_Festo1_Ingress_ESTOP__HEARTBEATFAILED();
		void exseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement();
		void exseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement();
		void exseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Idle();
		void exseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring();
		void exseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_A();
		void exseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_B();
		void exseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_C();
		void exseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_Error();
		void exseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement__final_();
		void exseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_PukExpected();
		void exseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_Start();
		void exseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_Stop();
		void exseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_ErrorFST1();
		void exseq_FSM_Festo1__HeightMeasurement_ESTOP__HEARTBEATFAILED();
		void exseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting();
		void exseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting();
		void exseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_Idle();
		void exseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_PukExpected();
		void exseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_Evaluate();
		void exseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EjectingDiverter();
		void exseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_TransferEjector();
		void exseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_TransferDivider();
		void exseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EjectingEjector();
		void exseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EvaluateCounter();
		void exseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Start();
		void exseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Stop();
		void exseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_ErrorFST1();
		void exseq_FSM_Festo1__Sorting_ESTOP__HEARTBEATFAILED();
		void exseq_FSM_Festo1__Egress_FSM_Festo1__Egress();
		void exseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress();
		void exseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_Waiting();
		void exseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_Transfer();
		void exseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_PukExpected();
		void exseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_IDLE();
		void exseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_FST1Error();
		void exseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Stop();
		void exseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Start();
		void exseq_FSM_Festo1__Egress_ESTOP__HEARTBEATFAILED();
		void exseq_FSM_QualityGate__Motor_SystemMotor();
		void exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward();
		void exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow();
		void exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop();
		void exseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress();
		void exseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress();
		void exseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress_Idle();
		void exseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress_PukExpected();
		void exseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress_PukinLBF2();
		void exseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Stop();
		void exseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Start();
		void exseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_ErrorFST2();
		void exseq_FSM_Festo2__Ingress_ESTOP__HEARTBEATFAILED();
		void exseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement();
		void exseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement();
		void exseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Idle();
		void exseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_PukExpected();
		void exseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring();
		void exseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_A();
		void exseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_B();
		void exseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_C();
		void exseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_Error();
		void exseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement__final_();
		void exseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_Start();
		void exseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_Stop();
		void exseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_FST2Error();
		void exseq_FSM_Festo2__HeightMeasurement_ESTOP__HEARTBEATFAILED();
		void exseq_FSM_Festo2__Egress_FSM_Festo2__Egress();
		void exseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress();
		void exseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress_IDLE();
		void exseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress_Transfer();
		void exseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress_PukExpected();
		void exseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Start();
		void exseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Stop();
		void exseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_ErrorFST2();
		void exseq_FSM_Festo2__Egress_ESTOP__HEARTBEATFAILED();
		void exseq_FSM_Festo2__Motor_SystemMotor();
		void exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward();
		void exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow();
		void exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop();
		void exseq_Evaluate_EvaluateTester();
		void exseq_FSM_Festo1__Errors_FSM_Errors();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinHMRestart();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_SortingUnknownPuk();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinIngressRestart();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_SortingUnkwonPukAcknowledged();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_Idle();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinSortingRestart();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_EgressUnknownPukAcknowledged();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_EgressMissingPuk();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_HMUnknownPukAcknowledged();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_HMUnknownPuk();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_IngressUnkownPuk();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinEgressRestart();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_RampFullUnknownPuk();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_RampFullUnknownPukAcknowledged();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinRampRestart();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_IngressMissingPuk();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_EgressUnknownPuk();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_RampFullMissingPuk();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_SortingMissingPuk();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_IngressUnkownPukAcknowledged();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_HMMissingPuk();
		void exseq_FSM_Festo1__Errors_EStop();
		void exseq_FSM_Festo1__Errors_Start();
		void exseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting();
		void exseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting();
		void exseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_Idle();
		void exseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_PukExpected();
		void exseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_Evaluate();
		void exseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EjectingDiverter();
		void exseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_TransferEjector();
		void exseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_TransferDivider();
		void exseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EjectingEjector();
		void exseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EvaluateCounter();
		void exseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_AwaitingRampClearanceDivider();
		void exseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_AwaitingRampClearanceEjector();
		void exseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Stop();
		void exseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Start();
		void exseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_ErrorFST2();
		void exseq_FSM_Festo2__Sorting_ESTOP__HEARTBEATFAILED();
		void exseq_Festo1__FSM_LAMP_RED_FSM_Festo1__LR();
		void exseq_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_OFF();
		void exseq_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorMissingPuk();
		void exseq_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorUnknownPuk();
		void exseq_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorUnknownPukAcknowledged();
		void exseq_Festo1__FSM_LAMP_RED_EStop();
		void exseq_Festo1__FSM_LAMP_RED_HeartbeatFailed();
		void exseq_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG();
		void exseq_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_OFF();
		void exseq_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_ServiceMode();
		void exseq_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_Distancing();
		void exseq_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_operational();
		void exseq_Festo1__FSM_LAMP_GREEN_EStop();
		void exseq_Festo1__FSM_LAMP_GREEN_HeartBeatFailed();
		void exseq_Festo1__FSM_LAMP_GREEN_Error();
		void exseq_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG();
		void exseq_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_OFF();
		void exseq_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_ServiceMode();
		void exseq_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_Distancing();
		void exseq_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_Operational();
		void exseq_Festo2__FSM_LAMP_GREEN_EStop();
		void exseq_Festo2__FSM_LAMP_GREEN_Error();
		void exseq_Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY();
		void exseq_Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY_FSM_Festo1__Inner_LampYellow_OFF();
		void exseq_Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY_FSM_Festo1__Inner_LampYellow_RampFull();
		void exseq_Festo1__FSM_LAMP_YELLOW_EStop();
		void exseq_Festo1__FSM_LAMP_YELLOW_HeartbeatFailed();
		void exseq_Festo2__FSM_LAMP_RED_FSM_Festo2__LR();
		void exseq_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_OFF();
		void exseq_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorMissingPuk();
		void exseq_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorUnknownPuk();
		void exseq_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorUnknownPukAcknowledged();
		void exseq_Festo2__FSM_LAMP_RED_EStop();
		void exseq_Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY();
		void exseq_Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY_FSM_Festo2__Inner_LampYellow_OFF();
		void exseq_Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY_FSM_Festo2__Inner_LampYellow_RampFull();
		void exseq_Festo2__FSM_LAMP_YELLOW_EStop();
		void exseq_FSM_SystemV2_HeartBeatFailed();
		void exseq_FSM_SystemV2_FSM_System();
		void exseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System();
		void exseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_Ready();
		void exseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_ServiceMode();
		void exseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_Operational();
		void exseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_Error();
		void exseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop();
		void exseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_EStopReceived();
		void exseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_EStopCleared();
		void exseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR1Pressed();
		void exseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR2Pressed();
		void exseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR2PressedAfterBGR1();
		void exseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR1PressedAfterBGR2();
		void exseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop__final_();
		void exseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStopCalibration();
		void exseq_Festo2__Errors_FSM_Errors();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinHMRestart();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_SortingUnknownPuk();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinIngressRestart();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_SortingUnkwonPukAcknowledged();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_Idle();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinSortingRestart();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_EgressUnknownPukAcknowledged();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_EgressMissingPuk();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_HMUnknownPukAcknowledged();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_HMUnknownPuk();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_IngressUnkownPuk();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinEgressRestart();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_RampFullUnknownPuk();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_RampFullUnknownPukAcknowledged();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinRampRestart();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_IngressMissingPuk();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_EgressUnknownPuk();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_RampFullMissingPuk();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_SortingMissingPuk();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_IngressUnkownPukAcknowledged();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_HMMissingPuk();
		void exseq_Festo2__Errors_EStop();
		void exseq_Festo2__Errors_Start();
		void exseq_FSM_Festo1_Ingress();
		void exseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress();
		void exseq_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress();
		void exseq_FSM_Festo1__HeightMeasurement();
		void exseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement();
		void exseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement();
		void exseq_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement();
		void exseq_FSM_Festo1__Sorting();
		void exseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting();
		void exseq_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting();
		void exseq_FSM_Festo1__Egress();
		void exseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress();
		void exseq_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress();
		void exseq_FSM_QualityGate__Motor();
		void exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor();
		void exseq_FSM_Festo2__Ingress();
		void exseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress();
		void exseq_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress();
		void exseq_FSM_Festo2__HeightMeasurement();
		void exseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement();
		void exseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement();
		void exseq_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement();
		void exseq_FSM_Festo2__Egress();
		void exseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress();
		void exseq_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress();
		void exseq_FSM_Festo2__Motor();
		void exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor();
		void exseq_Evaluate();
		void exseq_FSM_Festo1__Errors();
		void exseq_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors();
		void exseq_FSM_Festo2__Sorting();
		void exseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting();
		void exseq_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting();
		void exseq_Festo1__FSM_LAMP_RED();
		void exseq_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed();
		void exseq_Festo1__FSM_LAMP_GREEN();
		void exseq_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen();
		void exseq_Festo2__FSM_LAMP_GREEN();
		void exseq_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen();
		void exseq_Festo1__FSM_LAMP_YELLOW();
		void exseq_Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY_FSM_Festo1__Inner_LampYellow();
		void exseq_Festo2__FSM_LAMP_RED();
		void exseq_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed();
		void exseq_Festo2__FSM_LAMP_YELLOW();
		void exseq_Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY_FSM_Festo2__Inner_LampYellow();
		void exseq_FSM_SystemV2();
		void exseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM();
		void exseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM();
		void exseq_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop();
		void exseq_Festo2__Errors();
		void exseq_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors();
		void react_FSM_Festo1_Ingress__entry_Default();
		void react_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress__entry_Default();
		void react_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress_History();
		void react_FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress__entry_Default();
		void react_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement__entry_Default();
		void react_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement__entry_Default();
		void react_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement__entry_Default();
		void react_FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_History();
		void react_FSM_Festo1__HeightMeasurement__entry_Default();
		void react_FSM_Festo1__Sorting__entry_Default();
		void react_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_History();
		void react_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting__entry_Default();
		void react_FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting__entry_Default();
		void react_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress__entry_Default();
		void react_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_History();
		void react_FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress__entry_Default();
		void react_FSM_Festo1__Egress__entry_Default();
		void react_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor__entry_Default();
		void react_FSM_QualityGate__Motor__entry_Default();
		void react_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress__entry_Default();
		void react_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress_History();
		void react_FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress__entry_Default();
		void react_FSM_Festo2__Ingress__entry_Default();
		void react_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement__entry_Default();
		void react_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_History();
		void react_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement__entry_Default();
		void react_FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement__entry_Default();
		void react_FSM_Festo2__HeightMeasurement__entry_Default();
		void react_FSM_Festo2__Egress__entry_Default();
		void react_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress__entry_Default();
		void react_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress_History();
		void react_FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress__entry_Default();
		void react_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor__entry_Default();
		void react_FSM_Festo2__Motor__entry_Default();
		void react_Evaluate__entry_Default();
		void react_FSM_Festo1__Errors__entry_Default();
		void react_FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors__entry_Default();
		void react_FSM_Festo2__Sorting__entry_Default();
		void react_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting__entry_Default();
		void react_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_History();
		void react_FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting__entry_Default();
		void react_Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed__entry_Default();
		void react_Festo1__FSM_LAMP_RED__entry_Default();
		void react_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen__entry_Default();
		void react_Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_History();
		void react_Festo1__FSM_LAMP_GREEN__entry_Default();
		void react_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen__entry_Default();
		void react_Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_History();
		void react_Festo2__FSM_LAMP_GREEN__entry_Default();
		void react_Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY_FSM_Festo1__Inner_LampYellow__entry_Default();
		void react_Festo1__FSM_LAMP_YELLOW__entry_Default();
		void react_Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed__entry_Default();
		void react_Festo2__FSM_LAMP_RED__entry_Default();
		void react_Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY_FSM_Festo2__Inner_LampYellow__entry_Default();
		void react_Festo2__FSM_LAMP_YELLOW__entry_Default();
		void react_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM__entry_Default();
		void react_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop__entry_Default();
		void react_FSM_SystemV2_FSM_System_FSM_System__Outer_FSM__entry_Default();
		void react_FSM_SystemV2__entry_Default();
		void react_Festo2__Errors__entry_Default();
		void react_Festo2__Errors_FSM_Errors_Festo2__Internal_Errors__entry_Default();
		sc::integer react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Ingress_FSM_Festo1__Ingress_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress_PukPresent_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Ingress_FSM_Festo1__Internal_Ingress_CreatingDistance_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_ErrorFST1_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Stop_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Ingress_FSM_Festo1__Ingress_FSM_Festo1__Outer_Ingress_Start_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Ingress_ESTOP__HEARTBEATFAILED_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_A_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_B_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_C_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement_Error_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_Measuring_FSM_Festo1__HeightMeasurement__final__react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_HeightMeasurement_FSM_Festo1__Internal_HeightMeasurement_PukExpected_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_Start_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_Stop_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__HeightMeasurement_FSM_Festo1__HeightMeasurement_FSM_Festo1__Outer_HeightMeasurement_ErrorFST1_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__HeightMeasurement_ESTOP__HEARTBEATFAILED_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_FSM_Festo1__Sorting_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_PukExpected_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_Evaluate_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EjectingDiverter_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_TransferEjector_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_TransferDivider_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EjectingEjector_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Sorting_FSM_Festo1__Internal_Sorting_EvaluateCounter_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Start_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_Stop_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_FSM_Festo1__Sorting_FSM_Festo1__Outer_Sorting_ErrorFST1_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_ESTOP__HEARTBEATFAILED_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_FSM_Festo1__Egress_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_Waiting_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_Transfer_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_PukExpected_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Egress_FSM_Festo1__Internal_Egress_IDLE_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_FST1Error_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Stop_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_FSM_Festo1__Egress_FSM_Festo1__Outer_Egress_Start_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_ESTOP__HEARTBEATFAILED_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Motor_SystemMotor_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Ingress_FSM_Festo2__Ingress_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress_PukExpected_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Ingress_FSM_Festo2__Internal_Ingress_PukinLBF2_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Stop_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_Start_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Ingress_FSM_Festo2__Ingress_FSM_Festo2__Outer_Ingress_ErrorFST2_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Ingress_ESTOP__HEARTBEATFAILED_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_PukExpected_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_A_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_B_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_C_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement_Error_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_HeightMeasurement_FSM_Festo2__Internal_HeightMeasurement_Measuring_FSM_Festo2__Outer_HeightMeasurement__final__react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_Start_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_Stop_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_FSM_Festo2__HeightMeasurement_FSM_Festo2__Outer_Heightmeasurement_FST2Error_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_ESTOP__HEARTBEATFAILED_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Egress_FSM_Festo2__Egress_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress_IDLE_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress_Transfer_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Egress_FSM_Festo2__Internal_Egress_PukExpected_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Start_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_Stop_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Egress_FSM_Festo2__Egress_FSM_FEsto2__Outer_Egress_ErrorFST2_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Egress_ESTOP__HEARTBEATFAILED_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Motor_SystemMotor_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop_react(const sc::integer transitioned_before);
		sc::integer Evaluate_EvaluateTester_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinHMRestart_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_SortingUnknownPuk_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinIngressRestart_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_SortingUnkwonPukAcknowledged_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinSortingRestart_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_EgressUnknownPukAcknowledged_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_EgressMissingPuk_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_HMUnknownPukAcknowledged_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_HMUnknownPuk_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_IngressUnkownPuk_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinEgressRestart_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_RampFullUnknownPuk_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_RampFullUnknownPukAcknowledged_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_ErrorinRampRestart_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_IngressMissingPuk_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_EgressUnknownPuk_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_RampFullMissingPuk_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_SortingMissingPuk_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_IngressUnkownPukAcknowledged_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_FSM_Errors_FSM_Festo1__Internal_Errors_HMMissingPuk_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_EStop_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Errors_Start_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_FSM_Festo2__Sorting_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_PukExpected_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_Evaluate_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EjectingDiverter_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_TransferEjector_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_TransferDivider_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EjectingEjector_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_EvaluateCounter_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_AwaitingRampClearanceDivider_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Sorting_FSM_Festo2__Internal_Sorting_AwaitingRampClearanceEjector_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Stop_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_Start_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_FSM_Festo2__Sorting_FSM_Festo2__Outer_Sorting_ErrorFST2_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_ESTOP__HEARTBEATFAILED_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_RED_FSM_Festo1__LR_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_OFF_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorMissingPuk_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorUnknownPuk_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_RED_FSM_Festo1__LR_FSM_Festo1__Inner_LampRed_ErrorUnknownPukAcknowledged_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_RED_EStop_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_RED_HeartbeatFailed_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_OFF_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_ServiceMode_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_Distancing_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_GREEN_FSM_Festo1__LG_FSM_Festo1__Inner_LampGreen_operational_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_GREEN_EStop_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_GREEN_HeartBeatFailed_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_GREEN_Error_react(const sc::integer transitioned_before);
		sc::integer Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_react(const sc::integer transitioned_before);
		sc::integer Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_OFF_react(const sc::integer transitioned_before);
		sc::integer Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_ServiceMode_react(const sc::integer transitioned_before);
		sc::integer Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_Distancing_react(const sc::integer transitioned_before);
		sc::integer Festo2__FSM_LAMP_GREEN_FSM_Festo2__LG_FSM_Festo2__Inner_LampGreen_Operational_react(const sc::integer transitioned_before);
		sc::integer Festo2__FSM_LAMP_GREEN_EStop_react(const sc::integer transitioned_before);
		sc::integer Festo2__FSM_LAMP_GREEN_Error_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY_FSM_Festo1__Inner_LampYellow_OFF_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_YELLOW_FSM_Festo1__LY_FSM_Festo1__Inner_LampYellow_RampFull_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_YELLOW_EStop_react(const sc::integer transitioned_before);
		sc::integer Festo1__FSM_LAMP_YELLOW_HeartbeatFailed_react(const sc::integer transitioned_before);
		sc::integer Festo2__FSM_LAMP_RED_FSM_Festo2__LR_react(const sc::integer transitioned_before);
		sc::integer Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_OFF_react(const sc::integer transitioned_before);
		sc::integer Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorMissingPuk_react(const sc::integer transitioned_before);
		sc::integer Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorUnknownPuk_react(const sc::integer transitioned_before);
		sc::integer Festo2__FSM_LAMP_RED_FSM_Festo2__LR_FSM_Festo2__Inner_LampRed_ErrorUnknownPukAcknowledged_react(const sc::integer transitioned_before);
		sc::integer Festo2__FSM_LAMP_RED_EStop_react(const sc::integer transitioned_before);
		sc::integer Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY_react(const sc::integer transitioned_before);
		sc::integer Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY_FSM_Festo2__Inner_LampYellow_OFF_react(const sc::integer transitioned_before);
		sc::integer Festo2__FSM_LAMP_YELLOW_FSM_Festo2__LY_FSM_Festo2__Inner_LampYellow_RampFull_react(const sc::integer transitioned_before);
		sc::integer Festo2__FSM_LAMP_YELLOW_EStop_react(const sc::integer transitioned_before);
		sc::integer FSM_SystemV2_HeartBeatFailed_react(const sc::integer transitioned_before);
		sc::integer FSM_SystemV2_FSM_System_react(const sc::integer transitioned_before);
		sc::integer FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_react(const sc::integer transitioned_before);
		sc::integer FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_Ready_react(const sc::integer transitioned_before);
		sc::integer FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_ServiceMode_react(const sc::integer transitioned_before);
		sc::integer FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_Operational_react(const sc::integer transitioned_before);
		sc::integer FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_Festo_FSM_System_FSM_System__Inner_FSM_Error_react(const sc::integer transitioned_before);
		sc::integer FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_react(const sc::integer transitioned_before);
		sc::integer FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_EStopReceived_react(const sc::integer transitioned_before);
		sc::integer FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_EStopCleared_react(const sc::integer transitioned_before);
		sc::integer FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR1Pressed_react(const sc::integer transitioned_before);
		sc::integer FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR2Pressed_react(const sc::integer transitioned_before);
		sc::integer FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR2PressedAfterBGR1_react(const sc::integer transitioned_before);
		sc::integer FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop_BGR1PressedAfterBGR2_react(const sc::integer transitioned_before);
		sc::integer FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStop_FSM_EStop__final__react(const sc::integer transitioned_before);
		sc::integer FSM_SystemV2_FSM_System_FSM_System__Outer_FSM_EStopCalibration_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinHMRestart_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_SortingUnknownPuk_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinIngressRestart_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_SortingUnkwonPukAcknowledged_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_Idle_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinSortingRestart_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_EgressUnknownPukAcknowledged_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_EgressMissingPuk_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_HMUnknownPukAcknowledged_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_HMUnknownPuk_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_IngressUnkownPuk_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinEgressRestart_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_RampFullUnknownPuk_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_RampFullUnknownPukAcknowledged_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_ErrorinRampRestart_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_IngressMissingPuk_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_EgressUnknownPuk_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_RampFullMissingPuk_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_SortingMissingPuk_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_IngressUnkownPukAcknowledged_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_FSM_Errors_Festo2__Internal_Errors_HMMissingPuk_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_EStop_react(const sc::integer transitioned_before);
		sc::integer Festo2__Errors_Start_react(const sc::integer transitioned_before);
		void clearInEvents() noexcept;
		void clearInternalEvents() noexcept;
		void microStep();
		void runCycle();
		
		
		
		/*! Indicates event 'HEARTBEAT_FAILED' of default interface scope is active. */
		bool HEARTBEAT_FAILED_raised {false};
		
		/*! Indicates event 'HEARTBEAT_RECONNECT' of default interface scope is active. */
		bool HEARTBEAT_RECONNECT_raised {false};
		
		/*! Indicates event 'FST_1_HEARTBEAT_RECONNECT' of default interface scope is active. */
		bool FST_1_HEARTBEAT_RECONNECT_raised {false};
		
		/*! Indicates event 'FST_2_HEARTBEAT_RECONNECT' of default interface scope is active. */
		bool FST_2_HEARTBEAT_RECONNECT_raised {false};
		
		/*! Indicates event 'SYSTEM_OPERATIONAL_IN' of default interface scope is active. */
		bool SYSTEM_OPERATIONAL_IN_raised {false};
		
		/*! Observable for event 'SYSTEM_OPERATIONAL_OUT' of default interface scope. */
		sc::rx::Observable<void> SYSTEM_OPERATIONAL_OUT_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'SYSTEM_SERVICE_IN' of default interface scope. */
		sc::rx::Observable<void> SYSTEM_SERVICE_IN_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'SYSTEM_SERVICE_OUT' of default interface scope. */
		sc::rx::Observable<void> SYSTEM_SERVICE_OUT_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'ESTOP_RECEIVED' of default interface scope. */
		sc::rx::Observable<void> ESTOP_RECEIVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'ESTOP_CLEARED' of default interface scope. */
		sc::rx::Observable<void> ESTOP_CLEARED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'EVALUATE' of default interface scope. */
		sc::rx::Observable<void> EVALUATE_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_IN_READY' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_IN_READY_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_IN_READY' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_IN_READY_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_IN_READY_CLEARED' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_IN_READY_CLEARED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_IN_READY_CLEARED' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_IN_READY_CLEARED_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'ESTOP_1_HIGH' of default interface scope is active. */
		bool ESTOP_1_HIGH_raised {false};
		
		/*! Indicates event 'ESTOP_1_LOW' of default interface scope is active. */
		bool ESTOP_1_LOW_raised {false};
		
		/*! Indicates event 'ESTOP_2_HIGH' of default interface scope is active. */
		bool ESTOP_2_HIGH_raised {false};
		
		/*! Indicates event 'ESTOP_2_LOW' of default interface scope is active. */
		bool ESTOP_2_LOW_raised {false};
		
		/*! Observable for event 'FST_1_POSITION_INGRESS_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_POSITION_INGRESS_NEW_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'FST_1_POSITION_INGRESS_DISTANCE_VALID' of default interface scope is active. */
		bool FST_1_POSITION_INGRESS_DISTANCE_VALID_raised {false};
		
		/*! Observable for event 'FST_1_POSITION_HEIGHTMEASUREMENT_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_POSITION_HEIGHTMEASUREMENT_NEW_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED' of default interface scope is active. */
		bool FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED_raised {false};
		
		/*! Indicates event 'FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED' of default interface scope is active. */
		bool FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED_raised {false};
		
		/*! Observable for event 'FST_1_POSITION_SORTING_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_POSITION_SORTING_NEW_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'FST_1_POSITION_SORTING_PUK_EXPECTED' of default interface scope is active. */
		bool FST_1_POSITION_SORTING_PUK_EXPECTED_raised {false};
		
		/*! Indicates event 'FST_1_POSITION_SORTING_PUK_EXPIRED' of default interface scope is active. */
		bool FST_1_POSITION_SORTING_PUK_EXPIRED_raised {false};
		
		/*! Indicates event 'FST_1_POSITION_DIVERTER_DISTANCE_VALID' of default interface scope is active. */
		bool FST_1_POSITION_DIVERTER_DISTANCE_VALID_raised {false};
		
		/*! Observable for event 'FST_1_POSITION_EGRESS_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_POSITION_EGRESS_NEW_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'FST_1_POSITION_EGRESS_PUK_EXPECTED' of default interface scope is active. */
		bool FST_1_POSITION_EGRESS_PUK_EXPECTED_raised {false};
		
		/*! Indicates event 'FST_1_POSITION_EGRESS_PUK_EXPIRED' of default interface scope is active. */
		bool FST_1_POSITION_EGRESS_PUK_EXPIRED_raised {false};
		
		/*! Observable for event 'FST_1_POSITION_INGRESS_PUK_REMOVED' of default interface scope. */
		sc::rx::Observable<void> FST_1_POSITION_INGRESS_PUK_REMOVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_POSITION_HEIGHTMEASUREMENT_PUK_REMOVED' of default interface scope. */
		sc::rx::Observable<void> FST_1_POSITION_HEIGHTMEASUREMENT_PUK_REMOVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_POSITION_SORTING_PUK_REMOVED' of default interface scope. */
		sc::rx::Observable<void> FST_1_POSITION_SORTING_PUK_REMOVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_POSITION_EGRESS_PUK_REMOVED' of default interface scope. */
		sc::rx::Observable<void> FST_1_POSITION_EGRESS_PUK_REMOVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_POSITION_INGRESS_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_POSITION_INGRESS_NEW_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'FST_2_POSITION_INGRESS_DISTANCE_VALID' of default interface scope is active. */
		bool FST_2_POSITION_INGRESS_DISTANCE_VALID_raised {false};
		
		/*! Indicates event 'FST_2_POSITION_INGRESS_PUK_EXPECTED' of default interface scope is active. */
		bool FST_2_POSITION_INGRESS_PUK_EXPECTED_raised {false};
		
		/*! Indicates event 'FST_2_POSITION_INGRESS_PUK_EXPIRED' of default interface scope is active. */
		bool FST_2_POSITION_INGRESS_PUK_EXPIRED_raised {false};
		
		/*! Observable for event 'FST_2_POSITION_HEIGHTMEASUREMENT_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_POSITION_HEIGHTMEASUREMENT_NEW_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED' of default interface scope is active. */
		bool FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED_raised {false};
		
		/*! Indicates event 'FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED' of default interface scope is active. */
		bool FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED_raised {false};
		
		/*! Observable for event 'FST_2_POSITION_SORTING_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_POSITION_SORTING_NEW_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'FST_2_POSITION_SORTING_PUK_EXPECTED' of default interface scope is active. */
		bool FST_2_POSITION_SORTING_PUK_EXPECTED_raised {false};
		
		/*! Indicates event 'FST_2_POSITION_SORTING_PUK_EXPIRED' of default interface scope is active. */
		bool FST_2_POSITION_SORTING_PUK_EXPIRED_raised {false};
		
		/*! Observable for event 'FST_2_POSITION_EGRESS_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_POSITION_EGRESS_NEW_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'FST_2_POSITION_EGRESS_PUK_EXPECTED' of default interface scope is active. */
		bool FST_2_POSITION_EGRESS_PUK_EXPECTED_raised {false};
		
		/*! Indicates event 'FST_2_POSITION_EGRESS_PUK_EXPIRED' of default interface scope is active. */
		bool FST_2_POSITION_EGRESS_PUK_EXPIRED_raised {false};
		
		/*! Observable for event 'FST_2_POSITION_INGRESS_PUK_REMOVED' of default interface scope. */
		sc::rx::Observable<void> FST_2_POSITION_INGRESS_PUK_REMOVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_POSITION_HEIGHTMEASUREMENT_PUK_REMOVED' of default interface scope. */
		sc::rx::Observable<void> FST_2_POSITION_HEIGHTMEASUREMENT_PUK_REMOVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_POSITION_SORTING_PUK_REMOVED' of default interface scope. */
		sc::rx::Observable<void> FST_2_POSITION_SORTING_PUK_REMOVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_POSITION_EGRESS_PUK_REMOVED' of default interface scope. */
		sc::rx::Observable<void> FST_2_POSITION_EGRESS_PUK_REMOVED_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'FST_2_POSITION_DIVERTER_DISTANCE_VALID' of default interface scope is active. */
		bool FST_2_POSITION_DIVERTER_DISTANCE_VALID_raised {false};
		
		/*! Observable for event 'FST_1_ERROR_SYSTEM' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_SYSTEM_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'FST_1_ERROR_SYSTEM_RESOLVED' of default interface scope is active. */
		bool FST_1_ERROR_SYSTEM_RESOLVED_raised {false};
		
		/*! Observable for event 'FST_1_ERROR_INGRESS_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_INGRESS_MISSING_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_INGRESS_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_INGRESS_UNKNOWNPUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_INGRESS_RESOLVED' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_INGRESS_RESOLVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_HM_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_HM_UNKNOWNPUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_HM_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_HM_MISSING_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_HM_RESOLVED' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_HM_RESOLVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_SORTING_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_SORTING_UNKNOWNPUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_SORTING_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_SORTING_MISSING_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_SORTING_RESOLVED' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_SORTING_RESOLVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_RAMPFULL_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_RAMPFULL_UNKNOWNPUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_RAMPFULL_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_RAMPFULL_MISSING_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_EGRESS_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_EGRESS_UNKNOWNPUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_EGRESS_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_EGRESS_MISSING_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_EGRESS_RESOLVED' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_EGRESS_RESOLVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_LAMP_UNACKNOWLEDGED' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_LAMP_UNACKNOWLEDGED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_LAMP_RESOLVED' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_LAMP_RESOLVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_UNACKNOWLEDGED' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_UNACKNOWLEDGED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_ACKNOWLEDGED' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_ACKNOWLEDGED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_ERROR_SORTING_RAMPFULL_' of default interface scope. */
		sc::rx::Observable<void> FST_1_ERROR_SORTING_RAMPFULL__observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'LBF_1_INTERRUPTED' of default interface scope is active. */
		bool LBF_1_INTERRUPTED_raised {false};
		
		/*! Indicates event 'LBF_1_OPEN' of default interface scope is active. */
		bool LBF_1_OPEN_raised {false};
		
		/*! Indicates event 'FST_1_PUK_ENTRY_HeightMeasurement' of default interface scope is active. */
		bool FST_1_PUK_ENTRY_HeightMeasurement_raised {false};
		
		/*! Observable for event 'FST_1_INGRESS_IN' of default interface scope. */
		sc::rx::Observable<void> FST_1_INGRESS_IN_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_INGRESS_OUT' of default interface scope. */
		sc::rx::Observable<void> FST_1_INGRESS_OUT_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_PUK_DISTANCE_VALID_INGRESS' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_DISTANCE_VALID_INGRESS_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'HS_1_SAMPLE' of default interface scope is active. */
		bool HS_1_SAMPLE_raised {false};
		
		/*! Indicates event 'HS_1_SAMPLING_DONE' of default interface scope is active. */
		bool HS_1_SAMPLING_DONE_raised {false};
		
		/*! Observable for event 'FST_1_PUK_ENTRY_SORTING' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_ENTRY_SORTING_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_HeightMeasurement_Counter' of default interface scope. */
		sc::rx::Observable<void> FST_1_HeightMeasurement_Counter_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_PUK_HEIGHT_IS_VALID' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_HEIGHT_IS_VALID_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_PUK_HEIGHT_IS_NOT_VALID' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_HEIGHT_IS_NOT_VALID_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'LBM_1_INTERRUPTED' of default interface scope is active. */
		bool LBM_1_INTERRUPTED_raised {false};
		
		/*! Indicates event 'LBM_1_OPEN' of default interface scope is active. */
		bool LBM_1_OPEN_raised {false};
		
		/*! Indicates event 'MS_1_HIGH' of default interface scope is active. */
		bool MS_1_HIGH_raised {false};
		
		/*! Indicates event 'MS_1_LOW' of default interface scope is active. */
		bool MS_1_LOW_raised {false};
		
		/*! Indicates event 'LBR_1_INTERRUPTED' of default interface scope is active. */
		bool LBR_1_INTERRUPTED_raised {false};
		
		/*! Indicates event 'LBR_1_OPEN' of default interface scope is active. */
		bool LBR_1_OPEN_raised {false};
		
		/*! Observable for event 'FST_1_PUK_IS_METAL' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_IS_METAL_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_PUK_IS_NOT_METAL' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_IS_NOT_METAL_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_PUK_DESIRED' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_DESIRED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_PUK_NOT_DESIRED' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_NOT_DESIRED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_PUK_ENTRY_EGRESS' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_ENTRY_EGRESS_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_SORTING_MODULE_ACTIVE' of default interface scope. */
		sc::rx::Observable<void> FST_1_SORTING_MODULE_ACTIVE_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_SORTING_MODULE_RESTING' of default interface scope. */
		sc::rx::Observable<void> FST_1_SORTING_MODULE_RESTING_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'FST_1_PUK_SORTING_PASSTHROUGH' of default interface scope is active. */
		bool FST_1_PUK_SORTING_PASSTHROUGH_raised {false};
		
		/*! Indicates event 'FST_1_PUK_SORTING_EJECT' of default interface scope is active. */
		bool FST_1_PUK_SORTING_EJECT_raised {false};
		
		/*! Indicates event 'LBE_1_OPEN' of default interface scope is active. */
		bool LBE_1_OPEN_raised {false};
		
		/*! Indicates event 'LBE_1_INTERRUPTED' of default interface scope is active. */
		bool LBE_1_INTERRUPTED_raised {false};
		
		/*! Observable for event 'FST_2_NOT_READY' of default interface scope. */
		sc::rx::Observable<void> FST_2_NOT_READY_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_IS_READY' of default interface scope. */
		sc::rx::Observable<void> FST_2_IS_READY_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'MOTOR_1_STOP' of default interface scope. */
		sc::rx::Observable<void> MOTOR_1_STOP_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'MOTOR_1_FAST' of default interface scope. */
		sc::rx::Observable<void> MOTOR_1_FAST_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'MOTOR_1_SLOW' of default interface scope. */
		sc::rx::Observable<void> MOTOR_1_SLOW_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'BGS_1_LONG_PRESSED' of default interface scope is active. */
		bool BGS_1_LONG_PRESSED_raised {false};
		
		/*! Indicates event 'BGS_1_INTERRUPTED' of default interface scope is active. */
		bool BGS_1_INTERRUPTED_raised {false};
		
		/*! Indicates event 'BRS_1_INTERRUPTED' of default interface scope is active. */
		bool BRS_1_INTERRUPTED_raised {false};
		
		/*! Indicates event 'BGR_1_INTERRUPTED' of default interface scope is active. */
		bool BGR_1_INTERRUPTED_raised {false};
		
		/*! Observable for event 'LG1_ON' of default interface scope. */
		sc::rx::Observable<void> LG1_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LG1_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void> LG1_BLINKING_1HZ_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LG1_BLINKING_2HZ' of default interface scope. */
		sc::rx::Observable<void> LG1_BLINKING_2HZ_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LG1_OFF' of default interface scope. */
		sc::rx::Observable<void> LG1_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LY1_ON' of default interface scope. */
		sc::rx::Observable<void> LY1_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LY1_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void> LY1_BLINKING_1HZ_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LY1_OFF' of default interface scope. */
		sc::rx::Observable<void> LY1_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LR1_ON' of default interface scope. */
		sc::rx::Observable<void> LR1_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LR_1_BLINKING_2HZ' of default interface scope. */
		sc::rx::Observable<void> LR_1_BLINKING_2HZ_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LR_1_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void> LR_1_BLINKING_1HZ_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LR_1_BLINKING_05HZ' of default interface scope. */
		sc::rx::Observable<void> LR_1_BLINKING_05HZ_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LR1_OFF' of default interface scope. */
		sc::rx::Observable<void> LR1_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'Q11_ON' of default interface scope. */
		sc::rx::Observable<void> Q11_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'Q12_ON' of default interface scope. */
		sc::rx::Observable<void> Q12_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'Q11_OFF' of default interface scope. */
		sc::rx::Observable<void> Q11_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'Q12_OFF' of default interface scope. */
		sc::rx::Observable<void> Q12_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_SYSTEM' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_SYSTEM_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'FST_2_ERROR_SYSTEM_RESOLVED' of default interface scope is active. */
		bool FST_2_ERROR_SYSTEM_RESOLVED_raised {false};
		
		/*! Observable for event 'FST_2_ERROR_INGRESS_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_INGRESS_UNKNOWNPUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_INGRESS_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_INGRESS_MISSING_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_INGRESS_RESOLVED' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_INGRESS_RESOLVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_HM_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_HM_UNKNOWNPUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_HM_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_HM_MISSING_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_HM_RESOLVED' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_HM_RESOLVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_SORTING_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_SORTING_UNKNOWNPUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_SORTING_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_SORTING_MISSING_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_SORTING_RESOLVED' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_SORTING_RESOLVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_RAMPFULL_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_RAMPFULL_UNKNOWNPUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_RAMPFULL_MISSINGPUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_RAMPFULL_MISSINGPUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_RAMPCLEARED' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_RAMPCLEARED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_EGRESS_UNKNOWNPUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_EGRESS_UNKNOWNPUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_EGRESS_MISSING_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_EGRESS_MISSING_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_EGRESS_RESOLVED' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_EGRESS_RESOLVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_UNACKNOWLEDGED' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_UNACKNOWLEDGED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_ACKNOWLEDGED' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_ACKNOWLEDGED_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'LBF_2_INTERRUPTED' of default interface scope is active. */
		bool LBF_2_INTERRUPTED_raised {false};
		
		/*! Indicates event 'LBF_2_OPEN' of default interface scope is active. */
		bool LBF_2_OPEN_raised {false};
		
		/*! Observable for event 'FST_2_PUK_ENTRY_HeightMeasurement' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_ENTRY_HeightMeasurement_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_INGRESS_IN' of default interface scope. */
		sc::rx::Observable<void> FST_2_INGRESS_IN_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_INGRESS_OUT' of default interface scope. */
		sc::rx::Observable<void> FST_2_INGRESS_OUT_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_PUK_DISTANCE_VALID_INGRESS' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_DISTANCE_VALID_INGRESS_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_YELLOW_LAMP_ON' of default interface scope. */
		sc::rx::Observable<void> FST_2_YELLOW_LAMP_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_YELLOW_LAMP_OFF' of default interface scope. */
		sc::rx::Observable<void> FST_2_YELLOW_LAMP_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'HS_2_SAMPLE' of default interface scope is active. */
		bool HS_2_SAMPLE_raised {false};
		
		/*! Indicates event 'HS_2_SAMPLING_DONE' of default interface scope is active. */
		bool HS_2_SAMPLING_DONE_raised {false};
		
		/*! Observable for event 'FST_2_PUK_ENTRY_SORTING' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_ENTRY_SORTING_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_PUK_HEIGHT_IS_VALID' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_HEIGHT_IS_VALID_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_PUK_HEIGHT_IS_NOT_VALID' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_HEIGHT_IS_NOT_VALID_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'LBM_2_INTERRUPTED' of default interface scope is active. */
		bool LBM_2_INTERRUPTED_raised {false};
		
		/*! Indicates event 'LBM_2_OPEN' of default interface scope is active. */
		bool LBM_2_OPEN_raised {false};
		
		/*! Indicates event 'MS_2_HIGH' of default interface scope is active. */
		bool MS_2_HIGH_raised {false};
		
		/*! Indicates event 'MS_2_LOW' of default interface scope is active. */
		bool MS_2_LOW_raised {false};
		
		/*! Indicates event 'LBR_2_INTERRUPTED' of default interface scope is active. */
		bool LBR_2_INTERRUPTED_raised {false};
		
		/*! Indicates event 'LBR_2_OPEN' of default interface scope is active. */
		bool LBR_2_OPEN_raised {false};
		
		/*! Observable for event 'FST_2_PUK_DESIRED' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_DESIRED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_PUK_NOT_DESIRED' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_NOT_DESIRED_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'FST_2_PUK_ENTRY_EGRESS' of default interface scope is active. */
		bool FST_2_PUK_ENTRY_EGRESS_raised {false};
		
		/*! Observable for event 'FST_2_PUK_EJECTOR_DISTANCE_VALID' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_EJECTOR_DISTANCE_VALID_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_SORTING_MODULE_ACTIVE' of default interface scope. */
		sc::rx::Observable<void> FST_2_SORTING_MODULE_ACTIVE_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_SORTING_MODULE_RESTING' of default interface scope. */
		sc::rx::Observable<void> FST_2_SORTING_MODULE_RESTING_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_PUK_IS_METAL' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_IS_METAL_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_PUK_IS_NOT_METAL' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_IS_NOT_METAL_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'FST_2_PUK_SORTING_PASSTHROUGH' of default interface scope is active. */
		bool FST_2_PUK_SORTING_PASSTHROUGH_raised {false};
		
		/*! Indicates event 'FST_2_PUK_SORTING_EJECT' of default interface scope is active. */
		bool FST_2_PUK_SORTING_EJECT_raised {false};
		
		/*! Indicates event 'LBE_2_OPEN' of default interface scope is active. */
		bool LBE_2_OPEN_raised {false};
		
		/*! Indicates event 'LBE_2_INTERRUPTED' of default interface scope is active. */
		bool LBE_2_INTERRUPTED_raised {false};
		
		/*! Observable for event 'FST_2_PUK_ENTRY_INGRESS' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_ENTRY_INGRESS_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'MOTOR_2_STOP' of default interface scope. */
		sc::rx::Observable<void> MOTOR_2_STOP_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'MOTOR_2_FAST' of default interface scope. */
		sc::rx::Observable<void> MOTOR_2_FAST_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'MOTOR_2_SLOW' of default interface scope. */
		sc::rx::Observable<void> MOTOR_2_SLOW_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'BGS_2_LONG_PRESSED' of default interface scope is active. */
		bool BGS_2_LONG_PRESSED_raised {false};
		
		/*! Indicates event 'BGS_2_INTERRUPTED' of default interface scope is active. */
		bool BGS_2_INTERRUPTED_raised {false};
		
		/*! Indicates event 'BRS_2_INTERRUPTED' of default interface scope is active. */
		bool BRS_2_INTERRUPTED_raised {false};
		
		/*! Indicates event 'BGR_2_INTERRUPTED' of default interface scope is active. */
		bool BGR_2_INTERRUPTED_raised {false};
		
		/*! Observable for event 'LG2_ON' of default interface scope. */
		sc::rx::Observable<void> LG2_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LG2_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void> LG2_BLINKING_1HZ_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LG_2_BLINKING_2HZ' of default interface scope. */
		sc::rx::Observable<void> LG_2_BLINKING_2HZ_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LG2_OFF' of default interface scope. */
		sc::rx::Observable<void> LG2_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LY2_ON' of default interface scope. */
		sc::rx::Observable<void> LY2_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LY2_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void> LY2_BLINKING_1HZ_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LY2_OFF' of default interface scope. */
		sc::rx::Observable<void> LY2_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LR2_ON' of default interface scope. */
		sc::rx::Observable<void> LR2_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LR2_BLINKING2HZ' of default interface scope. */
		sc::rx::Observable<void> LR2_BLINKING2HZ_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LR2_BLINKING1HZ' of default interface scope. */
		sc::rx::Observable<void> LR2_BLINKING1HZ_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LR2_BLINKING05HZ' of default interface scope. */
		sc::rx::Observable<void> LR2_BLINKING05HZ_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LR2_OFF' of default interface scope. */
		sc::rx::Observable<void> LR2_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'Q21_ON' of default interface scope. */
		sc::rx::Observable<void> Q21_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'Q22_ON' of default interface scope. */
		sc::rx::Observable<void> Q22_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'Q21_OFF' of default interface scope. */
		sc::rx::Observable<void> Q21_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'Q22_OFF' of default interface scope. */
		sc::rx::Observable<void> Q22_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_ERROR_LAMP_RESOLVED' of default interface scope. */
		sc::rx::Observable<void> FST_2_ERROR_LAMP_RESOLVED_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'ESTOP_SIGNAL' of default interface scope is active. */
		bool ESTOP_SIGNAL_raised {false};
		
		/*! Indicates event 'ESTOP_SIGNAL_RESET' of default interface scope is active. */
		bool ESTOP_SIGNAL_RESET_raised {false};
		
		/*! Indicates event 'RUNNING_SIGNAL' of default interface scope is active. */
		bool RUNNING_SIGNAL_raised {false};
		
		/*! Indicates event 'RUNNING_SIGNAL_RESET' of default interface scope is active. */
		bool RUNNING_SIGNAL_RESET_raised {false};
		
		/*! Indicates event 'WARNING_SIGNAL' of default interface scope is active. */
		bool WARNING_SIGNAL_raised {false};
		
		/*! Indicates event 'WARNING_SIGNAL_RESET' of default interface scope is active. */
		bool WARNING_SIGNAL_RESET_raised {false};
		
		/*! Indicates event 'READY_SIGNAL' of default interface scope is active. */
		bool READY_SIGNAL_raised {false};
		
		/*! Indicates event 'READY_RESET' of default interface scope is active. */
		bool READY_RESET_raised {false};
		
		/*! Indicates event 'ERROR_SIGNAL' of default interface scope is active. */
		bool ERROR_SIGNAL_raised {false};
		
		/*! Indicates event 'local_ESTOP_RECEIVED' of internal scope is active. */
		bool local_ESTOP_RECEIVED_raised {false};
		
		/*! Raises the out event 'local_ESTOP_RECEIVED' of internal scope as a local event. */
		void raiseLocal_ESTOP_RECEIVED();
		
		/*! Indicates event 'local_SYSTEM_OPERATIONAL_OUT' of internal scope is active. */
		bool local_SYSTEM_OPERATIONAL_OUT_raised {false};
		
		/*! Raises the out event 'local_SYSTEM_OPERATIONAL_OUT' of internal scope as a local event. */
		void raiseLocal_SYSTEM_OPERATIONAL_OUT();
		
		/*! Indicates event 'local_FST_1_ERROR_SYSTEM' of internal scope is active. */
		bool local_FST_1_ERROR_SYSTEM_raised {false};
		
		/*! Raises the out event 'local_FST_1_ERROR_SYSTEM' of internal scope as a local event. */
		void raiseLocal_FST_1_ERROR_SYSTEM();
		
		/*! Indicates event 'local_ESTOP_CLEARED' of internal scope is active. */
		bool local_ESTOP_CLEARED_raised {false};
		
		/*! Raises the out event 'local_ESTOP_CLEARED' of internal scope as a local event. */
		void raiseLocal_ESTOP_CLEARED();
		
		/*! Indicates event 'local_FST_2_NOT_READY' of internal scope is active. */
		bool local_FST_2_NOT_READY_raised {false};
		
		/*! Raises the out event 'local_FST_2_NOT_READY' of internal scope as a local event. */
		void raiseLocal_FST_2_NOT_READY();
		
		/*! Indicates event 'local_FST_2_IS_READY' of internal scope is active. */
		bool local_FST_2_IS_READY_raised {false};
		
		/*! Raises the out event 'local_FST_2_IS_READY' of internal scope as a local event. */
		void raiseLocal_FST_2_IS_READY();
		
		/*! Indicates event 'local_FST_2_ERROR_SYSTEM' of internal scope is active. */
		bool local_FST_2_ERROR_SYSTEM_raised {false};
		
		/*! Raises the out event 'local_FST_2_ERROR_SYSTEM' of internal scope as a local event. */
		void raiseLocal_FST_2_ERROR_SYSTEM();
		
		/*! Indicates event 'local_EVALUATE' of internal scope is active. */
		bool local_EVALUATE_raised {false};
		
		/*! Raises the out event 'local_EVALUATE' of internal scope as a local event. */
		void raiseLocal_EVALUATE();
		
		/*! Indicates event 'local_FST_1_ERROR_HM_UNKNOWNPUK' of internal scope is active. */
		bool local_FST_1_ERROR_HM_UNKNOWNPUK_raised {false};
		
		/*! Raises the out event 'local_FST_1_ERROR_HM_UNKNOWNPUK' of internal scope as a local event. */
		void raiseLocal_FST_1_ERROR_HM_UNKNOWNPUK();
		
		/*! Indicates event 'local_FST_1_ERROR_SORTING_UNKNOWNPUK' of internal scope is active. */
		bool local_FST_1_ERROR_SORTING_UNKNOWNPUK_raised {false};
		
		/*! Raises the out event 'local_FST_1_ERROR_SORTING_UNKNOWNPUK' of internal scope as a local event. */
		void raiseLocal_FST_1_ERROR_SORTING_UNKNOWNPUK();
		
		/*! Indicates event 'local_FST_1_ERROR_EGRESS_MISSING_PUK' of internal scope is active. */
		bool local_FST_1_ERROR_EGRESS_MISSING_PUK_raised {false};
		
		/*! Raises the out event 'local_FST_1_ERROR_EGRESS_MISSING_PUK' of internal scope as a local event. */
		void raiseLocal_FST_1_ERROR_EGRESS_MISSING_PUK();
		
		/*! Indicates event 'local_FST_1_ERROR_RAMPFULL_UNKNOWNPUK' of internal scope is active. */
		bool local_FST_1_ERROR_RAMPFULL_UNKNOWNPUK_raised {false};
		
		/*! Raises the out event 'local_FST_1_ERROR_RAMPFULL_UNKNOWNPUK' of internal scope as a local event. */
		void raiseLocal_FST_1_ERROR_RAMPFULL_UNKNOWNPUK();
		
		/*! Indicates event 'local_FST_1_ERROR_INGRESS_UNKNOWNPUK' of internal scope is active. */
		bool local_FST_1_ERROR_INGRESS_UNKNOWNPUK_raised {false};
		
		/*! Raises the out event 'local_FST_1_ERROR_INGRESS_UNKNOWNPUK' of internal scope as a local event. */
		void raiseLocal_FST_1_ERROR_INGRESS_UNKNOWNPUK();
		
		/*! Indicates event 'local_FST_1_ERROR_INGRESS_MISSING_PUK' of internal scope is active. */
		bool local_FST_1_ERROR_INGRESS_MISSING_PUK_raised {false};
		
		/*! Raises the out event 'local_FST_1_ERROR_INGRESS_MISSING_PUK' of internal scope as a local event. */
		void raiseLocal_FST_1_ERROR_INGRESS_MISSING_PUK();
		
		/*! Indicates event 'local_FST_1_ERROR_EGRESS_UNKNOWNPUK' of internal scope is active. */
		bool local_FST_1_ERROR_EGRESS_UNKNOWNPUK_raised {false};
		
		/*! Raises the out event 'local_FST_1_ERROR_EGRESS_UNKNOWNPUK' of internal scope as a local event. */
		void raiseLocal_FST_1_ERROR_EGRESS_UNKNOWNPUK();
		
		/*! Indicates event 'local_FST_1_ERROR_RAMPFULL_MISSING_PUK' of internal scope is active. */
		bool local_FST_1_ERROR_RAMPFULL_MISSING_PUK_raised {false};
		
		/*! Raises the out event 'local_FST_1_ERROR_RAMPFULL_MISSING_PUK' of internal scope as a local event. */
		void raiseLocal_FST_1_ERROR_RAMPFULL_MISSING_PUK();
		
		/*! Indicates event 'local_FST_1_ERROR_SORTING_MISSING_PUK' of internal scope is active. */
		bool local_FST_1_ERROR_SORTING_MISSING_PUK_raised {false};
		
		/*! Raises the out event 'local_FST_1_ERROR_SORTING_MISSING_PUK' of internal scope as a local event. */
		void raiseLocal_FST_1_ERROR_SORTING_MISSING_PUK();
		
		/*! Indicates event 'local_FST_1_ERROR_HM_MISSING_PUK' of internal scope is active. */
		bool local_FST_1_ERROR_HM_MISSING_PUK_raised {false};
		
		/*! Raises the out event 'local_FST_1_ERROR_HM_MISSING_PUK' of internal scope as a local event. */
		void raiseLocal_FST_1_ERROR_HM_MISSING_PUK();
		
		/*! Indicates event 'local_FST_1_ERROR_IN_READY' of internal scope is active. */
		bool local_FST_1_ERROR_IN_READY_raised {false};
		
		/*! Raises the out event 'local_FST_1_ERROR_IN_READY' of internal scope as a local event. */
		void raiseLocal_FST_1_ERROR_IN_READY();
		
		/*! Indicates event 'local_FST_1_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED' of internal scope is active. */
		bool local_FST_1_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED_raised {false};
		
		/*! Raises the out event 'local_FST_1_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED' of internal scope as a local event. */
		void raiseLocal_FST_1_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED();
		
		/*! Indicates event 'local_FST_1_ERROR_LAMP_UNACKNOWLEDGED' of internal scope is active. */
		bool local_FST_1_ERROR_LAMP_UNACKNOWLEDGED_raised {false};
		
		/*! Raises the out event 'local_FST_1_ERROR_LAMP_UNACKNOWLEDGED' of internal scope as a local event. */
		void raiseLocal_FST_1_ERROR_LAMP_UNACKNOWLEDGED();
		
		/*! Indicates event 'local_FST_1_ERROR_LAMP_RESOLVED' of internal scope is active. */
		bool local_FST_1_ERROR_LAMP_RESOLVED_raised {false};
		
		/*! Raises the out event 'local_FST_1_ERROR_LAMP_RESOLVED' of internal scope as a local event. */
		void raiseLocal_FST_1_ERROR_LAMP_RESOLVED();
		
		/*! Indicates event 'local_FST_1_ERROR_ACKNOWLEDGED' of internal scope is active. */
		bool local_FST_1_ERROR_ACKNOWLEDGED_raised {false};
		
		/*! Raises the out event 'local_FST_1_ERROR_ACKNOWLEDGED' of internal scope as a local event. */
		void raiseLocal_FST_1_ERROR_ACKNOWLEDGED();
		
		/*! Indicates event 'local_SYSTEM_SERVICE_IN' of internal scope is active. */
		bool local_SYSTEM_SERVICE_IN_raised {false};
		
		/*! Raises the out event 'local_SYSTEM_SERVICE_IN' of internal scope as a local event. */
		void raiseLocal_SYSTEM_SERVICE_IN();
		
		/*! Indicates event 'local_SYSTEM_SERVICE_OUT' of internal scope is active. */
		bool local_SYSTEM_SERVICE_OUT_raised {false};
		
		/*! Raises the out event 'local_SYSTEM_SERVICE_OUT' of internal scope as a local event. */
		void raiseLocal_SYSTEM_SERVICE_OUT();
		
		/*! Indicates event 'local_FST_2_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED' of internal scope is active. */
		bool local_FST_2_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED_raised {false};
		
		/*! Raises the out event 'local_FST_2_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED' of internal scope as a local event. */
		void raiseLocal_FST_2_ERROR_LAMP_RESOLVED_UNACKNOWLEDGED();
		
		/*! Indicates event 'local_FST_2_ERROR_UNACKNOWLEDGED' of internal scope is active. */
		bool local_FST_2_ERROR_UNACKNOWLEDGED_raised {false};
		
		/*! Raises the out event 'local_FST_2_ERROR_UNACKNOWLEDGED' of internal scope as a local event. */
		void raiseLocal_FST_2_ERROR_UNACKNOWLEDGED();
		
		/*! Indicates event 'local_FST_2_ERROR_LAMP_RESOLVED' of internal scope is active. */
		bool local_FST_2_ERROR_LAMP_RESOLVED_raised {false};
		
		/*! Raises the out event 'local_FST_2_ERROR_LAMP_RESOLVED' of internal scope as a local event. */
		void raiseLocal_FST_2_ERROR_LAMP_RESOLVED();
		
		/*! Indicates event 'local_FST_2_ERROR_ACKNOWLEDGED' of internal scope is active. */
		bool local_FST_2_ERROR_ACKNOWLEDGED_raised {false};
		
		/*! Raises the out event 'local_FST_2_ERROR_ACKNOWLEDGED' of internal scope as a local event. */
		void raiseLocal_FST_2_ERROR_ACKNOWLEDGED();
		
		/*! Indicates event 'local_FST_2_ERROR_HM_UNKNOWNPUK' of internal scope is active. */
		bool local_FST_2_ERROR_HM_UNKNOWNPUK_raised {false};
		
		/*! Raises the out event 'local_FST_2_ERROR_HM_UNKNOWNPUK' of internal scope as a local event. */
		void raiseLocal_FST_2_ERROR_HM_UNKNOWNPUK();
		
		/*! Indicates event 'local_FST_2_ERROR_SORTING_UNKNOWNPUK' of internal scope is active. */
		bool local_FST_2_ERROR_SORTING_UNKNOWNPUK_raised {false};
		
		/*! Raises the out event 'local_FST_2_ERROR_SORTING_UNKNOWNPUK' of internal scope as a local event. */
		void raiseLocal_FST_2_ERROR_SORTING_UNKNOWNPUK();
		
		/*! Indicates event 'local_FST_2_ERROR_EGRESS_MISSING_PUK' of internal scope is active. */
		bool local_FST_2_ERROR_EGRESS_MISSING_PUK_raised {false};
		
		/*! Raises the out event 'local_FST_2_ERROR_EGRESS_MISSING_PUK' of internal scope as a local event. */
		void raiseLocal_FST_2_ERROR_EGRESS_MISSING_PUK();
		
		/*! Indicates event 'local_FST_2_ERROR_RAMPFULL_UNKNOWNPUK' of internal scope is active. */
		bool local_FST_2_ERROR_RAMPFULL_UNKNOWNPUK_raised {false};
		
		/*! Raises the out event 'local_FST_2_ERROR_RAMPFULL_UNKNOWNPUK' of internal scope as a local event. */
		void raiseLocal_FST_2_ERROR_RAMPFULL_UNKNOWNPUK();
		
		/*! Indicates event 'local_FST_2_ERROR_INGRESS_UNKNOWNPUK' of internal scope is active. */
		bool local_FST_2_ERROR_INGRESS_UNKNOWNPUK_raised {false};
		
		/*! Raises the out event 'local_FST_2_ERROR_INGRESS_UNKNOWNPUK' of internal scope as a local event. */
		void raiseLocal_FST_2_ERROR_INGRESS_UNKNOWNPUK();
		
		/*! Indicates event 'local_FST_2_ERROR_INGRESS_MISSING_PUK' of internal scope is active. */
		bool local_FST_2_ERROR_INGRESS_MISSING_PUK_raised {false};
		
		/*! Raises the out event 'local_FST_2_ERROR_INGRESS_MISSING_PUK' of internal scope as a local event. */
		void raiseLocal_FST_2_ERROR_INGRESS_MISSING_PUK();
		
		/*! Indicates event 'local_FST_2_ERROR_EGRESS_UNKNOWNPUK' of internal scope is active. */
		bool local_FST_2_ERROR_EGRESS_UNKNOWNPUK_raised {false};
		
		/*! Raises the out event 'local_FST_2_ERROR_EGRESS_UNKNOWNPUK' of internal scope as a local event. */
		void raiseLocal_FST_2_ERROR_EGRESS_UNKNOWNPUK();
		
		/*! Indicates event 'local_FST_2_ERROR_RAMPFULL_MISSINGPUK' of internal scope is active. */
		bool local_FST_2_ERROR_RAMPFULL_MISSINGPUK_raised {false};
		
		/*! Raises the out event 'local_FST_2_ERROR_RAMPFULL_MISSINGPUK' of internal scope as a local event. */
		void raiseLocal_FST_2_ERROR_RAMPFULL_MISSINGPUK();
		
		/*! Indicates event 'local_FST_2_ERROR_SORTING_MISSING_PUK' of internal scope is active. */
		bool local_FST_2_ERROR_SORTING_MISSING_PUK_raised {false};
		
		/*! Raises the out event 'local_FST_2_ERROR_SORTING_MISSING_PUK' of internal scope as a local event. */
		void raiseLocal_FST_2_ERROR_SORTING_MISSING_PUK();
		
		/*! Indicates event 'local_FST_2_ERROR_HM_MISSING_PUK' of internal scope is active. */
		bool local_FST_2_ERROR_HM_MISSING_PUK_raised {false};
		
		/*! Raises the out event 'local_FST_2_ERROR_HM_MISSING_PUK' of internal scope as a local event. */
		void raiseLocal_FST_2_ERROR_HM_MISSING_PUK();
		
		/*! Indicates event 'local_FST_2_ERROR_IN_READY' of internal scope is active. */
		bool local_FST_2_ERROR_IN_READY_raised {false};
		
		/*! Raises the out event 'local_FST_2_ERROR_IN_READY' of internal scope as a local event. */
		void raiseLocal_FST_2_ERROR_IN_READY();
		
		
		
};




#endif /* FSM_H_ */
