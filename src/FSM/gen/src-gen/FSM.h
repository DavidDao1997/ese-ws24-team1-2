/** Generated by itemis CREATE code generator. */

#ifndef FSM_H_
#define FSM_H_

/*!
Forward declaration for the FSM state machine.
*/
class FSM;


#include <deque>
#include "../src/sc_types.h"
#include "../src/sc_rxcpp.h"
#include "../src/sc_statemachine.h"
#include "../src/sc_eventdriven.h"
#include <string.h>

/*! \file
Header of the state machine 'FSM'.
*/


class FSM : public sc::EventDrivenInterface
{
	public:
		FSM() noexcept;
		
		virtual ~FSM();
		
		
		
		/*! Enumeration of all states. */
		enum class State
		{
			NO_STATE,
			FSM_Festo1_Ingress_Ingress,
			FSM_Festo1_Ingress_Ingress_Ingress_Idle,
			FSM_Festo1_Ingress_Ingress_Ingress_PukPresent,
			FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance,
			FSM_Festo1_Ingress_Paused,
			FSM_Festo1_Ingress_E_STOP,
			FSM_Festo1_Ingress_Start,
			FSM_Festo1_HeightMeasurement_HeightMeasurement,
			FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Idle,
			FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring,
			_0,
			A,
			B,
			C,
			Error,
			Evaluate,
			_final_,
			FSM_Festo1_HeightMeasurement_HeightMeasurement_s_PukPresent,
			FSM_Festo1_HeightMeasurement_HeightMeasurement_s_PukExpected,
			FSM_Festo1_HeightMeasurement_Paused,
			FSM_Festo1_HeightMeasurement_E_STOP,
			FSM_Festo1_HeightMeasurement_Start,
			FSM_Festo1__Sorting_Sorting,
			FSM_Festo1__Sorting_Sorting_Sorting_Idle,
			FSM_Festo1__Sorting_Sorting_Sorting_MetalMeasurement,
			FSM_Festo1__Sorting_Sorting_Sorting_PukPresent,
			FSM_Festo1__Sorting_Sorting_Sorting_PukExpected,
			FSM_Festo1__Sorting_RampFull,
			FSM_Festo1__Sorting_Paused,
			FSM_Festo1__Sorting_E_STOP,
			FSM_Festo1__Sorting_Start,
			FSM_Festo1__Egress_Egress,
			FSM_Festo1__Egress_Egress_Egress_IDLE,
			FSM_Festo1__Egress_Egress_Egress_PukPresent,
			FSM_Festo1__Egress_Egress_Egress_Transfer,
			FSM_Festo1__Egress_Egress_Egress_PukExpected,
			FSM_Festo1__Egress_Paused,
			FSM_Festo1__Egress_E_STOP,
			FSM_Festo1__Egress_Start,
			FSM_QualityGate__Motor_SystemMotor,
			FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle,
			FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward,
			FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow,
			FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop,
			FSM_System_Operational,
			FSM_System_EStop,
			FSM_System_EStop_EStop_AwaitingEStopResolve,
			FSM_System_EStop_EStop__final_,
			FSM_System_Start,
			FSM_System_Ready,
			FSM_System_ServiceMode,
			FSM_Festo1_Signaling_FSM_LAMP,
			FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp,
			FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off,
			FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant,
			FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz,
			FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off,
			FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant,
			FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz,
			FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off,
			FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant,
			FSM_Festo2__Ingress_Ingress,
			FSM_Festo2__Ingress_Ingress_Ingress_Idle,
			FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance,
			FSM_Festo2__Ingress_Ingress_Ingress_PukPresent,
			FSM_Festo2__Ingress_Ingress_Ingress_PukExpected,
			FSM_Festo2__Ingress_E_STOP,
			FSM_Festo2__Ingress_Paused,
			FSM_Festo2__Ingress_Starting,
			FSM_Festo2__HeightMeasurement_HeightMeasurement,
			FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle,
			FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring,
			FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent,
			FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukExpected,
			FSM_Festo2__HeightMeasurement_Paused,
			FSM_Festo2__HeightMeasurement_E_STOP,
			FSM_Festo2__HeightMeasurement_Start,
			FSM_Festo2__Sorting_Sorting,
			FSM_Festo2__Sorting_Sorting_Sorting_Idle,
			FSM_Festo2__Sorting_Sorting_Sorting_MetalMeasurement,
			FSM_Festo2__Sorting_Sorting_Sorting_PukPresent,
			FSM_Festo2__Sorting_Sorting_Sorting_PukExpected,
			FSM_Festo2__Sorting_RampFull,
			FSM_Festo2__Sorting_Paused,
			FSM_Festo2__Sorting_E_STOP,
			FSM_Festo2__Sorting_Start,
			FSM_Festo2__Egress_Egress,
			FSM_Festo2__Egress_Egress_Egress_IDLE,
			FSM_Festo2__Egress_Egress_Egress_PukPresent,
			FSM_Festo2__Egress_Egress_Egress_Transfer,
			FSM_Festo2__Egress_Egress_Egress_PukExpected,
			FSM_Festo2__Egress_Paused,
			FSM_Festo2__Egress_E_STOP,
			FSM_Festo2__Egress_Start,
			FSM_Festo2__Motor_SystemMotor,
			FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Idle,
			FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward,
			FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow,
			FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop,
			FSM_Festo2__Signaling_FSM_LAMP,
			FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp,
			FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off,
			FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant,
			FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz,
			FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off,
			FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant,
			FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz,
			FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off,
			FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant
		};
		
		/*! The number of states. */
		static constexpr const sc::integer numStates {109};
		static constexpr const sc::integer scvi_FSM_Festo1_Ingress_Ingress {0};
		static constexpr const sc::integer scvi_FSM_Festo1_Ingress_Ingress_Ingress_Idle {0};
		static constexpr const sc::integer scvi_FSM_Festo1_Ingress_Ingress_Ingress_PukPresent {0};
		static constexpr const sc::integer scvi_FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance {0};
		static constexpr const sc::integer scvi_FSM_Festo1_Ingress_Paused {0};
		static constexpr const sc::integer scvi_FSM_Festo1_Ingress_E_STOP {0};
		static constexpr const sc::integer scvi_FSM_Festo1_Ingress_Start {0};
		static constexpr const sc::integer scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement {1};
		static constexpr const sc::integer scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Idle {1};
		static constexpr const sc::integer scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring {1};
		static constexpr const sc::integer scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM__0 {1};
		static constexpr const sc::integer scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_A {1};
		static constexpr const sc::integer scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_B {1};
		static constexpr const sc::integer scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_C {1};
		static constexpr const sc::integer scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_Error {1};
		static constexpr const sc::integer scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_Evaluate {1};
		static constexpr const sc::integer scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM__final_ {1};
		static constexpr const sc::integer scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_PukPresent {1};
		static constexpr const sc::integer scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_PukExpected {1};
		static constexpr const sc::integer scvi_FSM_Festo1_HeightMeasurement_Paused {1};
		static constexpr const sc::integer scvi_FSM_Festo1_HeightMeasurement_E_STOP {1};
		static constexpr const sc::integer scvi_FSM_Festo1_HeightMeasurement_Start {1};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_Sorting {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_Sorting_Sorting_Idle {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_Sorting_Sorting_MetalMeasurement {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_RampFull {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_Paused {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_E_STOP {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Sorting_Start {2};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_Egress {3};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_Egress_Egress_IDLE {3};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_Egress_Egress_PukPresent {3};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_Egress_Egress_Transfer {3};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_Egress_Egress_PukExpected {3};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_Paused {3};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_E_STOP {3};
		static constexpr const sc::integer scvi_FSM_Festo1__Egress_Start {3};
		static constexpr const sc::integer scvi_FSM_QualityGate__Motor_SystemMotor {4};
		static constexpr const sc::integer scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle {4};
		static constexpr const sc::integer scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward {4};
		static constexpr const sc::integer scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow {4};
		static constexpr const sc::integer scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop {4};
		static constexpr const sc::integer scvi_FSM_System_Operational {5};
		static constexpr const sc::integer scvi_FSM_System_EStop {5};
		static constexpr const sc::integer scvi_FSM_System_EStop_EStop_AwaitingEStopResolve {5};
		static constexpr const sc::integer scvi_FSM_System_EStop_EStop__final_ {5};
		static constexpr const sc::integer scvi_FSM_System_Start {5};
		static constexpr const sc::integer scvi_FSM_System_Ready {5};
		static constexpr const sc::integer scvi_FSM_System_ServiceMode {5};
		static constexpr const sc::integer scvi_FSM_Festo1_Signaling_FSM_LAMP {6};
		static constexpr const sc::integer scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp {6};
		static constexpr const sc::integer scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off {6};
		static constexpr const sc::integer scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant {6};
		static constexpr const sc::integer scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz {6};
		static constexpr const sc::integer scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off {7};
		static constexpr const sc::integer scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant {7};
		static constexpr const sc::integer scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz {7};
		static constexpr const sc::integer scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off {8};
		static constexpr const sc::integer scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant {8};
		static constexpr const sc::integer scvi_FSM_Festo2__Ingress_Ingress {9};
		static constexpr const sc::integer scvi_FSM_Festo2__Ingress_Ingress_Ingress_Idle {9};
		static constexpr const sc::integer scvi_FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance {9};
		static constexpr const sc::integer scvi_FSM_Festo2__Ingress_Ingress_Ingress_PukPresent {9};
		static constexpr const sc::integer scvi_FSM_Festo2__Ingress_Ingress_Ingress_PukExpected {9};
		static constexpr const sc::integer scvi_FSM_Festo2__Ingress_E_STOP {9};
		static constexpr const sc::integer scvi_FSM_Festo2__Ingress_Paused {9};
		static constexpr const sc::integer scvi_FSM_Festo2__Ingress_Starting {9};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement {10};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle {10};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring {10};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent {10};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukExpected {10};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_Paused {10};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_E_STOP {10};
		static constexpr const sc::integer scvi_FSM_Festo2__HeightMeasurement_Start {10};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_Sorting {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_Sorting_Sorting_Idle {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_Sorting_Sorting_MetalMeasurement {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_Sorting_Sorting_PukPresent {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_Sorting_Sorting_PukExpected {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_RampFull {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_Paused {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_E_STOP {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Sorting_Start {11};
		static constexpr const sc::integer scvi_FSM_Festo2__Egress_Egress {12};
		static constexpr const sc::integer scvi_FSM_Festo2__Egress_Egress_Egress_IDLE {12};
		static constexpr const sc::integer scvi_FSM_Festo2__Egress_Egress_Egress_PukPresent {12};
		static constexpr const sc::integer scvi_FSM_Festo2__Egress_Egress_Egress_Transfer {12};
		static constexpr const sc::integer scvi_FSM_Festo2__Egress_Egress_Egress_PukExpected {12};
		static constexpr const sc::integer scvi_FSM_Festo2__Egress_Paused {12};
		static constexpr const sc::integer scvi_FSM_Festo2__Egress_E_STOP {12};
		static constexpr const sc::integer scvi_FSM_Festo2__Egress_Start {12};
		static constexpr const sc::integer scvi_FSM_Festo2__Motor_SystemMotor {13};
		static constexpr const sc::integer scvi_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Idle {13};
		static constexpr const sc::integer scvi_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward {13};
		static constexpr const sc::integer scvi_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow {13};
		static constexpr const sc::integer scvi_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop {13};
		static constexpr const sc::integer scvi_FSM_Festo2__Signaling_FSM_LAMP {14};
		static constexpr const sc::integer scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp {14};
		static constexpr const sc::integer scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off {14};
		static constexpr const sc::integer scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant {14};
		static constexpr const sc::integer scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz {14};
		static constexpr const sc::integer scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off {15};
		static constexpr const sc::integer scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant {15};
		static constexpr const sc::integer scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz {15};
		static constexpr const sc::integer scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off {16};
		static constexpr const sc::integer scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant {16};
		
		/*! Enumeration of all events which are consumed. */
		enum class Event
		{
			NO_EVENT,
			ESTOP_1_HIGH,
			ESTOP_1_LOW,
			ESTOP_2_HIGH,
			ESTOP_2_LOW,
			LBF_1_INTERRUPTED,
			LBF_1_OPEN,
			HS_1_SAMPLE,
			HS_1_SAMPLING_DONE,
			LBM_1_INTERRUPTED,
			LBM_1_OPEN,
			MS_1_TRUE,
			LBR_1_INTERRUPTED,
			LBR_1_OPEN,
			LBE_1_OPEN,
			LBE_1_INTERRUPTED,
			BGS_1_LONG_PRESSED,
			BGS_1_INTERRUPTED,
			BRS_1_INTERRUPTED,
			BGR_1_INTERRUPTED,
			LBF_2_INTERRUPTED,
			LBF_2_OPEN,
			HS_2_SAMPLE,
			HS_2_SAMPLING_DONE,
			LBM_2_INTERRUPTED,
			LBM_2_OPEN,
			MS_2_TRUE,
			LBR_2_INTERRUPTED,
			LBR_2_OPEN,
			LBE_2_OPEN,
			LBE_2_INTERRUPTED,
			BGS_2_LONG_PRESSED,
			BGS_2_INTERRUPTED,
			BRS_2_INTERRUPTED,
			BGR_2_INTERRUPTED,
			ESTOP_SIGNAL,
			ESTOP_SIGNAL_RESET,
			RUNNING_SIGNAL,
			RUNNING_SIGNAL_RESET,
			WARNING_SIGNAL,
			WARNING_SIGNAL_RESET,
			READY_SIGNAL,
			READY_RESET,
			ERROR_SIGNAL,
			Internal_local_SYSTEM_OPERATIONAL_OUT,
			Internal_local_ESTOP_RECEIVED,
			Internal_local_FST_1_POSITION_INGRESS_DISTANCE_VALID,
			Internal_local_SYSTEM_OPERATIONAL_IN,
			Internal_local_ESTOP_CLEARED,
			Internal_local_FST_1_PUK_ENTRY_HeightMeasurement,
			Internal_local_FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED,
			Internal_local_FST_1_PUK_ENTRY_SORTING,
			Internal_local_FST_1_POSITION_SORTING_PUK_EXPECTED,
			Internal_local_FST_1_PUK_ENTRY_EGRESS,
			Internal_local_FST_1_POSITION_EGRESS_PUK_EXPECTED,
			Internal_local_SYSTEM_SERVICE_IN,
			Internal_local_SYSTEM_SERVICE_OUT,
			Internal_local_FST_1_INGRESS_IN,
			Internal_local_FST_1_INGRESS_OUT,
			Internal_local_FST_2_PUK_ENTRY_INGRESS,
			Internal_local_FST_2_POSITION_INGRESS_DISTANCE_VALID,
			Internal_local_FST_2_POSITION_INGRESS_EXPECTED,
			Internal_local_FST_2_PUK_ENTRY_HeightMeasurement,
			Internal_local_FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED,
			Internal_local_FST_2_PUK_ENTRY_SORTING,
			Internal_local_FST_2_POSITION_SORTING_PUK_EXPECTED,
			Internal_local_FST_2_PUK_ENTRY_EGRESS,
			Internal_local_FST_2_POSITION_EGRESS_PUK_EXPECTED,
			Internal_local_FST_2_YELLOW_LAMP_ON,
			Internal_local_FST_2_YELLOW_LAMP_OFF
		};
		
		class EventInstance
		{
			public:
				explicit  EventInstance(Event id) noexcept : eventId(id){}
				virtual ~EventInstance() = default;
				const Event eventId;
		};
		/*! Get observable for event 'SYSTEM_OPERATIONAL_IN' of default interface scope. */
		sc::rx::Observable<void>& getSYSTEM_OPERATIONAL_IN() noexcept;
		/*! Get observable for event 'SYSTEM_OPERATIONAL_OUT' of default interface scope. */
		sc::rx::Observable<void>& getSYSTEM_OPERATIONAL_OUT() noexcept;
		/*! Get observable for event 'SYSTEM_SERVICE_IN' of default interface scope. */
		sc::rx::Observable<void>& getSYSTEM_SERVICE_IN() noexcept;
		/*! Get observable for event 'SYSTEM_SERVICE_OUT' of default interface scope. */
		sc::rx::Observable<void>& getSYSTEM_SERVICE_OUT() noexcept;
		/*! Get observable for event 'ESTOP_RECEIVED' of default interface scope. */
		sc::rx::Observable<void>& getESTOP_RECEIVED() noexcept;
		/*! Get observable for event 'ESTOP_CLEARED' of default interface scope. */
		sc::rx::Observable<void>& getESTOP_CLEARED() noexcept;
		/*! Get observable for event 'SYSTEM_RUNNING' of default interface scope. */
		sc::rx::Observable<void>& getSYSTEM_RUNNING() noexcept;
		/*! Get observable for event 'SYSTEM_STOPPED' of default interface scope. */
		sc::rx::Observable<void>& getSYSTEM_STOPPED() noexcept;
		/*! Raises the in event 'ESTOP_1_HIGH' of default interface scope. */
		void raiseESTOP_1_HIGH();
		/*! Raises the in event 'ESTOP_1_LOW' of default interface scope. */
		void raiseESTOP_1_LOW();
		/*! Raises the in event 'ESTOP_2_HIGH' of default interface scope. */
		void raiseESTOP_2_HIGH();
		/*! Raises the in event 'ESTOP_2_LOW' of default interface scope. */
		void raiseESTOP_2_LOW();
		/*! Get observable for event 'FST_1_POSITION_INGRESS_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_POSITION_INGRESS_NEW_PUK() noexcept;
		/*! Get observable for event 'FST_1_POSITION_INGRESS_DISTANCE_VALID' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_POSITION_INGRESS_DISTANCE_VALID() noexcept;
		/*! Get observable for event 'FST_1_POSITION_HEIGHTMEASUREMENT_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_POSITION_HEIGHTMEASUREMENT_NEW_PUK() noexcept;
		/*! Get observable for event 'FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED() noexcept;
		/*! Get observable for event 'FST_1_POSITION_SORTING_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_POSITION_SORTING_NEW_PUK() noexcept;
		/*! Get observable for event 'FST_1_POSITION_SORTING_PUK_EXPECTED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_POSITION_SORTING_PUK_EXPECTED() noexcept;
		/*! Get observable for event 'FST_1_POSITION_EGRESS_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_POSITION_EGRESS_NEW_PUK() noexcept;
		/*! Get observable for event 'FST_1_POSITION_EGRESS_PUK_EXPECTED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_POSITION_EGRESS_PUK_EXPECTED() noexcept;
		/*! Raises the in event 'LBF_1_INTERRUPTED' of default interface scope. */
		void raiseLBF_1_INTERRUPTED();
		/*! Raises the in event 'LBF_1_OPEN' of default interface scope. */
		void raiseLBF_1_OPEN();
		/*! Get observable for event 'FST_1_PUK_ENTRY_HeightMeasurement' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_ENTRY_HeightMeasurement() noexcept;
		/*! Get observable for event 'FST_1_INGRESS_IN' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_INGRESS_IN() noexcept;
		/*! Get observable for event 'FST_1_INGRESS_OUT' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_INGRESS_OUT() noexcept;
		/*! Get observable for event 'FST_1_PUK_DISTANCE_VALID_INGRESS' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_DISTANCE_VALID_INGRESS() noexcept;
		/*! Raises the in event 'HS_1_SAMPLE' of default interface scope. */
		void raiseHS_1_SAMPLE();
		/*! Raises the in event 'HS_1_SAMPLING_DONE' of default interface scope. */
		void raiseHS_1_SAMPLING_DONE();
		/*! Get observable for event 'FST_1_PUK_ENTRY_SORTING' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_ENTRY_SORTING() noexcept;
		/*! Get observable for event 'FST_1_HeightMeasurement_Counter' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_HeightMeasurement_Counter() noexcept;
		/*! Get observable for event 'FST_1_PUK_HEIGHT_IS_VALID' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_HEIGHT_IS_VALID() noexcept;
		/*! Get observable for event 'FST_1_PUK_HEIGHT_IS_NOT_VALID' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_HEIGHT_IS_NOT_VALID() noexcept;
		/*! Raises the in event 'LBM_1_INTERRUPTED' of default interface scope. */
		void raiseLBM_1_INTERRUPTED();
		/*! Raises the in event 'LBM_1_OPEN' of default interface scope. */
		void raiseLBM_1_OPEN();
		/*! Raises the in event 'MS_1_TRUE' of default interface scope. */
		void raiseMS_1_TRUE();
		/*! Raises the in event 'LBR_1_INTERRUPTED' of default interface scope. */
		void raiseLBR_1_INTERRUPTED();
		/*! Raises the in event 'LBR_1_OPEN' of default interface scope. */
		void raiseLBR_1_OPEN();
		/*! Get observable for event 'FST_1_PUK_DESIRED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_DESIRED() noexcept;
		/*! Get observable for event 'FST_1_PUK_NOT_DESIRED' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_NOT_DESIRED() noexcept;
		/*! Get observable for event 'FST_1_PUK_ENTRY_EGRESS' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_ENTRY_EGRESS() noexcept;
		/*! Get observable for event 'FST_1_PUK_EJECTOR_DISTANCE_VALID' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_PUK_EJECTOR_DISTANCE_VALID() noexcept;
		/*! Get observable for event 'FST_1_SORTING_MODULE_ACTIVE' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_SORTING_MODULE_ACTIVE() noexcept;
		/*! Get observable for event 'FST_1_SORTING_MODULE_RESTING' of default interface scope. */
		sc::rx::Observable<void>& getFST_1_SORTING_MODULE_RESTING() noexcept;
		/*! Raises the in event 'LBE_1_OPEN' of default interface scope. */
		void raiseLBE_1_OPEN();
		/*! Raises the in event 'LBE_1_INTERRUPTED' of default interface scope. */
		void raiseLBE_1_INTERRUPTED();
		/*! Get observable for event 'MOTOR_1_STOP' of default interface scope. */
		sc::rx::Observable<void>& getMOTOR_1_STOP() noexcept;
		/*! Get observable for event 'MOTOR_1_FAST' of default interface scope. */
		sc::rx::Observable<void>& getMOTOR_1_FAST() noexcept;
		/*! Get observable for event 'MOTOR_1_SLOW' of default interface scope. */
		sc::rx::Observable<void>& getMOTOR_1_SLOW() noexcept;
		/*! Raises the in event 'BGS_1_LONG_PRESSED' of default interface scope. */
		void raiseBGS_1_LONG_PRESSED();
		/*! Raises the in event 'BGS_1_INTERRUPTED' of default interface scope. */
		void raiseBGS_1_INTERRUPTED();
		/*! Raises the in event 'BRS_1_INTERRUPTED' of default interface scope. */
		void raiseBRS_1_INTERRUPTED();
		/*! Raises the in event 'BGR_1_INTERRUPTED' of default interface scope. */
		void raiseBGR_1_INTERRUPTED();
		/*! Get observable for event 'LG1_ON' of default interface scope. */
		sc::rx::Observable<void>& getLG1_ON() noexcept;
		/*! Get observable for event 'LG1_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void>& getLG1_BLINKING_1HZ() noexcept;
		/*! Get observable for event 'LG1_OFF' of default interface scope. */
		sc::rx::Observable<void>& getLG1_OFF() noexcept;
		/*! Get observable for event 'LY1_ON' of default interface scope. */
		sc::rx::Observable<void>& getLY1_ON() noexcept;
		/*! Get observable for event 'LY1_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void>& getLY1_BLINKING_1HZ() noexcept;
		/*! Get observable for event 'LY1_OFF' of default interface scope. */
		sc::rx::Observable<void>& getLY1_OFF() noexcept;
		/*! Get observable for event 'LR1_ON' of default interface scope. */
		sc::rx::Observable<void>& getLR1_ON() noexcept;
		/*! Get observable for event 'LR1_OFF' of default interface scope. */
		sc::rx::Observable<void>& getLR1_OFF() noexcept;
		/*! Get observable for event 'FST_2_POSITION_INGRESS_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_POSITION_INGRESS_NEW_PUK() noexcept;
		/*! Get observable for event 'FST_2_POSITION_INGRESS_DISTANCE_VALID' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_POSITION_INGRESS_DISTANCE_VALID() noexcept;
		/*! Get observable for event 'FST_2_POSITION_INGRESS_EXPECTED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_POSITION_INGRESS_EXPECTED() noexcept;
		/*! Get observable for event 'FST_2_POSITION_HEIGHTMEASUREMENT_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_POSITION_HEIGHTMEASUREMENT_NEW_PUK() noexcept;
		/*! Get observable for event 'FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED() noexcept;
		/*! Get observable for event 'FST_2_POSITION_SORTING_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_POSITION_SORTING_NEW_PUK() noexcept;
		/*! Get observable for event 'FST_2_POSITION_SORTING_PUK_EXPECTED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_POSITION_SORTING_PUK_EXPECTED() noexcept;
		/*! Get observable for event 'FST_2_POSITION_EGRESS_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_POSITION_EGRESS_NEW_PUK() noexcept;
		/*! Get observable for event 'FST_2_POSITION_EGRESS_PUK_EXPECTED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_POSITION_EGRESS_PUK_EXPECTED() noexcept;
		/*! Raises the in event 'LBF_2_INTERRUPTED' of default interface scope. */
		void raiseLBF_2_INTERRUPTED();
		/*! Raises the in event 'LBF_2_OPEN' of default interface scope. */
		void raiseLBF_2_OPEN();
		/*! Get observable for event 'FST_2_PUK_ENTRY_HeightMeasurement' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_ENTRY_HeightMeasurement() noexcept;
		/*! Get observable for event 'FST_2_INGRESS_IN' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_INGRESS_IN() noexcept;
		/*! Get observable for event 'FST_2_INGRESS_OUT' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_INGRESS_OUT() noexcept;
		/*! Get observable for event 'FST_2_PUK_DISTANCE_VALID_INGRESS' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_DISTANCE_VALID_INGRESS() noexcept;
		/*! Get observable for event 'FST_2_YELLOW_LAMP_ON' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_YELLOW_LAMP_ON() noexcept;
		/*! Get observable for event 'FST_2_YELLOW_LAMP_OFF' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_YELLOW_LAMP_OFF() noexcept;
		/*! Raises the in event 'HS_2_SAMPLE' of default interface scope. */
		void raiseHS_2_SAMPLE();
		/*! Raises the in event 'HS_2_SAMPLING_DONE' of default interface scope. */
		void raiseHS_2_SAMPLING_DONE();
		/*! Get observable for event 'FST_2_PUK_ENTRY_SORTING' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_ENTRY_SORTING() noexcept;
		/*! Raises the in event 'LBM_2_INTERRUPTED' of default interface scope. */
		void raiseLBM_2_INTERRUPTED();
		/*! Raises the in event 'LBM_2_OPEN' of default interface scope. */
		void raiseLBM_2_OPEN();
		/*! Raises the in event 'MS_2_TRUE' of default interface scope. */
		void raiseMS_2_TRUE();
		/*! Raises the in event 'LBR_2_INTERRUPTED' of default interface scope. */
		void raiseLBR_2_INTERRUPTED();
		/*! Raises the in event 'LBR_2_OPEN' of default interface scope. */
		void raiseLBR_2_OPEN();
		/*! Get observable for event 'FST_2_PUK_DESIRED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_DESIRED() noexcept;
		/*! Get observable for event 'FST_2_PUK_NOT_DESIRED' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_NOT_DESIRED() noexcept;
		/*! Get observable for event 'FST_2_PUK_ENTRY_EGRESS' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_ENTRY_EGRESS() noexcept;
		/*! Get observable for event 'FST_2_PUK_EJECTOR_DISTANCE_VALID' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_EJECTOR_DISTANCE_VALID() noexcept;
		/*! Get observable for event 'FST_2_SORTING_MODULE_ACTIVE' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_SORTING_MODULE_ACTIVE() noexcept;
		/*! Get observable for event 'FST_2_SORTING_MODULE_RESTING' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_SORTING_MODULE_RESTING() noexcept;
		/*! Raises the in event 'LBE_2_OPEN' of default interface scope. */
		void raiseLBE_2_OPEN();
		/*! Raises the in event 'LBE_2_INTERRUPTED' of default interface scope. */
		void raiseLBE_2_INTERRUPTED();
		/*! Get observable for event 'FST_2_PUK_ENTRY_INGRESS' of default interface scope. */
		sc::rx::Observable<void>& getFST_2_PUK_ENTRY_INGRESS() noexcept;
		/*! Get observable for event 'MOTOR_2_STOP' of default interface scope. */
		sc::rx::Observable<void>& getMOTOR_2_STOP() noexcept;
		/*! Get observable for event 'MOTOR_2_FAST' of default interface scope. */
		sc::rx::Observable<void>& getMOTOR_2_FAST() noexcept;
		/*! Get observable for event 'MOTOR_2_SLOW' of default interface scope. */
		sc::rx::Observable<void>& getMOTOR_2_SLOW() noexcept;
		/*! Raises the in event 'BGS_2_LONG_PRESSED' of default interface scope. */
		void raiseBGS_2_LONG_PRESSED();
		/*! Raises the in event 'BGS_2_INTERRUPTED' of default interface scope. */
		void raiseBGS_2_INTERRUPTED();
		/*! Raises the in event 'BRS_2_INTERRUPTED' of default interface scope. */
		void raiseBRS_2_INTERRUPTED();
		/*! Raises the in event 'BGR_2_INTERRUPTED' of default interface scope. */
		void raiseBGR_2_INTERRUPTED();
		/*! Get observable for event 'LG2_ON' of default interface scope. */
		sc::rx::Observable<void>& getLG2_ON() noexcept;
		/*! Get observable for event 'LG2_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void>& getLG2_BLINKING_1HZ() noexcept;
		/*! Get observable for event 'LG2_OFF' of default interface scope. */
		sc::rx::Observable<void>& getLG2_OFF() noexcept;
		/*! Get observable for event 'LY2_ON' of default interface scope. */
		sc::rx::Observable<void>& getLY2_ON() noexcept;
		/*! Get observable for event 'LY2_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void>& getLY2_BLINKING_1HZ() noexcept;
		/*! Get observable for event 'LY2_OFF' of default interface scope. */
		sc::rx::Observable<void>& getLY2_OFF() noexcept;
		/*! Get observable for event 'LR2_ON' of default interface scope. */
		sc::rx::Observable<void>& getLR2_ON() noexcept;
		/*! Get observable for event 'LR2_OFF' of default interface scope. */
		sc::rx::Observable<void>& getLR2_OFF() noexcept;
		/*! Raises the in event 'ESTOP_SIGNAL' of default interface scope. */
		void raiseESTOP_SIGNAL();
		/*! Raises the in event 'ESTOP_SIGNAL_RESET' of default interface scope. */
		void raiseESTOP_SIGNAL_RESET();
		/*! Raises the in event 'RUNNING_SIGNAL' of default interface scope. */
		void raiseRUNNING_SIGNAL();
		/*! Raises the in event 'RUNNING_SIGNAL_RESET' of default interface scope. */
		void raiseRUNNING_SIGNAL_RESET();
		/*! Raises the in event 'WARNING_SIGNAL' of default interface scope. */
		void raiseWARNING_SIGNAL();
		/*! Raises the in event 'WARNING_SIGNAL_RESET' of default interface scope. */
		void raiseWARNING_SIGNAL_RESET();
		/*! Raises the in event 'READY_SIGNAL' of default interface scope. */
		void raiseREADY_SIGNAL();
		/*! Raises the in event 'READY_RESET' of default interface scope. */
		void raiseREADY_RESET();
		/*! Raises the in event 'ERROR_SIGNAL' of default interface scope. */
		void raiseERROR_SIGNAL();
		
		
		/*! Gets the value of the variable 'calibrated' that is defined in the default interface scope. */
		bool getCalibrated() const noexcept;
		/*! Sets the value of the variable 'calibrated' that is defined in the default interface scope. */
		void setCalibrated(bool calibrated) noexcept;
		/*! Gets the value of the variable 'isEStop1High' that is defined in the default interface scope. */
		bool getIsEStop1High() const noexcept;
		/*! Sets the value of the variable 'isEStop1High' that is defined in the default interface scope. */
		void setIsEStop1High(bool isEStop1High) noexcept;
		/*! Gets the value of the variable 'isEStop2High' that is defined in the default interface scope. */
		bool getIsEStop2High() const noexcept;
		/*! Sets the value of the variable 'isEStop2High' that is defined in the default interface scope. */
		void setIsEStop2High(bool isEStop2High) noexcept;
		/*! Gets the value of the variable 'eStopActive' that is defined in the default interface scope. */
		bool getEStopActive() const noexcept;
		/*! Sets the value of the variable 'eStopActive' that is defined in the default interface scope. */
		void setEStopActive(bool eStopActive) noexcept;
		/*! Gets the value of the variable 'AReferenceValue' that is defined in the default interface scope. */
		sc::integer getAReferenceValue() const noexcept;
		/*! Sets the value of the variable 'AReferenceValue' that is defined in the default interface scope. */
		void setAReferenceValue(sc::integer AReferenceValue) noexcept;
		/*! Gets the value of the variable 'BReferenceValue' that is defined in the default interface scope. */
		sc::integer getBReferenceValue() const noexcept;
		/*! Sets the value of the variable 'BReferenceValue' that is defined in the default interface scope. */
		void setBReferenceValue(sc::integer BReferenceValue) noexcept;
		/*! Gets the value of the variable 'CReferenceValue' that is defined in the default interface scope. */
		sc::integer getCReferenceValue() const noexcept;
		/*! Sets the value of the variable 'CReferenceValue' that is defined in the default interface scope. */
		void setCReferenceValue(sc::integer CReferenceValue) noexcept;
		/*! Gets the value of the variable 'ASampleCount' that is defined in the default interface scope. */
		sc::integer getASampleCount() const noexcept;
		/*! Sets the value of the variable 'ASampleCount' that is defined in the default interface scope. */
		void setASampleCount(sc::integer ASampleCount) noexcept;
		/*! Gets the value of the variable 'BSampleCount' that is defined in the default interface scope. */
		sc::integer getBSampleCount() const noexcept;
		/*! Sets the value of the variable 'BSampleCount' that is defined in the default interface scope. */
		void setBSampleCount(sc::integer BSampleCount) noexcept;
		/*! Gets the value of the variable 'CSampleCount' that is defined in the default interface scope. */
		sc::integer getCSampleCount() const noexcept;
		/*! Sets the value of the variable 'CSampleCount' that is defined in the default interface scope. */
		void setCSampleCount(sc::integer CSampleCount) noexcept;
		/*! Gets the value of the variable 'currentValue' that is defined in the default interface scope. */
		sc::integer getCurrentValue() const noexcept;
		/*! Sets the value of the variable 'currentValue' that is defined in the default interface scope. */
		void setCurrentValue(sc::integer currentValue) noexcept;
		/*! Gets the value of the variable 'heightCounter' that is defined in the default interface scope. */
		sc::integer getHeightCounter() const noexcept;
		/*! Sets the value of the variable 'heightCounter' that is defined in the default interface scope. */
		void setHeightCounter(sc::integer heightCounter) noexcept;
		/*! Gets the value of the variable 'threshholdValue' that is defined in the default interface scope. */
		sc::integer getThreshholdValue() const noexcept;
		/*! Sets the value of the variable 'threshholdValue' that is defined in the default interface scope. */
		void setThreshholdValue(sc::integer threshholdValue) noexcept;
		/*! Gets the value of the variable 'threshholdCounter' that is defined in the default interface scope. */
		sc::integer getThreshholdCounter() const noexcept;
		/*! Sets the value of the variable 'threshholdCounter' that is defined in the default interface scope. */
		void setThreshholdCounter(sc::integer threshholdCounter) noexcept;
		/*! Gets the value of the variable 'FST1RampFull' that is defined in the default interface scope. */
		bool getFST1RampFull() const noexcept;
		/*! Sets the value of the variable 'FST1RampFull' that is defined in the default interface scope. */
		void setFST1RampFull(bool FST1RampFull) noexcept;
		/*! Gets the value of the variable 'timePassed' that is defined in the default interface scope. */
		sc::integer getTimePassed() const noexcept;
		/*! Sets the value of the variable 'timePassed' that is defined in the default interface scope. */
		void setTimePassed(sc::integer timePassed) noexcept;
		/*! Gets the value of the variable 'motor1Stop' that is defined in the default interface scope. */
		sc::integer getMotor1Stop() const noexcept;
		/*! Sets the value of the variable 'motor1Stop' that is defined in the default interface scope. */
		void setMotor1Stop(sc::integer motor1Stop) noexcept;
		/*! Gets the value of the variable 'motor1Slow' that is defined in the default interface scope. */
		sc::integer getMotor1Slow() const noexcept;
		/*! Sets the value of the variable 'motor1Slow' that is defined in the default interface scope. */
		void setMotor1Slow(sc::integer motor1Slow) noexcept;
		/*! Gets the value of the variable 'motor1Forward' that is defined in the default interface scope. */
		sc::integer getMotor1Forward() const noexcept;
		/*! Sets the value of the variable 'motor1Forward' that is defined in the default interface scope. */
		void setMotor1Forward(sc::integer motor1Forward) noexcept;
		/*! Gets the value of the variable 'FST2RampFull' that is defined in the default interface scope. */
		bool getFST2RampFull() const noexcept;
		/*! Sets the value of the variable 'FST2RampFull' that is defined in the default interface scope. */
		void setFST2RampFull(bool FST2RampFull) noexcept;
		/*! Gets the value of the variable 'motor2Stop' that is defined in the default interface scope. */
		sc::integer getMotor2Stop() const noexcept;
		/*! Sets the value of the variable 'motor2Stop' that is defined in the default interface scope. */
		void setMotor2Stop(sc::integer motor2Stop) noexcept;
		/*! Gets the value of the variable 'motor2Slow' that is defined in the default interface scope. */
		sc::integer getMotor2Slow() const noexcept;
		/*! Sets the value of the variable 'motor2Slow' that is defined in the default interface scope. */
		void setMotor2Slow(sc::integer motor2Slow) noexcept;
		/*! Gets the value of the variable 'motor2Forward' that is defined in the default interface scope. */
		sc::integer getMotor2Forward() const noexcept;
		/*! Sets the value of the variable 'motor2Forward' that is defined in the default interface scope. */
		void setMotor2Forward(sc::integer motor2Forward) noexcept;
		/*! Gets the value of the variable 'eStop_lamp_active' that is defined in the default interface scope. */
		bool getEStop_lamp_active() const noexcept;
		/*! Sets the value of the variable 'eStop_lamp_active' that is defined in the default interface scope. */
		void setEStop_lamp_active(bool eStop_lamp_active) noexcept;
		/*! Gets the value of the variable 'running_lamp_active' that is defined in the default interface scope. */
		bool getRunning_lamp_active() const noexcept;
		/*! Sets the value of the variable 'running_lamp_active' that is defined in the default interface scope. */
		void setRunning_lamp_active(bool running_lamp_active) noexcept;
		/*! Gets the value of the variable 'warning_lamp_active' that is defined in the default interface scope. */
		bool getWarning_lamp_active() const noexcept;
		/*! Sets the value of the variable 'warning_lamp_active' that is defined in the default interface scope. */
		void setWarning_lamp_active(bool warning_lamp_active) noexcept;
		
		/*! Can be used by the client code to trigger a run to completion step without raising an event. */
		void triggerWithoutEvent() override;
		
		/*
		 * Functions inherited from StatemachineInterface
		 */
		 void enter() override;
		
		 void exit() override;
		
		/*!
		 * Checks if the state machine is active (until 2.4.1 this method was used for states).
		 * A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		 */
		 bool isActive() const noexcept override;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		 bool isFinal() const noexcept override;
		
		/*! 
		 * Checks if member of the state machine must be set. For example an operation callback.
		 */
		bool check() const noexcept;
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		bool isStateActive(State state) const noexcept;
		
		
		
	protected:
		
		
		std::deque<EventInstance*> incomingEventQueue;
		
		std::deque<EventInstance*> internalEventQueue;
		
		EventInstance* getNextEvent() noexcept;
		
		bool dispatchEvent(EventInstance* event) noexcept;
		
		
		
	private:
		
		bool calibrated {false};
		bool isEStop1High {false};
		bool isEStop2High {false};
		bool eStopActive {false};
		sc::integer AReferenceValue {0};
		sc::integer BReferenceValue {0};
		sc::integer CReferenceValue {0};
		sc::integer ASampleCount {0};
		sc::integer BSampleCount {0};
		sc::integer CSampleCount {0};
		sc::integer currentValue {0};
		sc::integer heightCounter {0};
		sc::integer threshholdValue {0};
		sc::integer threshholdCounter {0};
		bool FST1RampFull {false};
		sc::integer timePassed {0};
		sc::integer motor1Stop {0};
		sc::integer motor1Slow {0};
		sc::integer motor1Forward {0};
		bool FST2RampFull {false};
		sc::integer motor2Stop {0};
		sc::integer motor2Slow {0};
		sc::integer motor2Forward {0};
		bool eStop_lamp_active {false};
		bool running_lamp_active {false};
		bool warning_lamp_active {false};
		
		
		
		
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc::ushort maxOrthogonalStates {17};
		//! dimension of the state configuration vector for history states
		static const sc::ushort maxHistoryStates {9};
		
		
		
		State stateConfVector[maxOrthogonalStates];
		
		State historyVector[maxHistoryStates];
		
		
		
		bool isExecuting {false};
		sc::integer stateConfVectorPosition {0};
		
		
		
		// prototypes of all internal functions
		
		void enact_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring();
		void enact_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_A();
		void enact_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_B();
		void enact_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_C();
		void enact_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_PukPresent();
		void enact_FSM_Festo1__Sorting_RampFull();
		void enact_FSM_Festo1__Egress_Egress_Egress_Transfer();
		void enact_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle();
		void enact_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward();
		void enact_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow();
		void enact_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop();
		void enact_FSM_System_Operational();
		void enact_FSM_System_EStop();
		void enact_FSM_System_ServiceMode();
		void enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
		void enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant();
		void enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz();
		void enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off();
		void enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant();
		void enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz();
		void enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off();
		void enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant();
		void enact_FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance();
		void enact_FSM_Festo2__Ingress_Ingress_Ingress_PukPresent();
		void enact_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring();
		void enact_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent();
		void enact_FSM_Festo2__Sorting_RampFull();
		void enact_FSM_Festo2__Egress_Egress_Egress_Transfer();
		void enact_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Idle();
		void enact_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward();
		void enact_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow();
		void enact_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop();
		void enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
		void enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant();
		void enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz();
		void enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off();
		void enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant();
		void enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz();
		void enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off();
		void enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant();
		void exact_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring();
		void exact_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_PukPresent();
		void exact_FSM_Festo1__Sorting_RampFull();
		void exact_FSM_Festo1__Egress_Egress_Egress_Transfer();
		void exact_FSM_System_Operational();
		void exact_FSM_System_EStop();
		void exact_FSM_System_ServiceMode();
		void exact_FSM_Festo2__Ingress_Ingress_Ingress_Idle();
		void exact_FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance();
		void exact_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring();
		void exact_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent();
		void exact_FSM_Festo2__Sorting_RampFull();
		void exact_FSM_Festo2__Egress_Egress_Egress_Transfer();
		void enseq_FSM_Festo1_Ingress_Ingress_default();
		void enseq_FSM_Festo1_Ingress_Ingress_Ingress_Idle_default();
		void enseq_FSM_Festo1_Ingress_Ingress_Ingress_PukPresent_default();
		void enseq_FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance_default();
		void enseq_FSM_Festo1_Ingress_Paused_default();
		void enseq_FSM_Festo1_Ingress_E_STOP_default();
		void enseq_FSM_Festo1_Ingress_Start_default();
		void enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_default();
		void enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Idle_default();
		void enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_default();
		void enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM__0_default();
		void enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_A_default();
		void enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_B_default();
		void enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_C_default();
		void enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_Error_default();
		void enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_Evaluate_default();
		void enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM__final__default();
		void enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_PukPresent_default();
		void enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_PukExpected_default();
		void enseq_FSM_Festo1_HeightMeasurement_Paused_default();
		void enseq_FSM_Festo1_HeightMeasurement_E_STOP_default();
		void enseq_FSM_Festo1_HeightMeasurement_Start_default();
		void enseq_FSM_Festo1__Sorting_Sorting_default();
		void enseq_FSM_Festo1__Sorting_Sorting_Sorting_Idle_default();
		void enseq_FSM_Festo1__Sorting_Sorting_Sorting_MetalMeasurement_default();
		void enseq_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent_default();
		void enseq_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected_default();
		void enseq_FSM_Festo1__Sorting_RampFull_default();
		void enseq_FSM_Festo1__Sorting_Paused_default();
		void enseq_FSM_Festo1__Sorting_E_STOP_default();
		void enseq_FSM_Festo1__Sorting_Start_default();
		void enseq_FSM_Festo1__Egress_Egress_default();
		void enseq_FSM_Festo1__Egress_Egress_Egress_IDLE_default();
		void enseq_FSM_Festo1__Egress_Egress_Egress_PukPresent_default();
		void enseq_FSM_Festo1__Egress_Egress_Egress_Transfer_default();
		void enseq_FSM_Festo1__Egress_Egress_Egress_PukExpected_default();
		void enseq_FSM_Festo1__Egress_Paused_default();
		void enseq_FSM_Festo1__Egress_E_STOP_default();
		void enseq_FSM_Festo1__Egress_Start_default();
		void enseq_FSM_QualityGate__Motor_SystemMotor_default();
		void enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle_default();
		void enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_default();
		void enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_default();
		void enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_default();
		void enseq_FSM_System_Operational_default();
		void enseq_FSM_System_EStop_default();
		void enseq_FSM_System_EStop_EStop_AwaitingEStopResolve_default();
		void enseq_FSM_System_EStop_EStop__final__default();
		void enseq_FSM_System_Start_default();
		void enseq_FSM_System_Ready_default();
		void enseq_FSM_System_ServiceMode_default();
		void enseq_FSM_Festo1_Signaling_FSM_LAMP_default();
		void enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_default();
		void enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_default();
		void enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_default();
		void enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz_default();
		void enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_default();
		void enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_default();
		void enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz_default();
		void enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_default();
		void enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_default();
		void enseq_FSM_Festo2__Ingress_Ingress_default();
		void enseq_FSM_Festo2__Ingress_Ingress_Ingress_Idle_default();
		void enseq_FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance_default();
		void enseq_FSM_Festo2__Ingress_Ingress_Ingress_PukPresent_default();
		void enseq_FSM_Festo2__Ingress_Ingress_Ingress_PukExpected_default();
		void enseq_FSM_Festo2__Ingress_E_STOP_default();
		void enseq_FSM_Festo2__Ingress_Paused_default();
		void enseq_FSM_Festo2__Ingress_Starting_default();
		void enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_default();
		void enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle_default();
		void enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring_default();
		void enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent_default();
		void enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukExpected_default();
		void enseq_FSM_Festo2__HeightMeasurement_Paused_default();
		void enseq_FSM_Festo2__HeightMeasurement_E_STOP_default();
		void enseq_FSM_Festo2__HeightMeasurement_Start_default();
		void enseq_FSM_Festo2__Sorting_Sorting_default();
		void enseq_FSM_Festo2__Sorting_Sorting_Sorting_Idle_default();
		void enseq_FSM_Festo2__Sorting_Sorting_Sorting_MetalMeasurement_default();
		void enseq_FSM_Festo2__Sorting_Sorting_Sorting_PukPresent_default();
		void enseq_FSM_Festo2__Sorting_Sorting_Sorting_PukExpected_default();
		void enseq_FSM_Festo2__Sorting_RampFull_default();
		void enseq_FSM_Festo2__Sorting_Paused_default();
		void enseq_FSM_Festo2__Sorting_E_STOP_default();
		void enseq_FSM_Festo2__Sorting_Start_default();
		void enseq_FSM_Festo2__Egress_Egress_default();
		void enseq_FSM_Festo2__Egress_Egress_Egress_IDLE_default();
		void enseq_FSM_Festo2__Egress_Egress_Egress_PukPresent_default();
		void enseq_FSM_Festo2__Egress_Egress_Egress_Transfer_default();
		void enseq_FSM_Festo2__Egress_Egress_Egress_PukExpected_default();
		void enseq_FSM_Festo2__Egress_Paused_default();
		void enseq_FSM_Festo2__Egress_E_STOP_default();
		void enseq_FSM_Festo2__Egress_Start_default();
		void enseq_FSM_Festo2__Motor_SystemMotor_default();
		void enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Idle_default();
		void enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward_default();
		void enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow_default();
		void enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop_default();
		void enseq_FSM_Festo2__Signaling_FSM_LAMP_default();
		void enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_default();
		void enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_default();
		void enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_default();
		void enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz_default();
		void enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_default();
		void enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_default();
		void enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz_default();
		void enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_default();
		void enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_default();
		void enseq_FSM_Festo1_Ingress_default();
		void enseq_FSM_Festo1_Ingress_Ingress_Ingress_default();
		void shenseq_FSM_Festo1_Ingress_Ingress_Ingress();
		void enseq_FSM_Festo1_HeightMeasurement_default();
		void enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_default();
		void shenseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s();
		void enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_default();
		void shenseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM();
		void enseq_FSM_Festo1__Sorting_default();
		void enseq_FSM_Festo1__Sorting_Sorting_Sorting_default();
		void shenseq_FSM_Festo1__Sorting_Sorting_Sorting();
		void enseq_FSM_Festo1__Egress_default();
		void enseq_FSM_Festo1__Egress_Egress_Egress_default();
		void shenseq_FSM_Festo1__Egress_Egress_Egress();
		void enseq_FSM_QualityGate__Motor_default();
		void enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_default();
		void enseq_FSM_System_default();
		void enseq_FSM_System_EStop_EStop_default();
		void enseq_FSM_Festo1_Signaling_default();
		void enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_default();
		void enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_default();
		void enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_default();
		void enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_default();
		void enseq_FSM_Festo2__Ingress_default();
		void enseq_FSM_Festo2__Ingress_Ingress_Ingress_default();
		void shenseq_FSM_Festo2__Ingress_Ingress_Ingress();
		void enseq_FSM_Festo2__HeightMeasurement_default();
		void enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_default();
		void shenseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement();
		void enseq_FSM_Festo2__Sorting_default();
		void enseq_FSM_Festo2__Sorting_Sorting_Sorting_default();
		void shenseq_FSM_Festo2__Sorting_Sorting_Sorting();
		void enseq_FSM_Festo2__Egress_default();
		void enseq_FSM_Festo2__Egress_Egress_Egress_default();
		void shenseq_FSM_Festo2__Egress_Egress_Egress();
		void enseq_FSM_Festo2__Motor_default();
		void enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_default();
		void enseq_FSM_Festo2__Signaling_default();
		void enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_default();
		void enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_default();
		void enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_default();
		void enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_default();
		void exseq_FSM_Festo1_Ingress_Ingress();
		void exseq_FSM_Festo1_Ingress_Ingress_Ingress_Idle();
		void exseq_FSM_Festo1_Ingress_Ingress_Ingress_PukPresent();
		void exseq_FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance();
		void exseq_FSM_Festo1_Ingress_Paused();
		void exseq_FSM_Festo1_Ingress_E_STOP();
		void exseq_FSM_Festo1_Ingress_Start();
		void exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement();
		void exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Idle();
		void exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring();
		void exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM__0();
		void exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_A();
		void exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_B();
		void exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_C();
		void exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_Error();
		void exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_Evaluate();
		void exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM__final_();
		void exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_PukPresent();
		void exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_PukExpected();
		void exseq_FSM_Festo1_HeightMeasurement_Paused();
		void exseq_FSM_Festo1_HeightMeasurement_E_STOP();
		void exseq_FSM_Festo1_HeightMeasurement_Start();
		void exseq_FSM_Festo1__Sorting_Sorting();
		void exseq_FSM_Festo1__Sorting_Sorting_Sorting_Idle();
		void exseq_FSM_Festo1__Sorting_Sorting_Sorting_MetalMeasurement();
		void exseq_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent();
		void exseq_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected();
		void exseq_FSM_Festo1__Sorting_RampFull();
		void exseq_FSM_Festo1__Sorting_Paused();
		void exseq_FSM_Festo1__Sorting_E_STOP();
		void exseq_FSM_Festo1__Sorting_Start();
		void exseq_FSM_Festo1__Egress_Egress();
		void exseq_FSM_Festo1__Egress_Egress_Egress_IDLE();
		void exseq_FSM_Festo1__Egress_Egress_Egress_PukPresent();
		void exseq_FSM_Festo1__Egress_Egress_Egress_Transfer();
		void exseq_FSM_Festo1__Egress_Egress_Egress_PukExpected();
		void exseq_FSM_Festo1__Egress_Paused();
		void exseq_FSM_Festo1__Egress_E_STOP();
		void exseq_FSM_Festo1__Egress_Start();
		void exseq_FSM_QualityGate__Motor_SystemMotor();
		void exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle();
		void exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward();
		void exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow();
		void exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop();
		void exseq_FSM_System_Operational();
		void exseq_FSM_System_EStop();
		void exseq_FSM_System_EStop_EStop_AwaitingEStopResolve();
		void exseq_FSM_System_EStop_EStop__final_();
		void exseq_FSM_System_Start();
		void exseq_FSM_System_Ready();
		void exseq_FSM_System_ServiceMode();
		void exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
		void exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant();
		void exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz();
		void exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off();
		void exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant();
		void exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz();
		void exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off();
		void exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant();
		void exseq_FSM_Festo2__Ingress_Ingress();
		void exseq_FSM_Festo2__Ingress_Ingress_Ingress_Idle();
		void exseq_FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance();
		void exseq_FSM_Festo2__Ingress_Ingress_Ingress_PukPresent();
		void exseq_FSM_Festo2__Ingress_Ingress_Ingress_PukExpected();
		void exseq_FSM_Festo2__Ingress_E_STOP();
		void exseq_FSM_Festo2__Ingress_Paused();
		void exseq_FSM_Festo2__Ingress_Starting();
		void exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement();
		void exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle();
		void exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring();
		void exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent();
		void exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukExpected();
		void exseq_FSM_Festo2__HeightMeasurement_Paused();
		void exseq_FSM_Festo2__HeightMeasurement_E_STOP();
		void exseq_FSM_Festo2__HeightMeasurement_Start();
		void exseq_FSM_Festo2__Sorting_Sorting();
		void exseq_FSM_Festo2__Sorting_Sorting_Sorting_Idle();
		void exseq_FSM_Festo2__Sorting_Sorting_Sorting_MetalMeasurement();
		void exseq_FSM_Festo2__Sorting_Sorting_Sorting_PukPresent();
		void exseq_FSM_Festo2__Sorting_Sorting_Sorting_PukExpected();
		void exseq_FSM_Festo2__Sorting_RampFull();
		void exseq_FSM_Festo2__Sorting_Paused();
		void exseq_FSM_Festo2__Sorting_E_STOP();
		void exseq_FSM_Festo2__Sorting_Start();
		void exseq_FSM_Festo2__Egress_Egress();
		void exseq_FSM_Festo2__Egress_Egress_Egress_IDLE();
		void exseq_FSM_Festo2__Egress_Egress_Egress_PukPresent();
		void exseq_FSM_Festo2__Egress_Egress_Egress_Transfer();
		void exseq_FSM_Festo2__Egress_Egress_Egress_PukExpected();
		void exseq_FSM_Festo2__Egress_Paused();
		void exseq_FSM_Festo2__Egress_E_STOP();
		void exseq_FSM_Festo2__Egress_Start();
		void exseq_FSM_Festo2__Motor_SystemMotor();
		void exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Idle();
		void exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward();
		void exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow();
		void exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop();
		void exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
		void exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant();
		void exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz();
		void exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off();
		void exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant();
		void exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz();
		void exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off();
		void exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant();
		void exseq_FSM_Festo1_Ingress();
		void exseq_FSM_Festo1_Ingress_Ingress_Ingress();
		void exseq_FSM_Festo1_HeightMeasurement();
		void exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s();
		void exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM();
		void exseq_FSM_Festo1__Sorting();
		void exseq_FSM_Festo1__Sorting_Sorting_Sorting();
		void exseq_FSM_Festo1__Egress();
		void exseq_FSM_Festo1__Egress_Egress_Egress();
		void exseq_FSM_QualityGate__Motor();
		void exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor();
		void exseq_FSM_System();
		void exseq_FSM_System_EStop_EStop();
		void exseq_FSM_Festo1_Signaling();
		void exseq_FSM_Festo2__Ingress();
		void exseq_FSM_Festo2__Ingress_Ingress_Ingress();
		void exseq_FSM_Festo2__HeightMeasurement();
		void exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement();
		void exseq_FSM_Festo2__Sorting();
		void exseq_FSM_Festo2__Sorting_Sorting_Sorting();
		void exseq_FSM_Festo2__Egress();
		void exseq_FSM_Festo2__Egress_Egress_Egress();
		void exseq_FSM_Festo2__Motor();
		void exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor();
		void exseq_FSM_Festo2__Signaling();
		void react_FSM_Festo1_Ingress_Ingress_Ingress__entry_Default();
		void react_FSM_Festo1_Ingress_Ingress_Ingress_History();
		void react_FSM_Festo1_Ingress__entry_Default();
		void react_FSM_Festo1_HeightMeasurement_HeightMeasurement_s__entry_Default();
		void react_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM__entry_Default();
		void react_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_History();
		void react_FSM_Festo1_HeightMeasurement_HeightMeasurement_s_History();
		void react_FSM_Festo1_HeightMeasurement__entry_Default();
		void react_FSM_Festo1__Sorting_Sorting_Sorting_History();
		void react_FSM_Festo1__Sorting_Sorting_Sorting__entry_Default();
		void react_FSM_Festo1__Sorting__entry_Default();
		void react_FSM_Festo1__Egress_Egress_Egress__entry_Default();
		void react_FSM_Festo1__Egress_Egress_Egress_History();
		void react_FSM_Festo1__Egress__entry_Default();
		void react_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor__entry_Default();
		void react_FSM_QualityGate__Motor__entry_Default();
		void react_FSM_System_EStop_EStop__entry_Default();
		void react_FSM_System__entry_Default();
		void react_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green__entry_Default();
		void react_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow__entry_Default();
		void react_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red__entry_Default();
		void react_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP__entry_Default();
		void react_FSM_Festo1_Signaling__entry_Default();
		void react_FSM_Festo2__Ingress_Ingress_Ingress__entry_Default();
		void react_FSM_Festo2__Ingress_Ingress_Ingress_History();
		void react_FSM_Festo2__Ingress__entry_Default();
		void react_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement__entry_Default();
		void react_FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_History();
		void react_FSM_Festo2__HeightMeasurement__entry_Default();
		void react_FSM_Festo2__Sorting_Sorting_Sorting_History();
		void react_FSM_Festo2__Sorting_Sorting_Sorting__entry_Default();
		void react_FSM_Festo2__Sorting__entry_Default();
		void react_FSM_Festo2__Egress_Egress_Egress__entry_Default();
		void react_FSM_Festo2__Egress_Egress_Egress_History();
		void react_FSM_Festo2__Egress__entry_Default();
		void react_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor__entry_Default();
		void react_FSM_Festo2__Motor__entry_Default();
		void react_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green__entry_Default();
		void react_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow__entry_Default();
		void react_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red__entry_Default();
		void react_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP__entry_Default();
		void react_FSM_Festo2__Signaling__entry_Default();
		sc::integer react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Ingress_Ingress_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Ingress_Ingress_Ingress_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Ingress_Ingress_Ingress_PukPresent_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Ingress_Paused_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Ingress_E_STOP_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Ingress_Start_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_HeightMeasurement_HeightMeasurement_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM__0_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_A_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_B_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_C_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_Error_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM_Evaluate_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_HeightMeasurement_HeightMeasurement_s_Measuring_HeightFSM__final__react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_HeightMeasurement_HeightMeasurement_s_PukPresent_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_HeightMeasurement_HeightMeasurement_s_PukExpected_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_HeightMeasurement_Paused_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_HeightMeasurement_E_STOP_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_HeightMeasurement_Start_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_Sorting_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_Sorting_Sorting_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_Sorting_Sorting_MetalMeasurement_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_Sorting_Sorting_PukPresent_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_Sorting_Sorting_PukExpected_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_RampFull_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_Paused_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_E_STOP_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Sorting_Start_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_Egress_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_Egress_Egress_IDLE_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_Egress_Egress_PukPresent_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_Egress_Egress_Transfer_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_Egress_Egress_PukExpected_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_Paused_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_E_STOP_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1__Egress_Start_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Motor_SystemMotor_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_react(const sc::integer transitioned_before);
		sc::integer FSM_System_Operational_react(const sc::integer transitioned_before);
		sc::integer FSM_System_EStop_react(const sc::integer transitioned_before);
		sc::integer FSM_System_EStop_EStop_AwaitingEStopResolve_react(const sc::integer transitioned_before);
		sc::integer FSM_System_EStop_EStop__final__react(const sc::integer transitioned_before);
		sc::integer FSM_System_Start_react(const sc::integer transitioned_before);
		sc::integer FSM_System_Ready_react(const sc::integer transitioned_before);
		sc::integer FSM_System_ServiceMode_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Signaling_FSM_LAMP_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Ingress_Ingress_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Ingress_Ingress_Ingress_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Ingress_Ingress_Ingress_PukPresent_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Ingress_Ingress_Ingress_PukExpected_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Ingress_E_STOP_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Ingress_Paused_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Ingress_Starting_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_HeightMeasurement_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukExpected_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_Paused_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_E_STOP_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__HeightMeasurement_Start_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_Sorting_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_Sorting_Sorting_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_Sorting_Sorting_MetalMeasurement_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_Sorting_Sorting_PukPresent_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_Sorting_Sorting_PukExpected_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_RampFull_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_Paused_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_E_STOP_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Sorting_Start_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Egress_Egress_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Egress_Egress_Egress_IDLE_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Egress_Egress_Egress_PukPresent_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Egress_Egress_Egress_Transfer_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Egress_Egress_Egress_PukExpected_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Egress_Paused_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Egress_E_STOP_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Egress_Start_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Motor_SystemMotor_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Signaling_FSM_LAMP_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_react(const sc::integer transitioned_before);
		sc::integer FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_react(const sc::integer transitioned_before);
		void clearInEvents() noexcept;
		void clearInternalEvents() noexcept;
		void microStep();
		void runCycle();
		
		
		
		/*! Observable for event 'SYSTEM_OPERATIONAL_IN' of default interface scope. */
		sc::rx::Observable<void> SYSTEM_OPERATIONAL_IN_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'SYSTEM_OPERATIONAL_OUT' of default interface scope. */
		sc::rx::Observable<void> SYSTEM_OPERATIONAL_OUT_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'SYSTEM_SERVICE_IN' of default interface scope. */
		sc::rx::Observable<void> SYSTEM_SERVICE_IN_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'SYSTEM_SERVICE_OUT' of default interface scope. */
		sc::rx::Observable<void> SYSTEM_SERVICE_OUT_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'ESTOP_RECEIVED' of default interface scope. */
		sc::rx::Observable<void> ESTOP_RECEIVED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'ESTOP_CLEARED' of default interface scope. */
		sc::rx::Observable<void> ESTOP_CLEARED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'SYSTEM_RUNNING' of default interface scope. */
		sc::rx::Observable<void> SYSTEM_RUNNING_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'SYSTEM_STOPPED' of default interface scope. */
		sc::rx::Observable<void> SYSTEM_STOPPED_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'ESTOP_1_HIGH' of default interface scope is active. */
		bool ESTOP_1_HIGH_raised {false};
		
		/*! Indicates event 'ESTOP_1_LOW' of default interface scope is active. */
		bool ESTOP_1_LOW_raised {false};
		
		/*! Indicates event 'ESTOP_2_HIGH' of default interface scope is active. */
		bool ESTOP_2_HIGH_raised {false};
		
		/*! Indicates event 'ESTOP_2_LOW' of default interface scope is active. */
		bool ESTOP_2_LOW_raised {false};
		
		/*! Observable for event 'FST_1_POSITION_INGRESS_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_POSITION_INGRESS_NEW_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_POSITION_INGRESS_DISTANCE_VALID' of default interface scope. */
		sc::rx::Observable<void> FST_1_POSITION_INGRESS_DISTANCE_VALID_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_POSITION_HEIGHTMEASUREMENT_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_POSITION_HEIGHTMEASUREMENT_NEW_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED' of default interface scope. */
		sc::rx::Observable<void> FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_POSITION_SORTING_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_POSITION_SORTING_NEW_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_POSITION_SORTING_PUK_EXPECTED' of default interface scope. */
		sc::rx::Observable<void> FST_1_POSITION_SORTING_PUK_EXPECTED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_POSITION_EGRESS_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_1_POSITION_EGRESS_NEW_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_POSITION_EGRESS_PUK_EXPECTED' of default interface scope. */
		sc::rx::Observable<void> FST_1_POSITION_EGRESS_PUK_EXPECTED_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'LBF_1_INTERRUPTED' of default interface scope is active. */
		bool LBF_1_INTERRUPTED_raised {false};
		
		/*! Indicates event 'LBF_1_OPEN' of default interface scope is active. */
		bool LBF_1_OPEN_raised {false};
		
		/*! Observable for event 'FST_1_PUK_ENTRY_HeightMeasurement' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_ENTRY_HeightMeasurement_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_INGRESS_IN' of default interface scope. */
		sc::rx::Observable<void> FST_1_INGRESS_IN_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_INGRESS_OUT' of default interface scope. */
		sc::rx::Observable<void> FST_1_INGRESS_OUT_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_PUK_DISTANCE_VALID_INGRESS' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_DISTANCE_VALID_INGRESS_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'HS_1_SAMPLE' of default interface scope is active. */
		bool HS_1_SAMPLE_raised {false};
		
		/*! Indicates event 'HS_1_SAMPLING_DONE' of default interface scope is active. */
		bool HS_1_SAMPLING_DONE_raised {false};
		
		/*! Observable for event 'FST_1_PUK_ENTRY_SORTING' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_ENTRY_SORTING_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_HeightMeasurement_Counter' of default interface scope. */
		sc::rx::Observable<void> FST_1_HeightMeasurement_Counter_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_PUK_HEIGHT_IS_VALID' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_HEIGHT_IS_VALID_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_PUK_HEIGHT_IS_NOT_VALID' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_HEIGHT_IS_NOT_VALID_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'LBM_1_INTERRUPTED' of default interface scope is active. */
		bool LBM_1_INTERRUPTED_raised {false};
		
		/*! Indicates event 'LBM_1_OPEN' of default interface scope is active. */
		bool LBM_1_OPEN_raised {false};
		
		/*! Indicates event 'MS_1_TRUE' of default interface scope is active. */
		bool MS_1_TRUE_raised {false};
		
		/*! Indicates event 'LBR_1_INTERRUPTED' of default interface scope is active. */
		bool LBR_1_INTERRUPTED_raised {false};
		
		/*! Indicates event 'LBR_1_OPEN' of default interface scope is active. */
		bool LBR_1_OPEN_raised {false};
		
		/*! Observable for event 'FST_1_PUK_DESIRED' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_DESIRED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_PUK_NOT_DESIRED' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_NOT_DESIRED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_PUK_ENTRY_EGRESS' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_ENTRY_EGRESS_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_PUK_EJECTOR_DISTANCE_VALID' of default interface scope. */
		sc::rx::Observable<void> FST_1_PUK_EJECTOR_DISTANCE_VALID_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_SORTING_MODULE_ACTIVE' of default interface scope. */
		sc::rx::Observable<void> FST_1_SORTING_MODULE_ACTIVE_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_1_SORTING_MODULE_RESTING' of default interface scope. */
		sc::rx::Observable<void> FST_1_SORTING_MODULE_RESTING_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'LBE_1_OPEN' of default interface scope is active. */
		bool LBE_1_OPEN_raised {false};
		
		/*! Indicates event 'LBE_1_INTERRUPTED' of default interface scope is active. */
		bool LBE_1_INTERRUPTED_raised {false};
		
		/*! Observable for event 'MOTOR_1_STOP' of default interface scope. */
		sc::rx::Observable<void> MOTOR_1_STOP_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'MOTOR_1_FAST' of default interface scope. */
		sc::rx::Observable<void> MOTOR_1_FAST_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'MOTOR_1_SLOW' of default interface scope. */
		sc::rx::Observable<void> MOTOR_1_SLOW_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'BGS_1_LONG_PRESSED' of default interface scope is active. */
		bool BGS_1_LONG_PRESSED_raised {false};
		
		/*! Indicates event 'BGS_1_INTERRUPTED' of default interface scope is active. */
		bool BGS_1_INTERRUPTED_raised {false};
		
		/*! Indicates event 'BRS_1_INTERRUPTED' of default interface scope is active. */
		bool BRS_1_INTERRUPTED_raised {false};
		
		/*! Indicates event 'BGR_1_INTERRUPTED' of default interface scope is active. */
		bool BGR_1_INTERRUPTED_raised {false};
		
		/*! Observable for event 'LG1_ON' of default interface scope. */
		sc::rx::Observable<void> LG1_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LG1_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void> LG1_BLINKING_1HZ_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LG1_OFF' of default interface scope. */
		sc::rx::Observable<void> LG1_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LY1_ON' of default interface scope. */
		sc::rx::Observable<void> LY1_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LY1_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void> LY1_BLINKING_1HZ_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LY1_OFF' of default interface scope. */
		sc::rx::Observable<void> LY1_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LR1_ON' of default interface scope. */
		sc::rx::Observable<void> LR1_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LR1_OFF' of default interface scope. */
		sc::rx::Observable<void> LR1_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_POSITION_INGRESS_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_POSITION_INGRESS_NEW_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_POSITION_INGRESS_DISTANCE_VALID' of default interface scope. */
		sc::rx::Observable<void> FST_2_POSITION_INGRESS_DISTANCE_VALID_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_POSITION_INGRESS_EXPECTED' of default interface scope. */
		sc::rx::Observable<void> FST_2_POSITION_INGRESS_EXPECTED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_POSITION_HEIGHTMEASUREMENT_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_POSITION_HEIGHTMEASUREMENT_NEW_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED' of default interface scope. */
		sc::rx::Observable<void> FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_POSITION_SORTING_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_POSITION_SORTING_NEW_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_POSITION_SORTING_PUK_EXPECTED' of default interface scope. */
		sc::rx::Observable<void> FST_2_POSITION_SORTING_PUK_EXPECTED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_POSITION_EGRESS_NEW_PUK' of default interface scope. */
		sc::rx::Observable<void> FST_2_POSITION_EGRESS_NEW_PUK_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_POSITION_EGRESS_PUK_EXPECTED' of default interface scope. */
		sc::rx::Observable<void> FST_2_POSITION_EGRESS_PUK_EXPECTED_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'LBF_2_INTERRUPTED' of default interface scope is active. */
		bool LBF_2_INTERRUPTED_raised {false};
		
		/*! Indicates event 'LBF_2_OPEN' of default interface scope is active. */
		bool LBF_2_OPEN_raised {false};
		
		/*! Observable for event 'FST_2_PUK_ENTRY_HeightMeasurement' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_ENTRY_HeightMeasurement_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_INGRESS_IN' of default interface scope. */
		sc::rx::Observable<void> FST_2_INGRESS_IN_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_INGRESS_OUT' of default interface scope. */
		sc::rx::Observable<void> FST_2_INGRESS_OUT_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_PUK_DISTANCE_VALID_INGRESS' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_DISTANCE_VALID_INGRESS_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_YELLOW_LAMP_ON' of default interface scope. */
		sc::rx::Observable<void> FST_2_YELLOW_LAMP_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_YELLOW_LAMP_OFF' of default interface scope. */
		sc::rx::Observable<void> FST_2_YELLOW_LAMP_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'HS_2_SAMPLE' of default interface scope is active. */
		bool HS_2_SAMPLE_raised {false};
		
		/*! Indicates event 'HS_2_SAMPLING_DONE' of default interface scope is active. */
		bool HS_2_SAMPLING_DONE_raised {false};
		
		/*! Observable for event 'FST_2_PUK_ENTRY_SORTING' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_ENTRY_SORTING_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'LBM_2_INTERRUPTED' of default interface scope is active. */
		bool LBM_2_INTERRUPTED_raised {false};
		
		/*! Indicates event 'LBM_2_OPEN' of default interface scope is active. */
		bool LBM_2_OPEN_raised {false};
		
		/*! Indicates event 'MS_2_TRUE' of default interface scope is active. */
		bool MS_2_TRUE_raised {false};
		
		/*! Indicates event 'LBR_2_INTERRUPTED' of default interface scope is active. */
		bool LBR_2_INTERRUPTED_raised {false};
		
		/*! Indicates event 'LBR_2_OPEN' of default interface scope is active. */
		bool LBR_2_OPEN_raised {false};
		
		/*! Observable for event 'FST_2_PUK_DESIRED' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_DESIRED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_PUK_NOT_DESIRED' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_NOT_DESIRED_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_PUK_ENTRY_EGRESS' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_ENTRY_EGRESS_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_PUK_EJECTOR_DISTANCE_VALID' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_EJECTOR_DISTANCE_VALID_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_SORTING_MODULE_ACTIVE' of default interface scope. */
		sc::rx::Observable<void> FST_2_SORTING_MODULE_ACTIVE_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'FST_2_SORTING_MODULE_RESTING' of default interface scope. */
		sc::rx::Observable<void> FST_2_SORTING_MODULE_RESTING_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'LBE_2_OPEN' of default interface scope is active. */
		bool LBE_2_OPEN_raised {false};
		
		/*! Indicates event 'LBE_2_INTERRUPTED' of default interface scope is active. */
		bool LBE_2_INTERRUPTED_raised {false};
		
		/*! Observable for event 'FST_2_PUK_ENTRY_INGRESS' of default interface scope. */
		sc::rx::Observable<void> FST_2_PUK_ENTRY_INGRESS_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'MOTOR_2_STOP' of default interface scope. */
		sc::rx::Observable<void> MOTOR_2_STOP_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'MOTOR_2_FAST' of default interface scope. */
		sc::rx::Observable<void> MOTOR_2_FAST_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'MOTOR_2_SLOW' of default interface scope. */
		sc::rx::Observable<void> MOTOR_2_SLOW_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'BGS_2_LONG_PRESSED' of default interface scope is active. */
		bool BGS_2_LONG_PRESSED_raised {false};
		
		/*! Indicates event 'BGS_2_INTERRUPTED' of default interface scope is active. */
		bool BGS_2_INTERRUPTED_raised {false};
		
		/*! Indicates event 'BRS_2_INTERRUPTED' of default interface scope is active. */
		bool BRS_2_INTERRUPTED_raised {false};
		
		/*! Indicates event 'BGR_2_INTERRUPTED' of default interface scope is active. */
		bool BGR_2_INTERRUPTED_raised {false};
		
		/*! Observable for event 'LG2_ON' of default interface scope. */
		sc::rx::Observable<void> LG2_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LG2_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void> LG2_BLINKING_1HZ_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LG2_OFF' of default interface scope. */
		sc::rx::Observable<void> LG2_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LY2_ON' of default interface scope. */
		sc::rx::Observable<void> LY2_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LY2_BLINKING_1HZ' of default interface scope. */
		sc::rx::Observable<void> LY2_BLINKING_1HZ_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LY2_OFF' of default interface scope. */
		sc::rx::Observable<void> LY2_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LR2_ON' of default interface scope. */
		sc::rx::Observable<void> LR2_ON_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LR2_OFF' of default interface scope. */
		sc::rx::Observable<void> LR2_OFF_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'ESTOP_SIGNAL' of default interface scope is active. */
		bool ESTOP_SIGNAL_raised {false};
		
		/*! Indicates event 'ESTOP_SIGNAL_RESET' of default interface scope is active. */
		bool ESTOP_SIGNAL_RESET_raised {false};
		
		/*! Indicates event 'RUNNING_SIGNAL' of default interface scope is active. */
		bool RUNNING_SIGNAL_raised {false};
		
		/*! Indicates event 'RUNNING_SIGNAL_RESET' of default interface scope is active. */
		bool RUNNING_SIGNAL_RESET_raised {false};
		
		/*! Indicates event 'WARNING_SIGNAL' of default interface scope is active. */
		bool WARNING_SIGNAL_raised {false};
		
		/*! Indicates event 'WARNING_SIGNAL_RESET' of default interface scope is active. */
		bool WARNING_SIGNAL_RESET_raised {false};
		
		/*! Indicates event 'READY_SIGNAL' of default interface scope is active. */
		bool READY_SIGNAL_raised {false};
		
		/*! Indicates event 'READY_RESET' of default interface scope is active. */
		bool READY_RESET_raised {false};
		
		/*! Indicates event 'ERROR_SIGNAL' of default interface scope is active. */
		bool ERROR_SIGNAL_raised {false};
		
		/*! Indicates event 'local_SYSTEM_OPERATIONAL_OUT' of internal scope is active. */
		bool local_SYSTEM_OPERATIONAL_OUT_raised {false};
		
		/*! Raises the out event 'local_SYSTEM_OPERATIONAL_OUT' of internal scope as a local event. */
		void raiseLocal_SYSTEM_OPERATIONAL_OUT();
		
		/*! Indicates event 'local_ESTOP_RECEIVED' of internal scope is active. */
		bool local_ESTOP_RECEIVED_raised {false};
		
		/*! Raises the out event 'local_ESTOP_RECEIVED' of internal scope as a local event. */
		void raiseLocal_ESTOP_RECEIVED();
		
		/*! Indicates event 'local_FST_1_POSITION_INGRESS_DISTANCE_VALID' of internal scope is active. */
		bool local_FST_1_POSITION_INGRESS_DISTANCE_VALID_raised {false};
		
		/*! Raises the out event 'local_FST_1_POSITION_INGRESS_DISTANCE_VALID' of internal scope as a local event. */
		void raiseLocal_FST_1_POSITION_INGRESS_DISTANCE_VALID();
		
		/*! Indicates event 'local_SYSTEM_OPERATIONAL_IN' of internal scope is active. */
		bool local_SYSTEM_OPERATIONAL_IN_raised {false};
		
		/*! Raises the out event 'local_SYSTEM_OPERATIONAL_IN' of internal scope as a local event. */
		void raiseLocal_SYSTEM_OPERATIONAL_IN();
		
		/*! Indicates event 'local_ESTOP_CLEARED' of internal scope is active. */
		bool local_ESTOP_CLEARED_raised {false};
		
		/*! Raises the out event 'local_ESTOP_CLEARED' of internal scope as a local event. */
		void raiseLocal_ESTOP_CLEARED();
		
		/*! Indicates event 'local_FST_1_PUK_ENTRY_HeightMeasurement' of internal scope is active. */
		bool local_FST_1_PUK_ENTRY_HeightMeasurement_raised {false};
		
		/*! Raises the out event 'local_FST_1_PUK_ENTRY_HeightMeasurement' of internal scope as a local event. */
		void raiseLocal_FST_1_PUK_ENTRY_HeightMeasurement();
		
		/*! Indicates event 'local_FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED' of internal scope is active. */
		bool local_FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED_raised {false};
		
		/*! Raises the out event 'local_FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED' of internal scope as a local event. */
		void raiseLocal_FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED();
		
		/*! Indicates event 'local_FST_1_PUK_ENTRY_SORTING' of internal scope is active. */
		bool local_FST_1_PUK_ENTRY_SORTING_raised {false};
		
		/*! Raises the out event 'local_FST_1_PUK_ENTRY_SORTING' of internal scope as a local event. */
		void raiseLocal_FST_1_PUK_ENTRY_SORTING();
		
		/*! Indicates event 'local_FST_1_POSITION_SORTING_PUK_EXPECTED' of internal scope is active. */
		bool local_FST_1_POSITION_SORTING_PUK_EXPECTED_raised {false};
		
		/*! Raises the out event 'local_FST_1_POSITION_SORTING_PUK_EXPECTED' of internal scope as a local event. */
		void raiseLocal_FST_1_POSITION_SORTING_PUK_EXPECTED();
		
		/*! Indicates event 'local_FST_1_PUK_ENTRY_EGRESS' of internal scope is active. */
		bool local_FST_1_PUK_ENTRY_EGRESS_raised {false};
		
		/*! Raises the out event 'local_FST_1_PUK_ENTRY_EGRESS' of internal scope as a local event. */
		void raiseLocal_FST_1_PUK_ENTRY_EGRESS();
		
		/*! Indicates event 'local_FST_1_POSITION_EGRESS_PUK_EXPECTED' of internal scope is active. */
		bool local_FST_1_POSITION_EGRESS_PUK_EXPECTED_raised {false};
		
		/*! Raises the out event 'local_FST_1_POSITION_EGRESS_PUK_EXPECTED' of internal scope as a local event. */
		void raiseLocal_FST_1_POSITION_EGRESS_PUK_EXPECTED();
		
		/*! Indicates event 'local_SYSTEM_SERVICE_IN' of internal scope is active. */
		bool local_SYSTEM_SERVICE_IN_raised {false};
		
		/*! Raises the out event 'local_SYSTEM_SERVICE_IN' of internal scope as a local event. */
		void raiseLocal_SYSTEM_SERVICE_IN();
		
		/*! Indicates event 'local_SYSTEM_SERVICE_OUT' of internal scope is active. */
		bool local_SYSTEM_SERVICE_OUT_raised {false};
		
		/*! Raises the out event 'local_SYSTEM_SERVICE_OUT' of internal scope as a local event. */
		void raiseLocal_SYSTEM_SERVICE_OUT();
		
		/*! Indicates event 'local_FST_1_INGRESS_IN' of internal scope is active. */
		bool local_FST_1_INGRESS_IN_raised {false};
		
		/*! Raises the out event 'local_FST_1_INGRESS_IN' of internal scope as a local event. */
		void raiseLocal_FST_1_INGRESS_IN();
		
		/*! Indicates event 'local_FST_1_INGRESS_OUT' of internal scope is active. */
		bool local_FST_1_INGRESS_OUT_raised {false};
		
		/*! Raises the out event 'local_FST_1_INGRESS_OUT' of internal scope as a local event. */
		void raiseLocal_FST_1_INGRESS_OUT();
		
		/*! Indicates event 'local_FST_2_PUK_ENTRY_INGRESS' of internal scope is active. */
		bool local_FST_2_PUK_ENTRY_INGRESS_raised {false};
		
		/*! Raises the out event 'local_FST_2_PUK_ENTRY_INGRESS' of internal scope as a local event. */
		void raiseLocal_FST_2_PUK_ENTRY_INGRESS();
		
		/*! Indicates event 'local_FST_2_POSITION_INGRESS_DISTANCE_VALID' of internal scope is active. */
		bool local_FST_2_POSITION_INGRESS_DISTANCE_VALID_raised {false};
		
		/*! Raises the out event 'local_FST_2_POSITION_INGRESS_DISTANCE_VALID' of internal scope as a local event. */
		void raiseLocal_FST_2_POSITION_INGRESS_DISTANCE_VALID();
		
		/*! Indicates event 'local_FST_2_POSITION_INGRESS_EXPECTED' of internal scope is active. */
		bool local_FST_2_POSITION_INGRESS_EXPECTED_raised {false};
		
		/*! Raises the out event 'local_FST_2_POSITION_INGRESS_EXPECTED' of internal scope as a local event. */
		void raiseLocal_FST_2_POSITION_INGRESS_EXPECTED();
		
		/*! Indicates event 'local_FST_2_PUK_ENTRY_HeightMeasurement' of internal scope is active. */
		bool local_FST_2_PUK_ENTRY_HeightMeasurement_raised {false};
		
		/*! Raises the out event 'local_FST_2_PUK_ENTRY_HeightMeasurement' of internal scope as a local event. */
		void raiseLocal_FST_2_PUK_ENTRY_HeightMeasurement();
		
		/*! Indicates event 'local_FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED' of internal scope is active. */
		bool local_FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED_raised {false};
		
		/*! Raises the out event 'local_FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED' of internal scope as a local event. */
		void raiseLocal_FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED();
		
		/*! Indicates event 'local_FST_2_PUK_ENTRY_SORTING' of internal scope is active. */
		bool local_FST_2_PUK_ENTRY_SORTING_raised {false};
		
		/*! Raises the out event 'local_FST_2_PUK_ENTRY_SORTING' of internal scope as a local event. */
		void raiseLocal_FST_2_PUK_ENTRY_SORTING();
		
		/*! Indicates event 'local_FST_2_POSITION_SORTING_PUK_EXPECTED' of internal scope is active. */
		bool local_FST_2_POSITION_SORTING_PUK_EXPECTED_raised {false};
		
		/*! Raises the out event 'local_FST_2_POSITION_SORTING_PUK_EXPECTED' of internal scope as a local event. */
		void raiseLocal_FST_2_POSITION_SORTING_PUK_EXPECTED();
		
		/*! Indicates event 'local_FST_2_PUK_ENTRY_EGRESS' of internal scope is active. */
		bool local_FST_2_PUK_ENTRY_EGRESS_raised {false};
		
		/*! Raises the out event 'local_FST_2_PUK_ENTRY_EGRESS' of internal scope as a local event. */
		void raiseLocal_FST_2_PUK_ENTRY_EGRESS();
		
		/*! Indicates event 'local_FST_2_POSITION_EGRESS_PUK_EXPECTED' of internal scope is active. */
		bool local_FST_2_POSITION_EGRESS_PUK_EXPECTED_raised {false};
		
		/*! Raises the out event 'local_FST_2_POSITION_EGRESS_PUK_EXPECTED' of internal scope as a local event. */
		void raiseLocal_FST_2_POSITION_EGRESS_PUK_EXPECTED();
		
		/*! Indicates event 'local_FST_2_YELLOW_LAMP_ON' of internal scope is active. */
		bool local_FST_2_YELLOW_LAMP_ON_raised {false};
		
		/*! Raises the out event 'local_FST_2_YELLOW_LAMP_ON' of internal scope as a local event. */
		void raiseLocal_FST_2_YELLOW_LAMP_ON();
		
		/*! Indicates event 'local_FST_2_YELLOW_LAMP_OFF' of internal scope is active. */
		bool local_FST_2_YELLOW_LAMP_OFF_raised {false};
		
		/*! Raises the out event 'local_FST_2_YELLOW_LAMP_OFF' of internal scope as a local event. */
		void raiseLocal_FST_2_YELLOW_LAMP_OFF();
		
		
		
};




#endif /* FSM_H_ */
