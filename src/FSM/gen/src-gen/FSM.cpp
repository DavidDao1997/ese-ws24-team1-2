/** Generated by itemis CREATE code generator. */

#include "FSM.h"

/*! \file
Implementation of the state machine 'FSM'
*/




FSM::FSM() noexcept
{
	for (sc::ushort state_vec_pos = 0; state_vec_pos < maxOrthogonalStates; ++state_vec_pos)
		stateConfVector[state_vec_pos] = FSM::State::NO_STATE;
	
	for (sc::ushort state_vec_pos = 0; state_vec_pos < maxHistoryStates; ++state_vec_pos)
		historyVector[state_vec_pos] = FSM::State::NO_STATE;
	
	clearInEvents();
	clearInternalEvents();
}

FSM::~FSM()
{
	while (!internalEventQueue.empty()) {
		auto nextEvent{internalEventQueue.front()};
		internalEventQueue.pop_front();
		delete nextEvent;
	}
	while (!incomingEventQueue.empty()) {
		auto nextEvent{incomingEventQueue.front()};
		incomingEventQueue.pop_front();
		delete nextEvent;
	}
}



FSM::EventInstance* FSM::getNextEvent() noexcept
{
	FSM::EventInstance* nextEvent = 0;

	if(!internalEventQueue.empty()) {
		nextEvent = internalEventQueue.front();
		internalEventQueue.pop_front();
	}
	else if(!incomingEventQueue.empty()) {
		nextEvent = incomingEventQueue.front();
		incomingEventQueue.pop_front();
	}
	
	return nextEvent;
	
}					


	
bool FSM::dispatchEvent(FSM::EventInstance* event) noexcept
{
	if(event == nullptr) {
		return false;
	}
								
	switch(event->eventId)
	{
		case FSM::Event::SYSTEM_OPERATIONAL_IN:
		{
			SYSTEM_OPERATIONAL_IN_raised = true;
			break;
		}
		case FSM::Event::ESTOP_1_HIGH:
		{
			ESTOP_1_HIGH_raised = true;
			break;
		}
		case FSM::Event::ESTOP_1_LOW:
		{
			ESTOP_1_LOW_raised = true;
			break;
		}
		case FSM::Event::ESTOP_2_HIGH:
		{
			ESTOP_2_HIGH_raised = true;
			break;
		}
		case FSM::Event::ESTOP_2_LOW:
		{
			ESTOP_2_LOW_raised = true;
			break;
		}
		case FSM::Event::FST_1_ERROR_SYSTEM_RESOLVED:
		{
			FST_1_ERROR_SYSTEM_RESOLVED_raised = true;
			break;
		}
		case FSM::Event::FST_1_POSITION_INGRESS_DISTANCE_VALID:
		{
			FST_1_POSITION_INGRESS_DISTANCE_VALID_raised = true;
			break;
		}
		case FSM::Event::FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED:
		{
			FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED_raised = true;
			break;
		}
		case FSM::Event::FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED:
		{
			FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED_raised = true;
			break;
		}
		case FSM::Event::FST_1_POSITION_SORTING_PUK_EXPECTED:
		{
			FST_1_POSITION_SORTING_PUK_EXPECTED_raised = true;
			break;
		}
		case FSM::Event::FST_1_POSITION_SORTING_PUK_EXPIRED:
		{
			FST_1_POSITION_SORTING_PUK_EXPIRED_raised = true;
			break;
		}
		case FSM::Event::FST_1_POSITION_DIVIDER_DISTANCE_VALID:
		{
			FST_1_POSITION_DIVIDER_DISTANCE_VALID_raised = true;
			break;
		}
		case FSM::Event::FST_1_POSITION_EGRESS_PUK_EXPECTED:
		{
			FST_1_POSITION_EGRESS_PUK_EXPECTED_raised = true;
			break;
		}
		case FSM::Event::FST_1_POSITION_EGRESS_PUK_EXPIRED:
		{
			FST_1_POSITION_EGRESS_PUK_EXPIRED_raised = true;
			break;
		}
		case FSM::Event::LBF_1_INTERRUPTED:
		{
			LBF_1_INTERRUPTED_raised = true;
			break;
		}
		case FSM::Event::LBF_1_OPEN:
		{
			LBF_1_OPEN_raised = true;
			break;
		}
		case FSM::Event::FST_1_PUK_ENTRY_HeightMeasurement:
		{
			FST_1_PUK_ENTRY_HeightMeasurement_raised = true;
			break;
		}
		case FSM::Event::HS_1_SAMPLE:
		{
			HS_1_SAMPLE_raised = true;
			break;
		}
		case FSM::Event::HS_1_SAMPLING_DONE:
		{
			HS_1_SAMPLING_DONE_raised = true;
			break;
		}
		case FSM::Event::LBM_1_INTERRUPTED:
		{
			LBM_1_INTERRUPTED_raised = true;
			break;
		}
		case FSM::Event::LBM_1_OPEN:
		{
			LBM_1_OPEN_raised = true;
			break;
		}
		case FSM::Event::MS_1_HIGH:
		{
			MS_1_HIGH_raised = true;
			break;
		}
		case FSM::Event::MS_1_LOW:
		{
			MS_1_LOW_raised = true;
			break;
		}
		case FSM::Event::LBR_1_INTERRUPTED:
		{
			LBR_1_INTERRUPTED_raised = true;
			break;
		}
		case FSM::Event::LBR_1_OPEN:
		{
			LBR_1_OPEN_raised = true;
			break;
		}
		case FSM::Event::FST_1_PUK_SORTING_PASSTHROUGH:
		{
			FST_1_PUK_SORTING_PASSTHROUGH_raised = true;
			break;
		}
		case FSM::Event::FST_1_PUK_SORTING_EJECT:
		{
			FST_1_PUK_SORTING_EJECT_raised = true;
			break;
		}
		case FSM::Event::LBE_1_OPEN:
		{
			LBE_1_OPEN_raised = true;
			break;
		}
		case FSM::Event::LBE_1_INTERRUPTED:
		{
			LBE_1_INTERRUPTED_raised = true;
			break;
		}
		case FSM::Event::BGS_1_LONG_PRESSED:
		{
			BGS_1_LONG_PRESSED_raised = true;
			break;
		}
		case FSM::Event::BGS_1_INTERRUPTED:
		{
			BGS_1_INTERRUPTED_raised = true;
			break;
		}
		case FSM::Event::BRS_1_INTERRUPTED:
		{
			BRS_1_INTERRUPTED_raised = true;
			break;
		}
		case FSM::Event::BGR_1_INTERRUPTED:
		{
			BGR_1_INTERRUPTED_raised = true;
			break;
		}
		case FSM::Event::FST_2_ERROR_SYSTEM_RESOLVED:
		{
			FST_2_ERROR_SYSTEM_RESOLVED_raised = true;
			break;
		}
		case FSM::Event::FST_2_POSITION_INGRESS_DISTANCE_VALID:
		{
			FST_2_POSITION_INGRESS_DISTANCE_VALID_raised = true;
			break;
		}
		case FSM::Event::FST_2_POSITION_INGRESS_PUK_EXPECTED:
		{
			FST_2_POSITION_INGRESS_PUK_EXPECTED_raised = true;
			break;
		}
		case FSM::Event::FST_2_POSITION_INGRESS_PUK_EXPIRED:
		{
			FST_2_POSITION_INGRESS_PUK_EXPIRED_raised = true;
			break;
		}
		case FSM::Event::FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED:
		{
			FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED_raised = true;
			break;
		}
		case FSM::Event::FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED:
		{
			FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED_raised = true;
			break;
		}
		case FSM::Event::FST_2_POSITION_SORTING_PUK_EXPECTED:
		{
			FST_2_POSITION_SORTING_PUK_EXPECTED_raised = true;
			break;
		}
		case FSM::Event::FST_2_POSITION_SORTING_PUK_EXPIRED:
		{
			FST_2_POSITION_SORTING_PUK_EXPIRED_raised = true;
			break;
		}
		case FSM::Event::FST_2_POSITION_EGRESS_PUK_EXPECTED:
		{
			FST_2_POSITION_EGRESS_PUK_EXPECTED_raised = true;
			break;
		}
		case FSM::Event::FST_2_POSITION_EGRESS_PUK_EXPIRED:
		{
			FST_2_POSITION_EGRESS_PUK_EXPIRED_raised = true;
			break;
		}
		case FSM::Event::FST_2_POSITION_DIVIDER_DISTANCE_VALID:
		{
			FST_2_POSITION_DIVIDER_DISTANCE_VALID_raised = true;
			break;
		}
		case FSM::Event::LBF_2_INTERRUPTED:
		{
			LBF_2_INTERRUPTED_raised = true;
			break;
		}
		case FSM::Event::LBF_2_OPEN:
		{
			LBF_2_OPEN_raised = true;
			break;
		}
		case FSM::Event::HS_2_SAMPLE:
		{
			HS_2_SAMPLE_raised = true;
			break;
		}
		case FSM::Event::HS_2_SAMPLING_DONE:
		{
			HS_2_SAMPLING_DONE_raised = true;
			break;
		}
		case FSM::Event::LBM_2_INTERRUPTED:
		{
			LBM_2_INTERRUPTED_raised = true;
			break;
		}
		case FSM::Event::LBM_2_OPEN:
		{
			LBM_2_OPEN_raised = true;
			break;
		}
		case FSM::Event::MS_2_HIGH:
		{
			MS_2_HIGH_raised = true;
			break;
		}
		case FSM::Event::MS_2_LOW:
		{
			MS_2_LOW_raised = true;
			break;
		}
		case FSM::Event::LBR_2_INTERRUPTED:
		{
			LBR_2_INTERRUPTED_raised = true;
			break;
		}
		case FSM::Event::LBR_2_OPEN:
		{
			LBR_2_OPEN_raised = true;
			break;
		}
		case FSM::Event::FST_2_PUK_ENTRY_EGRESS:
		{
			FST_2_PUK_ENTRY_EGRESS_raised = true;
			break;
		}
		case FSM::Event::LBE_2_OPEN:
		{
			LBE_2_OPEN_raised = true;
			break;
		}
		case FSM::Event::LBE_2_INTERRUPTED:
		{
			LBE_2_INTERRUPTED_raised = true;
			break;
		}
		case FSM::Event::BGS_2_LONG_PRESSED:
		{
			BGS_2_LONG_PRESSED_raised = true;
			break;
		}
		case FSM::Event::BGS_2_INTERRUPTED:
		{
			BGS_2_INTERRUPTED_raised = true;
			break;
		}
		case FSM::Event::BRS_2_INTERRUPTED:
		{
			BRS_2_INTERRUPTED_raised = true;
			break;
		}
		case FSM::Event::BGR_2_INTERRUPTED:
		{
			BGR_2_INTERRUPTED_raised = true;
			break;
		}
		case FSM::Event::ESTOP_SIGNAL:
		{
			ESTOP_SIGNAL_raised = true;
			break;
		}
		case FSM::Event::ESTOP_SIGNAL_RESET:
		{
			ESTOP_SIGNAL_RESET_raised = true;
			break;
		}
		case FSM::Event::RUNNING_SIGNAL:
		{
			RUNNING_SIGNAL_raised = true;
			break;
		}
		case FSM::Event::RUNNING_SIGNAL_RESET:
		{
			RUNNING_SIGNAL_RESET_raised = true;
			break;
		}
		case FSM::Event::WARNING_SIGNAL:
		{
			WARNING_SIGNAL_raised = true;
			break;
		}
		case FSM::Event::WARNING_SIGNAL_RESET:
		{
			WARNING_SIGNAL_RESET_raised = true;
			break;
		}
		case FSM::Event::READY_SIGNAL:
		{
			READY_SIGNAL_raised = true;
			break;
		}
		case FSM::Event::READY_RESET:
		{
			READY_RESET_raised = true;
			break;
		}
		case FSM::Event::ERROR_SIGNAL:
		{
			ERROR_SIGNAL_raised = true;
			break;
		}
		case FSM::Event::Internal_local_SYSTEM_OPERATIONAL_OUT:
		{
			local_SYSTEM_OPERATIONAL_OUT_raised = true;
			break;
		}
		case FSM::Event::Internal_local_ESTOP_RECEIVED:
		{
			local_ESTOP_RECEIVED_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_1_ERROR_SYSTEM:
		{
			local_FST_1_ERROR_SYSTEM_raised = true;
			break;
		}
		case FSM::Event::Internal_local_ESTOP_CLEARED:
		{
			local_ESTOP_CLEARED_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_1_PUK_ENTRY_SORTING:
		{
			local_FST_1_PUK_ENTRY_SORTING_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_1_PUK_ENTRY_EGRESS:
		{
			local_FST_1_PUK_ENTRY_EGRESS_raised = true;
			break;
		}
		case FSM::Event::Internal_local_SYSTEM_SERVICE_IN:
		{
			local_SYSTEM_SERVICE_IN_raised = true;
			break;
		}
		case FSM::Event::Internal_local_SYSTEM_SERVICE_OUT:
		{
			local_SYSTEM_SERVICE_OUT_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_1_INGRESS_IN:
		{
			local_FST_1_INGRESS_IN_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_1_INGRESS_OUT:
		{
			local_FST_1_INGRESS_OUT_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_1_ERROR_ACKNOWLEDGED:
		{
			local_FST_1_ERROR_ACKNOWLEDGED_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_2_ERROR_SYSTEM:
		{
			local_FST_2_ERROR_SYSTEM_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_2_PUK_ENTRY_INGRESS:
		{
			local_FST_2_PUK_ENTRY_INGRESS_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_2_PUK_ENTRY_HeightMeasurement:
		{
			local_FST_2_PUK_ENTRY_HeightMeasurement_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_2_YELLOW_LAMP_ON:
		{
			local_FST_2_YELLOW_LAMP_ON_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_2_YELLOW_LAMP_OFF:
		{
			local_FST_2_YELLOW_LAMP_OFF_raised = true;
			break;
		}
		case FSM::Event::Internal_local_EVALUATE:
		{
			local_EVALUATE_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_1_ERROR_INGRESS:
		{
			local_FST_1_ERROR_INGRESS_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_1_ERROR_HM:
		{
			local_FST_1_ERROR_HM_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_1_ERROR_SORTING:
		{
			local_FST_1_ERROR_SORTING_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_1_ERROR_EGRESS_MISSING_PUK:
		{
			local_FST_1_ERROR_EGRESS_MISSING_PUK_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_2_PUK_ENTRY_SORTING:
		{
			local_FST_2_PUK_ENTRY_SORTING_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_2_PUK_SORTING_PASSTHROUGH:
		{
			local_FST_2_PUK_SORTING_PASSTHROUGH_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_2_PUK_SORTING_EJECT:
		{
			local_FST_2_PUK_SORTING_EJECT_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_2_ERROR_RAMPCLEARED:
		{
			local_FST_2_ERROR_RAMPCLEARED_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_2_ERROR_HM:
		{
			local_FST_2_ERROR_HM_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_2_ERROR_SORTING:
		{
			local_FST_2_ERROR_SORTING_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_2_ERROR_INGRESS:
		{
			local_FST_2_ERROR_INGRESS_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_2_ERROR_EGRESS:
		{
			local_FST_2_ERROR_EGRESS_raised = true;
			break;
		}
		case FSM::Event::Internal_local_FST_2_ERROR_RAMPFULL:
		{
			local_FST_2_ERROR_RAMPFULL_raised = true;
			break;
		}
		
		
		default:
			//pointer got out of scope
			delete event;
			return false;
	}
	//pointer got out of scope
	delete event;
	return true;
}


/*! Raises the in event 'SYSTEM_OPERATIONAL_IN' of default interface scope. */
void FSM::raiseSYSTEM_OPERATIONAL_IN() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::SYSTEM_OPERATIONAL_IN))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getSYSTEM_OPERATIONAL_OUT() noexcept {
	return this->SYSTEM_OPERATIONAL_OUT_observable;
}


sc::rx::Observable<void>& FSM::getSYSTEM_SERVICE_IN() noexcept {
	return this->SYSTEM_SERVICE_IN_observable;
}


sc::rx::Observable<void>& FSM::getSYSTEM_SERVICE_OUT() noexcept {
	return this->SYSTEM_SERVICE_OUT_observable;
}


sc::rx::Observable<void>& FSM::getESTOP_RECEIVED() noexcept {
	return this->ESTOP_RECEIVED_observable;
}


sc::rx::Observable<void>& FSM::getESTOP_CLEARED() noexcept {
	return this->ESTOP_CLEARED_observable;
}


sc::rx::Observable<void>& FSM::getSYSTEM_RUNNING() noexcept {
	return this->SYSTEM_RUNNING_observable;
}


sc::rx::Observable<void>& FSM::getSYSTEM_STOPPED() noexcept {
	return this->SYSTEM_STOPPED_observable;
}


sc::rx::Observable<void>& FSM::getEVALUATE() noexcept {
	return this->EVALUATE_observable;
}


/*! Raises the in event 'ESTOP_1_HIGH' of default interface scope. */
void FSM::raiseESTOP_1_HIGH() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::ESTOP_1_HIGH))
	;
	runCycle();
}


/*! Raises the in event 'ESTOP_1_LOW' of default interface scope. */
void FSM::raiseESTOP_1_LOW() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::ESTOP_1_LOW))
	;
	runCycle();
}


/*! Raises the in event 'ESTOP_2_HIGH' of default interface scope. */
void FSM::raiseESTOP_2_HIGH() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::ESTOP_2_HIGH))
	;
	runCycle();
}


/*! Raises the in event 'ESTOP_2_LOW' of default interface scope. */
void FSM::raiseESTOP_2_LOW() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::ESTOP_2_LOW))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_SYSTEM() noexcept {
	return this->FST_1_ERROR_SYSTEM_observable;
}


/*! Raises the in event 'FST_1_ERROR_SYSTEM_RESOLVED' of default interface scope. */
void FSM::raiseFST_1_ERROR_SYSTEM_RESOLVED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_1_ERROR_SYSTEM_RESOLVED))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_INGRESS() noexcept {
	return this->FST_1_ERROR_INGRESS_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_INGRESS_RESOLVED() noexcept {
	return this->FST_1_ERROR_INGRESS_RESOLVED_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_HM() noexcept {
	return this->FST_1_ERROR_HM_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_HM_MISSING_PUK() noexcept {
	return this->FST_1_ERROR_HM_MISSING_PUK_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_HM_RESOLVED() noexcept {
	return this->FST_1_ERROR_HM_RESOLVED_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_SORTING() noexcept {
	return this->FST_1_ERROR_SORTING_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_SORTING_MISSING_PUK() noexcept {
	return this->FST_1_ERROR_SORTING_MISSING_PUK_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_SORTING_RESOLVED() noexcept {
	return this->FST_1_ERROR_SORTING_RESOLVED_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_RAMPFULL() noexcept {
	return this->FST_1_ERROR_RAMPFULL_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_EGRESS() noexcept {
	return this->FST_1_ERROR_EGRESS_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_EGRESS_MISSING_PUK() noexcept {
	return this->FST_1_ERROR_EGRESS_MISSING_PUK_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_EGRESS_RESOLVED() noexcept {
	return this->FST_1_ERROR_EGRESS_RESOLVED_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_LAMP_UNACKNOWLEDGED() noexcept {
	return this->FST_1_ERROR_LAMP_UNACKNOWLEDGED_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_LAMP_RESOLVED() noexcept {
	return this->FST_1_ERROR_LAMP_RESOLVED_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_UNACKNOWLEDGED() noexcept {
	return this->FST_1_ERROR_UNACKNOWLEDGED_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_ACKNOWLEDGED() noexcept {
	return this->FST_1_ERROR_ACKNOWLEDGED_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_ERROR_SORTING_RAMPFULL() noexcept {
	return this->FST_1_ERROR_SORTING_RAMPFULL_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_POSITION_INGRESS_NEW_PUK() noexcept {
	return this->FST_1_POSITION_INGRESS_NEW_PUK_observable;
}


/*! Raises the in event 'FST_1_POSITION_INGRESS_DISTANCE_VALID' of default interface scope. */
void FSM::raiseFST_1_POSITION_INGRESS_DISTANCE_VALID() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_1_POSITION_INGRESS_DISTANCE_VALID))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getFST_1_POSITION_HEIGHTMEASUREMENT_NEW_PUK() noexcept {
	return this->FST_1_POSITION_HEIGHTMEASUREMENT_NEW_PUK_observable;
}


/*! Raises the in event 'FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED' of default interface scope. */
void FSM::raiseFST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED))
	;
	runCycle();
}


/*! Raises the in event 'FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED' of default interface scope. */
void FSM::raiseFST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getFST_1_POSITION_SORTING_NEW_PUK() noexcept {
	return this->FST_1_POSITION_SORTING_NEW_PUK_observable;
}


/*! Raises the in event 'FST_1_POSITION_SORTING_PUK_EXPECTED' of default interface scope. */
void FSM::raiseFST_1_POSITION_SORTING_PUK_EXPECTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_1_POSITION_SORTING_PUK_EXPECTED))
	;
	runCycle();
}


/*! Raises the in event 'FST_1_POSITION_SORTING_PUK_EXPIRED' of default interface scope. */
void FSM::raiseFST_1_POSITION_SORTING_PUK_EXPIRED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_1_POSITION_SORTING_PUK_EXPIRED))
	;
	runCycle();
}


/*! Raises the in event 'FST_1_POSITION_DIVIDER_DISTANCE_VALID' of default interface scope. */
void FSM::raiseFST_1_POSITION_DIVIDER_DISTANCE_VALID() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_1_POSITION_DIVIDER_DISTANCE_VALID))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getFST_1_POSITION_EGRESS_NEW_PUK() noexcept {
	return this->FST_1_POSITION_EGRESS_NEW_PUK_observable;
}


/*! Raises the in event 'FST_1_POSITION_EGRESS_PUK_EXPECTED' of default interface scope. */
void FSM::raiseFST_1_POSITION_EGRESS_PUK_EXPECTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_1_POSITION_EGRESS_PUK_EXPECTED))
	;
	runCycle();
}


/*! Raises the in event 'FST_1_POSITION_EGRESS_PUK_EXPIRED' of default interface scope. */
void FSM::raiseFST_1_POSITION_EGRESS_PUK_EXPIRED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_1_POSITION_EGRESS_PUK_EXPIRED))
	;
	runCycle();
}


/*! Raises the in event 'LBF_1_INTERRUPTED' of default interface scope. */
void FSM::raiseLBF_1_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::LBF_1_INTERRUPTED))
	;
	runCycle();
}


/*! Raises the in event 'LBF_1_OPEN' of default interface scope. */
void FSM::raiseLBF_1_OPEN() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::LBF_1_OPEN))
	;
	runCycle();
}


/*! Raises the in event 'FST_1_PUK_ENTRY_HeightMeasurement' of default interface scope. */
void FSM::raiseFST_1_PUK_ENTRY_HeightMeasurement() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_1_PUK_ENTRY_HeightMeasurement))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getFST_1_INGRESS_IN() noexcept {
	return this->FST_1_INGRESS_IN_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_INGRESS_OUT() noexcept {
	return this->FST_1_INGRESS_OUT_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_PUK_DISTANCE_VALID_INGRESS() noexcept {
	return this->FST_1_PUK_DISTANCE_VALID_INGRESS_observable;
}


/*! Raises the in event 'HS_1_SAMPLE' of default interface scope. */
void FSM::raiseHS_1_SAMPLE() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::HS_1_SAMPLE))
	;
	runCycle();
}


/*! Raises the in event 'HS_1_SAMPLING_DONE' of default interface scope. */
void FSM::raiseHS_1_SAMPLING_DONE() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::HS_1_SAMPLING_DONE))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getFST_1_PUK_ENTRY_SORTING() noexcept {
	return this->FST_1_PUK_ENTRY_SORTING_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_HeightMeasurement_Counter() noexcept {
	return this->FST_1_HeightMeasurement_Counter_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_PUK_HEIGHT_IS_VALID() noexcept {
	return this->FST_1_PUK_HEIGHT_IS_VALID_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_PUK_HEIGHT_IS_NOT_VALID() noexcept {
	return this->FST_1_PUK_HEIGHT_IS_NOT_VALID_observable;
}


/*! Raises the in event 'LBM_1_INTERRUPTED' of default interface scope. */
void FSM::raiseLBM_1_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::LBM_1_INTERRUPTED))
	;
	runCycle();
}


/*! Raises the in event 'LBM_1_OPEN' of default interface scope. */
void FSM::raiseLBM_1_OPEN() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::LBM_1_OPEN))
	;
	runCycle();
}


/*! Raises the in event 'MS_1_HIGH' of default interface scope. */
void FSM::raiseMS_1_HIGH() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::MS_1_HIGH))
	;
	runCycle();
}


/*! Raises the in event 'MS_1_LOW' of default interface scope. */
void FSM::raiseMS_1_LOW() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::MS_1_LOW))
	;
	runCycle();
}


/*! Raises the in event 'LBR_1_INTERRUPTED' of default interface scope. */
void FSM::raiseLBR_1_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::LBR_1_INTERRUPTED))
	;
	runCycle();
}


/*! Raises the in event 'LBR_1_OPEN' of default interface scope. */
void FSM::raiseLBR_1_OPEN() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::LBR_1_OPEN))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getFST_1_PUK_IS_METAL() noexcept {
	return this->FST_1_PUK_IS_METAL_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_PUK_IS_NOT_METAL() noexcept {
	return this->FST_1_PUK_IS_NOT_METAL_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_PUK_DESIRED() noexcept {
	return this->FST_1_PUK_DESIRED_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_PUK_NOT_DESIRED() noexcept {
	return this->FST_1_PUK_NOT_DESIRED_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_PUK_ENTRY_EGRESS() noexcept {
	return this->FST_1_PUK_ENTRY_EGRESS_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_SORTING_MODULE_ACTIVE() noexcept {
	return this->FST_1_SORTING_MODULE_ACTIVE_observable;
}


sc::rx::Observable<void>& FSM::getFST_1_SORTING_MODULE_RESTING() noexcept {
	return this->FST_1_SORTING_MODULE_RESTING_observable;
}


/*! Raises the in event 'FST_1_PUK_SORTING_PASSTHROUGH' of default interface scope. */
void FSM::raiseFST_1_PUK_SORTING_PASSTHROUGH() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_1_PUK_SORTING_PASSTHROUGH))
	;
	runCycle();
}


/*! Raises the in event 'FST_1_PUK_SORTING_EJECT' of default interface scope. */
void FSM::raiseFST_1_PUK_SORTING_EJECT() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_1_PUK_SORTING_EJECT))
	;
	runCycle();
}


/*! Raises the in event 'LBE_1_OPEN' of default interface scope. */
void FSM::raiseLBE_1_OPEN() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::LBE_1_OPEN))
	;
	runCycle();
}


/*! Raises the in event 'LBE_1_INTERRUPTED' of default interface scope. */
void FSM::raiseLBE_1_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::LBE_1_INTERRUPTED))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getMOTOR_1_STOP() noexcept {
	return this->MOTOR_1_STOP_observable;
}


sc::rx::Observable<void>& FSM::getMOTOR_1_FAST() noexcept {
	return this->MOTOR_1_FAST_observable;
}


sc::rx::Observable<void>& FSM::getMOTOR_1_SLOW() noexcept {
	return this->MOTOR_1_SLOW_observable;
}


/*! Raises the in event 'BGS_1_LONG_PRESSED' of default interface scope. */
void FSM::raiseBGS_1_LONG_PRESSED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::BGS_1_LONG_PRESSED))
	;
	runCycle();
}


/*! Raises the in event 'BGS_1_INTERRUPTED' of default interface scope. */
void FSM::raiseBGS_1_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::BGS_1_INTERRUPTED))
	;
	runCycle();
}


/*! Raises the in event 'BRS_1_INTERRUPTED' of default interface scope. */
void FSM::raiseBRS_1_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::BRS_1_INTERRUPTED))
	;
	runCycle();
}


/*! Raises the in event 'BGR_1_INTERRUPTED' of default interface scope. */
void FSM::raiseBGR_1_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::BGR_1_INTERRUPTED))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getLG1_ON() noexcept {
	return this->LG1_ON_observable;
}


sc::rx::Observable<void>& FSM::getLG1_BLINKING_1HZ() noexcept {
	return this->LG1_BLINKING_1HZ_observable;
}


sc::rx::Observable<void>& FSM::getLG1_OFF() noexcept {
	return this->LG1_OFF_observable;
}


sc::rx::Observable<void>& FSM::getLY1_ON() noexcept {
	return this->LY1_ON_observable;
}


sc::rx::Observable<void>& FSM::getLY1_BLINKING_1HZ() noexcept {
	return this->LY1_BLINKING_1HZ_observable;
}


sc::rx::Observable<void>& FSM::getLY1_OFF() noexcept {
	return this->LY1_OFF_observable;
}


sc::rx::Observable<void>& FSM::getLR1_ON() noexcept {
	return this->LR1_ON_observable;
}


sc::rx::Observable<void>& FSM::getLR1_OFF() noexcept {
	return this->LR1_OFF_observable;
}


sc::rx::Observable<void>& FSM::getQ11_ON() noexcept {
	return this->Q11_ON_observable;
}


sc::rx::Observable<void>& FSM::getQ12_ON() noexcept {
	return this->Q12_ON_observable;
}


sc::rx::Observable<void>& FSM::getQ11_OFF() noexcept {
	return this->Q11_OFF_observable;
}


sc::rx::Observable<void>& FSM::getQ12_OFF() noexcept {
	return this->Q12_OFF_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_SYSTEM() noexcept {
	return this->FST_2_ERROR_SYSTEM_observable;
}


/*! Raises the in event 'FST_2_ERROR_SYSTEM_RESOLVED' of default interface scope. */
void FSM::raiseFST_2_ERROR_SYSTEM_RESOLVED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_ERROR_SYSTEM_RESOLVED))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_INGRESS() noexcept {
	return this->FST_2_ERROR_INGRESS_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_INGRESS_MISSING_PUK() noexcept {
	return this->FST_2_ERROR_INGRESS_MISSING_PUK_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_INGRESS_RESOLVED() noexcept {
	return this->FST_2_ERROR_INGRESS_RESOLVED_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_HM() noexcept {
	return this->FST_2_ERROR_HM_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_HM_MISSING_PUK() noexcept {
	return this->FST_2_ERROR_HM_MISSING_PUK_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_HM_RESOLVED() noexcept {
	return this->FST_2_ERROR_HM_RESOLVED_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_SORTING() noexcept {
	return this->FST_2_ERROR_SORTING_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_SORTING_MISSING_PUK() noexcept {
	return this->FST_2_ERROR_SORTING_MISSING_PUK_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_SORTING_RESOLVED() noexcept {
	return this->FST_2_ERROR_SORTING_RESOLVED_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_RAMPFULL() noexcept {
	return this->FST_2_ERROR_RAMPFULL_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_RAMPCLEARED() noexcept {
	return this->FST_2_ERROR_RAMPCLEARED_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_EGRESS() noexcept {
	return this->FST_2_ERROR_EGRESS_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_EGRESS_MISSING_PUK() noexcept {
	return this->FST_2_ERROR_EGRESS_MISSING_PUK_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_EGRESS_RESOLVED() noexcept {
	return this->FST_2_ERROR_EGRESS_RESOLVED_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_UNACKNOWLEDGED() noexcept {
	return this->FST_2_ERROR_UNACKNOWLEDGED_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_ACKNOWLEDGED() noexcept {
	return this->FST_2_ERROR_ACKNOWLEDGED_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_POSITION_INGRESS_NEW_PUK() noexcept {
	return this->FST_2_POSITION_INGRESS_NEW_PUK_observable;
}


/*! Raises the in event 'FST_2_POSITION_INGRESS_DISTANCE_VALID' of default interface scope. */
void FSM::raiseFST_2_POSITION_INGRESS_DISTANCE_VALID() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_POSITION_INGRESS_DISTANCE_VALID))
	;
	runCycle();
}


/*! Raises the in event 'FST_2_POSITION_INGRESS_PUK_EXPECTED' of default interface scope. */
void FSM::raiseFST_2_POSITION_INGRESS_PUK_EXPECTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_POSITION_INGRESS_PUK_EXPECTED))
	;
	runCycle();
}


/*! Raises the in event 'FST_2_POSITION_INGRESS_PUK_EXPIRED' of default interface scope. */
void FSM::raiseFST_2_POSITION_INGRESS_PUK_EXPIRED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_POSITION_INGRESS_PUK_EXPIRED))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getFST_2_POSITION_HEIGHTMEASUREMENT_NEW_PUK() noexcept {
	return this->FST_2_POSITION_HEIGHTMEASUREMENT_NEW_PUK_observable;
}


/*! Raises the in event 'FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED' of default interface scope. */
void FSM::raiseFST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED))
	;
	runCycle();
}


/*! Raises the in event 'FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED' of default interface scope. */
void FSM::raiseFST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getFST_2_POSITION_SORTING_NEW_PUK() noexcept {
	return this->FST_2_POSITION_SORTING_NEW_PUK_observable;
}


/*! Raises the in event 'FST_2_POSITION_SORTING_PUK_EXPECTED' of default interface scope. */
void FSM::raiseFST_2_POSITION_SORTING_PUK_EXPECTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_POSITION_SORTING_PUK_EXPECTED))
	;
	runCycle();
}


/*! Raises the in event 'FST_2_POSITION_SORTING_PUK_EXPIRED' of default interface scope. */
void FSM::raiseFST_2_POSITION_SORTING_PUK_EXPIRED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_POSITION_SORTING_PUK_EXPIRED))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getFST_2_POSITION_EGRESS_NEW_PUK() noexcept {
	return this->FST_2_POSITION_EGRESS_NEW_PUK_observable;
}


/*! Raises the in event 'FST_2_POSITION_EGRESS_PUK_EXPECTED' of default interface scope. */
void FSM::raiseFST_2_POSITION_EGRESS_PUK_EXPECTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_POSITION_EGRESS_PUK_EXPECTED))
	;
	runCycle();
}


/*! Raises the in event 'FST_2_POSITION_EGRESS_PUK_EXPIRED' of default interface scope. */
void FSM::raiseFST_2_POSITION_EGRESS_PUK_EXPIRED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_POSITION_EGRESS_PUK_EXPIRED))
	;
	runCycle();
}


/*! Raises the in event 'FST_2_POSITION_DIVIDER_DISTANCE_VALID' of default interface scope. */
void FSM::raiseFST_2_POSITION_DIVIDER_DISTANCE_VALID() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_POSITION_DIVIDER_DISTANCE_VALID))
	;
	runCycle();
}


/*! Raises the in event 'LBF_2_INTERRUPTED' of default interface scope. */
void FSM::raiseLBF_2_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::LBF_2_INTERRUPTED))
	;
	runCycle();
}


/*! Raises the in event 'LBF_2_OPEN' of default interface scope. */
void FSM::raiseLBF_2_OPEN() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::LBF_2_OPEN))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getFST_2_PUK_ENTRY_HeightMeasurement() noexcept {
	return this->FST_2_PUK_ENTRY_HeightMeasurement_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_INGRESS_IN() noexcept {
	return this->FST_2_INGRESS_IN_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_INGRESS_OUT() noexcept {
	return this->FST_2_INGRESS_OUT_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_PUK_DISTANCE_VALID_INGRESS() noexcept {
	return this->FST_2_PUK_DISTANCE_VALID_INGRESS_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_YELLOW_LAMP_ON() noexcept {
	return this->FST_2_YELLOW_LAMP_ON_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_YELLOW_LAMP_OFF() noexcept {
	return this->FST_2_YELLOW_LAMP_OFF_observable;
}


/*! Raises the in event 'HS_2_SAMPLE' of default interface scope. */
void FSM::raiseHS_2_SAMPLE() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::HS_2_SAMPLE))
	;
	runCycle();
}


/*! Raises the in event 'HS_2_SAMPLING_DONE' of default interface scope. */
void FSM::raiseHS_2_SAMPLING_DONE() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::HS_2_SAMPLING_DONE))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getFST_2_PUK_ENTRY_SORTING() noexcept {
	return this->FST_2_PUK_ENTRY_SORTING_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_PUK_HEIGHT_IS_VALID() noexcept {
	return this->FST_2_PUK_HEIGHT_IS_VALID_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_PUK_HEIGHT_IS_NOT_VALID() noexcept {
	return this->FST_2_PUK_HEIGHT_IS_NOT_VALID_observable;
}


/*! Raises the in event 'LBM_2_INTERRUPTED' of default interface scope. */
void FSM::raiseLBM_2_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::LBM_2_INTERRUPTED))
	;
	runCycle();
}


/*! Raises the in event 'LBM_2_OPEN' of default interface scope. */
void FSM::raiseLBM_2_OPEN() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::LBM_2_OPEN))
	;
	runCycle();
}


/*! Raises the in event 'MS_2_HIGH' of default interface scope. */
void FSM::raiseMS_2_HIGH() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::MS_2_HIGH))
	;
	runCycle();
}


/*! Raises the in event 'MS_2_LOW' of default interface scope. */
void FSM::raiseMS_2_LOW() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::MS_2_LOW))
	;
	runCycle();
}


/*! Raises the in event 'LBR_2_INTERRUPTED' of default interface scope. */
void FSM::raiseLBR_2_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::LBR_2_INTERRUPTED))
	;
	runCycle();
}


/*! Raises the in event 'LBR_2_OPEN' of default interface scope. */
void FSM::raiseLBR_2_OPEN() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::LBR_2_OPEN))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getFST_2_PUK_DESIRED() noexcept {
	return this->FST_2_PUK_DESIRED_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_PUK_NOT_DESIRED() noexcept {
	return this->FST_2_PUK_NOT_DESIRED_observable;
}


/*! Raises the in event 'FST_2_PUK_ENTRY_EGRESS' of default interface scope. */
void FSM::raiseFST_2_PUK_ENTRY_EGRESS() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_PUK_ENTRY_EGRESS))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getFST_2_PUK_EJECTOR_DISTANCE_VALID() noexcept {
	return this->FST_2_PUK_EJECTOR_DISTANCE_VALID_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_SORTING_MODULE_ACTIVE() noexcept {
	return this->FST_2_SORTING_MODULE_ACTIVE_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_SORTING_MODULE_RESTING() noexcept {
	return this->FST_2_SORTING_MODULE_RESTING_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_PUK_IS_METAL() noexcept {
	return this->FST_2_PUK_IS_METAL_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_PUK_IS_NOT_METAL() noexcept {
	return this->FST_2_PUK_IS_NOT_METAL_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_PUK_SORTING_PASSTHROUGH() noexcept {
	return this->FST_2_PUK_SORTING_PASSTHROUGH_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_PUK_SORTING_EJECT() noexcept {
	return this->FST_2_PUK_SORTING_EJECT_observable;
}


/*! Raises the in event 'LBE_2_OPEN' of default interface scope. */
void FSM::raiseLBE_2_OPEN() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::LBE_2_OPEN))
	;
	runCycle();
}


/*! Raises the in event 'LBE_2_INTERRUPTED' of default interface scope. */
void FSM::raiseLBE_2_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::LBE_2_INTERRUPTED))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getFST_2_PUK_ENTRY_INGRESS() noexcept {
	return this->FST_2_PUK_ENTRY_INGRESS_observable;
}


sc::rx::Observable<void>& FSM::getMOTOR_2_STOP() noexcept {
	return this->MOTOR_2_STOP_observable;
}


sc::rx::Observable<void>& FSM::getMOTOR_2_FAST() noexcept {
	return this->MOTOR_2_FAST_observable;
}


sc::rx::Observable<void>& FSM::getMOTOR_2_SLOW() noexcept {
	return this->MOTOR_2_SLOW_observable;
}


/*! Raises the in event 'BGS_2_LONG_PRESSED' of default interface scope. */
void FSM::raiseBGS_2_LONG_PRESSED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::BGS_2_LONG_PRESSED))
	;
	runCycle();
}


/*! Raises the in event 'BGS_2_INTERRUPTED' of default interface scope. */
void FSM::raiseBGS_2_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::BGS_2_INTERRUPTED))
	;
	runCycle();
}


/*! Raises the in event 'BRS_2_INTERRUPTED' of default interface scope. */
void FSM::raiseBRS_2_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::BRS_2_INTERRUPTED))
	;
	runCycle();
}


/*! Raises the in event 'BGR_2_INTERRUPTED' of default interface scope. */
void FSM::raiseBGR_2_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::BGR_2_INTERRUPTED))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM::getLG2_ON() noexcept {
	return this->LG2_ON_observable;
}


sc::rx::Observable<void>& FSM::getLG2_BLINKING_1HZ() noexcept {
	return this->LG2_BLINKING_1HZ_observable;
}


sc::rx::Observable<void>& FSM::getLG2_OFF() noexcept {
	return this->LG2_OFF_observable;
}


sc::rx::Observable<void>& FSM::getLY2_ON() noexcept {
	return this->LY2_ON_observable;
}


sc::rx::Observable<void>& FSM::getLY2_BLINKING_1HZ() noexcept {
	return this->LY2_BLINKING_1HZ_observable;
}


sc::rx::Observable<void>& FSM::getLY2_OFF() noexcept {
	return this->LY2_OFF_observable;
}


sc::rx::Observable<void>& FSM::getLR2_ON() noexcept {
	return this->LR2_ON_observable;
}


sc::rx::Observable<void>& FSM::getLR2_OFF() noexcept {
	return this->LR2_OFF_observable;
}


sc::rx::Observable<void>& FSM::getQ21_ON() noexcept {
	return this->Q21_ON_observable;
}


sc::rx::Observable<void>& FSM::getQ22_ON() noexcept {
	return this->Q22_ON_observable;
}


sc::rx::Observable<void>& FSM::getQ21_OFF() noexcept {
	return this->Q21_OFF_observable;
}


sc::rx::Observable<void>& FSM::getQ22_OFF() noexcept {
	return this->Q22_OFF_observable;
}


sc::rx::Observable<void>& FSM::getFST_2_ERROR_LAMP_RESOLVED() noexcept {
	return this->FST_2_ERROR_LAMP_RESOLVED_observable;
}


/*! Raises the in event 'ESTOP_SIGNAL' of default interface scope. */
void FSM::raiseESTOP_SIGNAL() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::ESTOP_SIGNAL))
	;
	runCycle();
}


/*! Raises the in event 'ESTOP_SIGNAL_RESET' of default interface scope. */
void FSM::raiseESTOP_SIGNAL_RESET() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::ESTOP_SIGNAL_RESET))
	;
	runCycle();
}


/*! Raises the in event 'RUNNING_SIGNAL' of default interface scope. */
void FSM::raiseRUNNING_SIGNAL() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::RUNNING_SIGNAL))
	;
	runCycle();
}


/*! Raises the in event 'RUNNING_SIGNAL_RESET' of default interface scope. */
void FSM::raiseRUNNING_SIGNAL_RESET() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::RUNNING_SIGNAL_RESET))
	;
	runCycle();
}


/*! Raises the in event 'WARNING_SIGNAL' of default interface scope. */
void FSM::raiseWARNING_SIGNAL() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::WARNING_SIGNAL))
	;
	runCycle();
}


/*! Raises the in event 'WARNING_SIGNAL_RESET' of default interface scope. */
void FSM::raiseWARNING_SIGNAL_RESET() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::WARNING_SIGNAL_RESET))
	;
	runCycle();
}


/*! Raises the in event 'READY_SIGNAL' of default interface scope. */
void FSM::raiseREADY_SIGNAL() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::READY_SIGNAL))
	;
	runCycle();
}


/*! Raises the in event 'READY_RESET' of default interface scope. */
void FSM::raiseREADY_RESET() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::READY_RESET))
	;
	runCycle();
}


/*! Raises the in event 'ERROR_SIGNAL' of default interface scope. */
void FSM::raiseERROR_SIGNAL() {
	incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::ERROR_SIGNAL))
	;
	runCycle();
}


void FSM::raiseLocal_SYSTEM_OPERATIONAL_OUT() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_SYSTEM_OPERATIONAL_OUT))
	;
}


void FSM::raiseLocal_ESTOP_RECEIVED() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_ESTOP_RECEIVED))
	;
}


void FSM::raiseLocal_FST_1_ERROR_SYSTEM() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_1_ERROR_SYSTEM))
	;
}


void FSM::raiseLocal_ESTOP_CLEARED() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_ESTOP_CLEARED))
	;
}


void FSM::raiseLocal_FST_1_PUK_ENTRY_SORTING() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_1_PUK_ENTRY_SORTING))
	;
}


void FSM::raiseLocal_FST_1_PUK_ENTRY_EGRESS() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_1_PUK_ENTRY_EGRESS))
	;
}


void FSM::raiseLocal_SYSTEM_SERVICE_IN() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_SYSTEM_SERVICE_IN))
	;
}


void FSM::raiseLocal_SYSTEM_SERVICE_OUT() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_SYSTEM_SERVICE_OUT))
	;
}


void FSM::raiseLocal_FST_1_INGRESS_IN() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_1_INGRESS_IN))
	;
}


void FSM::raiseLocal_FST_1_INGRESS_OUT() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_1_INGRESS_OUT))
	;
}


void FSM::raiseLocal_FST_1_ERROR_ACKNOWLEDGED() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_1_ERROR_ACKNOWLEDGED))
	;
}


void FSM::raiseLocal_FST_2_ERROR_SYSTEM() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_2_ERROR_SYSTEM))
	;
}


void FSM::raiseLocal_FST_2_PUK_ENTRY_INGRESS() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_2_PUK_ENTRY_INGRESS))
	;
}


void FSM::raiseLocal_FST_2_PUK_ENTRY_HeightMeasurement() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_2_PUK_ENTRY_HeightMeasurement))
	;
}


void FSM::raiseLocal_FST_2_YELLOW_LAMP_ON() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_2_YELLOW_LAMP_ON))
	;
}


void FSM::raiseLocal_FST_2_YELLOW_LAMP_OFF() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_2_YELLOW_LAMP_OFF))
	;
}


void FSM::raiseLocal_EVALUATE() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_EVALUATE))
	;
}


void FSM::raiseLocal_FST_1_ERROR_INGRESS() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_1_ERROR_INGRESS))
	;
}


void FSM::raiseLocal_FST_1_ERROR_HM() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_1_ERROR_HM))
	;
}


void FSM::raiseLocal_FST_1_ERROR_SORTING() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_1_ERROR_SORTING))
	;
}


void FSM::raiseLocal_FST_1_ERROR_EGRESS_MISSING_PUK() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_1_ERROR_EGRESS_MISSING_PUK))
	;
}


void FSM::raiseLocal_FST_2_PUK_ENTRY_SORTING() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_2_PUK_ENTRY_SORTING))
	;
}


void FSM::raiseLocal_FST_2_PUK_SORTING_PASSTHROUGH() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_2_PUK_SORTING_PASSTHROUGH))
	;
}


void FSM::raiseLocal_FST_2_PUK_SORTING_EJECT() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_2_PUK_SORTING_EJECT))
	;
}


void FSM::raiseLocal_FST_2_ERROR_RAMPCLEARED() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_2_ERROR_RAMPCLEARED))
	;
}


void FSM::raiseLocal_FST_2_ERROR_HM() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_2_ERROR_HM))
	;
}


void FSM::raiseLocal_FST_2_ERROR_SORTING() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_2_ERROR_SORTING))
	;
}


void FSM::raiseLocal_FST_2_ERROR_INGRESS() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_2_ERROR_INGRESS))
	;
}


void FSM::raiseLocal_FST_2_ERROR_EGRESS() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_2_ERROR_EGRESS))
	;
}


void FSM::raiseLocal_FST_2_ERROR_RAMPFULL() {
	internalEventQueue.push_back(new FSM::EventInstance(FSM::Event::Internal_local_FST_2_ERROR_RAMPFULL))
	;
}



bool FSM::isActive() const noexcept
{
	return stateConfVector[0] != FSM::State::NO_STATE||stateConfVector[1] != FSM::State::NO_STATE||stateConfVector[2] != FSM::State::NO_STATE||stateConfVector[3] != FSM::State::NO_STATE||stateConfVector[4] != FSM::State::NO_STATE||stateConfVector[5] != FSM::State::NO_STATE||stateConfVector[6] != FSM::State::NO_STATE||stateConfVector[7] != FSM::State::NO_STATE||stateConfVector[8] != FSM::State::NO_STATE||stateConfVector[9] != FSM::State::NO_STATE||stateConfVector[10] != FSM::State::NO_STATE||stateConfVector[11] != FSM::State::NO_STATE||stateConfVector[12] != FSM::State::NO_STATE||stateConfVector[13] != FSM::State::NO_STATE||stateConfVector[14] != FSM::State::NO_STATE||stateConfVector[15] != FSM::State::NO_STATE||stateConfVector[16] != FSM::State::NO_STATE||stateConfVector[17] != FSM::State::NO_STATE||stateConfVector[18] != FSM::State::NO_STATE||stateConfVector[19] != FSM::State::NO_STATE;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
bool FSM::isFinal() const noexcept
{
	   return false;
}

bool FSM::check() const noexcept{
	return true;
}


bool FSM::isStateActive(State state) const noexcept
{
	switch (state)
	{
		case FSM::State::FSM_Festo1_Ingress_Ingress :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Ingress_Ingress] >= FSM::State::FSM_Festo1_Ingress_Ingress && stateConfVector[scvi_FSM_Festo1_Ingress_Ingress] <= FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance);
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_Idle :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Ingress_Ingress_Ingress_Idle] == FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_Idle);
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_PukPresent :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Ingress_Ingress_Ingress_PukPresent] == FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_PukPresent);
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance] == FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance);
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Paused :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Ingress_Paused] == FSM::State::FSM_Festo1_Ingress_Paused);
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_E_STOP :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Ingress_E_STOP] == FSM::State::FSM_Festo1_Ingress_E_STOP);
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Start :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Ingress_Start] == FSM::State::FSM_Festo1_Ingress_Start);
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_ErrorFST1 :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Ingress_ErrorFST1] == FSM::State::FSM_Festo1_Ingress_ErrorFST1);
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement :
		{
			return  (stateConfVector[scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement] >= FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement && stateConfVector[scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement] <= FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected);
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle :
		{
			return  (stateConfVector[scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle] == FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle);
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring :
		{
			return  (stateConfVector[scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring] >= FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring && stateConfVector[scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring] <= FSM::State::_final_);
			break;
		}
		case FSM::State::A :
		{
			return  (stateConfVector[scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_A] == FSM::State::A);
			break;
		}
		case FSM::State::B :
		{
			return  (stateConfVector[scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_B] == FSM::State::B);
			break;
		}
		case FSM::State::C :
		{
			return  (stateConfVector[scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_C] == FSM::State::C);
			break;
		}
		case FSM::State::Error :
		{
			return  (stateConfVector[scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error] == FSM::State::Error);
			break;
		}
		case FSM::State::Evaluate :
		{
			return  (stateConfVector[scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Evaluate] == FSM::State::Evaluate);
			break;
		}
		case FSM::State::_final_ :
		{
			return  (stateConfVector[scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM__final_] == FSM::State::_final_);
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent :
		{
			return  (stateConfVector[scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent] == FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent);
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected :
		{
			return  (stateConfVector[scvi_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected] == FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected);
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_Paused :
		{
			return  (stateConfVector[scvi_FSM_Festo1_HeightMeasurement_Paused] == FSM::State::FSM_Festo1_HeightMeasurement_Paused);
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_E_STOP :
		{
			return  (stateConfVector[scvi_FSM_Festo1_HeightMeasurement_E_STOP] == FSM::State::FSM_Festo1_HeightMeasurement_E_STOP);
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_Start :
		{
			return  (stateConfVector[scvi_FSM_Festo1_HeightMeasurement_Start] == FSM::State::FSM_Festo1_HeightMeasurement_Start);
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_ErrorFST1 :
		{
			return  (stateConfVector[scvi_FSM_Festo1_HeightMeasurement_ErrorFST1] == FSM::State::FSM_Festo1_HeightMeasurement_ErrorFST1);
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Sorting_Sorting] >= FSM::State::FSM_Festo1__Sorting_Sorting && stateConfVector[scvi_FSM_Festo1__Sorting_Sorting] <= FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter);
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_Idle :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Sorting_Sorting_Sorting_Idle] == FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_Idle);
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_PukPresent :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent] == FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_PukPresent);
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_PukExpected :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected] == FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_PukExpected);
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_Evaluate :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate] == FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_Evaluate);
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider] == FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider);
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector] == FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector);
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider] == FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider);
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector] == FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector);
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter] == FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter);
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Paused :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Sorting_Paused] == FSM::State::FSM_Festo1__Sorting_Paused);
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_E_STOP :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Sorting_E_STOP] == FSM::State::FSM_Festo1__Sorting_E_STOP);
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Start :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Sorting_Start] == FSM::State::FSM_Festo1__Sorting_Start);
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_ErrorFST1 :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Sorting_ErrorFST1] == FSM::State::FSM_Festo1__Sorting_ErrorFST1);
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Paused :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Egress_Paused] == FSM::State::FSM_Festo1__Egress_Paused);
			break;
		}
		case FSM::State::FSM_Festo1__Egress_E_STOP :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Egress_E_STOP] == FSM::State::FSM_Festo1__Egress_E_STOP);
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Start :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Egress_Start] == FSM::State::FSM_Festo1__Egress_Start);
			break;
		}
		case FSM::State::FSM_Festo1__Egress_FST1Error :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Egress_FST1Error] == FSM::State::FSM_Festo1__Egress_FST1Error);
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Egress_Egress] >= FSM::State::FSM_Festo1__Egress_Egress && stateConfVector[scvi_FSM_Festo1__Egress_Egress] <= FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent);
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Waiting :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Waiting] == FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Waiting);
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer] == FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer);
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected] == FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected);
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE] == FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE);
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent] == FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent);
			break;
		}
		case FSM::State::FSM_QualityGate__Motor_SystemMotor :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Motor_SystemMotor] >= FSM::State::FSM_QualityGate__Motor_SystemMotor && stateConfVector[scvi_FSM_QualityGate__Motor_SystemMotor] <= FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop);
			break;
		}
		case FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward] == FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward);
			break;
		}
		case FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow] == FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow);
			break;
		}
		case FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop] == FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop);
			break;
		}
		case FSM::State::__Operational :
		{
			return  (stateConfVector[scvi___Operational] == FSM::State::__Operational);
			break;
		}
		case FSM::State::__Start :
		{
			return  (stateConfVector[scvi___Start] == FSM::State::__Start);
			break;
		}
		case FSM::State::__Ready :
		{
			return  (stateConfVector[scvi___Ready] == FSM::State::__Ready);
			break;
		}
		case FSM::State::__ServiceMode :
		{
			return  (stateConfVector[scvi___ServiceMode] == FSM::State::__ServiceMode);
			break;
		}
		case FSM::State::__EStopCalibration :
		{
			return  (stateConfVector[scvi___EStopCalibration] == FSM::State::__EStopCalibration);
			break;
		}
		case FSM::State::__EStopReceived :
		{
			return  (stateConfVector[scvi___EStopReceived] == FSM::State::__EStopReceived);
			break;
		}
		case FSM::State::__EStopCleared :
		{
			return  (stateConfVector[scvi___EStopCleared] == FSM::State::__EStopCleared);
			break;
		}
		case FSM::State::__ReveivedReset :
		{
			return  (stateConfVector[scvi___ReveivedReset] == FSM::State::__ReveivedReset);
			break;
		}
		case FSM::State::__Paused :
		{
			return  (stateConfVector[scvi___Paused] == FSM::State::__Paused);
			break;
		}
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Signaling_FSM_LAMP] >= FSM::State::FSM_Festo1_Signaling_FSM_LAMP && stateConfVector[scvi_FSM_Festo1_Signaling_FSM_LAMP] <= FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Blinking1HZ);
			break;
		}
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp] >= FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp && stateConfVector[scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp] <= FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Blinking1HZ);
			break;
		}
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off] == FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off);
			break;
		}
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant] == FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant);
			break;
		}
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz] == FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz);
			break;
		}
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off] == FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off);
			break;
		}
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant] == FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant);
			break;
		}
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz] == FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz);
			break;
		}
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off] == FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off);
			break;
		}
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant] == FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant);
			break;
		}
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Blinking1HZ :
		{
			return  (stateConfVector[scvi_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Blinking1HZ] == FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Blinking1HZ);
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Ingress_Ingress] >= FSM::State::FSM_Festo2__Ingress_Ingress && stateConfVector[scvi_FSM_Festo2__Ingress_Ingress] <= FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_ERROR);
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_Idle :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Ingress_Ingress_Ingress_Idle] == FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_Idle);
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance] == FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance);
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukPresent :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Ingress_Ingress_Ingress_PukPresent] == FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukPresent);
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukExpected :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Ingress_Ingress_Ingress_PukExpected] == FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukExpected);
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukinLBF2 :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Ingress_Ingress_Ingress_PukinLBF2] == FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukinLBF2);
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_ERROR :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Ingress_Ingress_Ingress_ERROR] == FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_ERROR);
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_E_STOP :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Ingress_E_STOP] == FSM::State::FSM_Festo2__Ingress_E_STOP);
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Paused :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Ingress_Paused] == FSM::State::FSM_Festo2__Ingress_Paused);
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Starting :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Ingress_Starting] == FSM::State::FSM_Festo2__Ingress_Starting);
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_ErrorFST2 :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Ingress_ErrorFST2] == FSM::State::FSM_Festo2__Ingress_ErrorFST2);
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement :
		{
			return  (stateConfVector[scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement] >= FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement && stateConfVector[scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement] <= FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error);
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle :
		{
			return  (stateConfVector[scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle] == FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle);
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent :
		{
			return  (stateConfVector[scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent] == FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent);
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected :
		{
			return  (stateConfVector[scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected] == FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected);
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring :
		{
			return  (stateConfVector[scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring] >= FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring && stateConfVector[scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring] <= FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final_);
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A :
		{
			return  (stateConfVector[scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A] == FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A);
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B :
		{
			return  (stateConfVector[scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B] == FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B);
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C :
		{
			return  (stateConfVector[scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C] == FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C);
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error :
		{
			return  (stateConfVector[scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error] == FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error);
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate :
		{
			return  (stateConfVector[scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate] == FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate);
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final_ :
		{
			return  (stateConfVector[scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final_] == FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final_);
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error :
		{
			return  (stateConfVector[scvi_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error] == FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error);
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_Paused :
		{
			return  (stateConfVector[scvi_FSM_Festo2__HeightMeasurement_Paused] == FSM::State::FSM_Festo2__HeightMeasurement_Paused);
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_E_STOP :
		{
			return  (stateConfVector[scvi_FSM_Festo2__HeightMeasurement_E_STOP] == FSM::State::FSM_Festo2__HeightMeasurement_E_STOP);
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_Start :
		{
			return  (stateConfVector[scvi_FSM_Festo2__HeightMeasurement_Start] == FSM::State::FSM_Festo2__HeightMeasurement_Start);
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_ErrorFST2 :
		{
			return  (stateConfVector[scvi_FSM_Festo2__HeightMeasurement_ErrorFST2] == FSM::State::FSM_Festo2__HeightMeasurement_ErrorFST2);
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Egress_Egress] >= FSM::State::FSM_Festo2__Egress_Egress && stateConfVector[scvi_FSM_Festo2__Egress_Egress] <= FSM::State::FSM_Festo2__Egress_Egress_Egress_Error);
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_IDLE :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Egress_Egress_Egress_IDLE] == FSM::State::FSM_Festo2__Egress_Egress_Egress_IDLE);
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_PukPresent :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Egress_Egress_Egress_PukPresent] == FSM::State::FSM_Festo2__Egress_Egress_Egress_PukPresent);
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_Transfer :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Egress_Egress_Egress_Transfer] == FSM::State::FSM_Festo2__Egress_Egress_Egress_Transfer);
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_PukExpected :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Egress_Egress_Egress_PukExpected] == FSM::State::FSM_Festo2__Egress_Egress_Egress_PukExpected);
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_Error :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Egress_Egress_Egress_Error] == FSM::State::FSM_Festo2__Egress_Egress_Egress_Error);
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Paused :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Egress_Paused] == FSM::State::FSM_Festo2__Egress_Paused);
			break;
		}
		case FSM::State::FSM_Festo2__Egress_E_STOP :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Egress_E_STOP] == FSM::State::FSM_Festo2__Egress_E_STOP);
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Start :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Egress_Start] == FSM::State::FSM_Festo2__Egress_Start);
			break;
		}
		case FSM::State::FSM_Festo2__Egress_ErrorFST2 :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Egress_ErrorFST2] == FSM::State::FSM_Festo2__Egress_ErrorFST2);
			break;
		}
		case FSM::State::FSM_Festo2__Motor_SystemMotor :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Motor_SystemMotor] >= FSM::State::FSM_Festo2__Motor_SystemMotor && stateConfVector[scvi_FSM_Festo2__Motor_SystemMotor] <= FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop);
			break;
		}
		case FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward] == FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward);
			break;
		}
		case FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow] == FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow);
			break;
		}
		case FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop] == FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop);
			break;
		}
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Signaling_FSM_LAMP] >= FSM::State::FSM_Festo2__Signaling_FSM_LAMP && stateConfVector[scvi_FSM_Festo2__Signaling_FSM_LAMP] <= FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant);
			break;
		}
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp] >= FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp && stateConfVector[scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp] <= FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant);
			break;
		}
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off] == FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off);
			break;
		}
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant] == FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant);
			break;
		}
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz] == FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz);
			break;
		}
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off] == FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off);
			break;
		}
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant] == FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant);
			break;
		}
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz] == FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz);
			break;
		}
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off] == FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off);
			break;
		}
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant] == FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant);
			break;
		}
		case FSM::State::TEST_EvaluateTester :
		{
			return  (stateConfVector[scvi_TEST_EvaluateTester] == FSM::State::TEST_EvaluateTester);
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Errors_FSM_Errors] >= FSM::State::FSM_Festo1__Errors_FSM_Errors && stateConfVector[scvi_FSM_Festo1__Errors_FSM_Errors] <= FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart);
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart] == FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart);
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukUnacknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukUnacknowledged] == FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukUnacknowledged);
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart] == FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart);
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukAcknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukAcknowledged] == FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukAcknowledged);
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___Idle :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Errors_FSM_Errors___Idle] == FSM::State::FSM_Festo1__Errors_FSM_Errors___Idle);
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart] == FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart);
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressMissingPukAcknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressMissingPukAcknowledged] == FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressMissingPukAcknowledged);
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressPukUnacknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressPukUnacknowledged] == FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressPukUnacknowledged);
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMPukAcknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Errors_FSM_Errors___ErrorinHMPukAcknowledged] == FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMPukAcknowledged);
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMUnacknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Errors_FSM_Errors___ErrorinHMUnacknowledged] == FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMUnacknowledged);
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged] == FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged);
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressUnacknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressUnacknowledged] == FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressUnacknowledged);
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart] == FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart);
			break;
		}
		case FSM::State::FSM_Festo1__Errors_EStop :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Errors_EStop] == FSM::State::FSM_Festo1__Errors_EStop);
			break;
		}
		case FSM::State::FSM_Festo1__Errors_Start :
		{
			return  (stateConfVector[scvi_FSM_Festo1__Errors_Start] == FSM::State::FSM_Festo1__Errors_Start);
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting :
		{
			return  (stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_Sorting] >= FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting && stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_Sorting] <= FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector);
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle :
		{
			return  (stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle] == FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle);
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent :
		{
			return  (stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent] == FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent);
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected :
		{
			return  (stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected] == FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected);
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate :
		{
			return  (stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate] == FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate);
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider :
		{
			return  (stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider] == FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider);
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector :
		{
			return  (stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector] == FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector);
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider :
		{
			return  (stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider] == FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider);
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector :
		{
			return  (stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector] == FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector);
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter :
		{
			return  (stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter] == FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter);
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error :
		{
			return  (stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error] == FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error);
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceDivider :
		{
			return  (stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceDivider] == FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceDivider);
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector :
		{
			return  (stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector] == FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector);
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Paused :
		{
			return  (stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_Paused] == FSM::State::Copy_1_FSM_Festo1__Sorting_Paused);
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_E_STOP :
		{
			return  (stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_E_STOP] == FSM::State::Copy_1_FSM_Festo1__Sorting_E_STOP);
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Start :
		{
			return  (stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_Start] == FSM::State::Copy_1_FSM_Festo1__Sorting_Start);
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_ErrorFST1 :
		{
			return  (stateConfVector[scvi_Copy_1_FSM_Festo1__Sorting_ErrorFST1] == FSM::State::Copy_1_FSM_Festo1__Sorting_ErrorFST1);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors] >= FSM::State::FSM_Festo2__Errors_FSM_Errors && stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors] <= FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingUnacknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingUnacknowledged] == FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingUnacknowledged);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart] == FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged] == FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle] == FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart] == FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUnacknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUnacknowledged] == FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUnacknowledged);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged] == FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged] == FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressAcknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressAcknowledged] == FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressAcknowledged);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged] == FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMUnacknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMUnacknowledged] == FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMUnacknowledged);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart] == FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart] == FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorRampFullUnacknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorRampFullUnacknowledged] == FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorRampFullUnacknowledged);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged] == FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart] == FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_EStop :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_EStop] == FSM::State::FSM_Festo2__Errors_EStop);
			break;
		}
		case FSM::State::FSM_Festo2__Errors_Start :
		{
			return  (stateConfVector[scvi_FSM_Festo2__Errors_Start] == FSM::State::FSM_Festo2__Errors_Start);
			break;
		}
		default:
		{
			/* State is not active*/
			return false;
			break;
		}
	}
}

bool FSM::getCalibrated() const noexcept
{
	return calibrated
	;
}

void FSM::setCalibrated(bool calibrated_) noexcept
{
	this->calibrated = calibrated_;
}
bool FSM::getEStopCalibratedReturn() const noexcept
{
	return eStopCalibratedReturn
	;
}

void FSM::setEStopCalibratedReturn(bool eStopCalibratedReturn_) noexcept
{
	this->eStopCalibratedReturn = eStopCalibratedReturn_;
}
bool FSM::getServiceModeReturn() const noexcept
{
	return serviceModeReturn
	;
}

void FSM::setServiceModeReturn(bool serviceModeReturn_) noexcept
{
	this->serviceModeReturn = serviceModeReturn_;
}
bool FSM::getReadyReturn() const noexcept
{
	return readyReturn
	;
}

void FSM::setReadyReturn(bool readyReturn_) noexcept
{
	this->readyReturn = readyReturn_;
}
bool FSM::getIsEStop1High() const noexcept
{
	return isEStop1High
	;
}

void FSM::setIsEStop1High(bool isEStop1High_) noexcept
{
	this->isEStop1High = isEStop1High_;
}
bool FSM::getIsEStop2High() const noexcept
{
	return isEStop2High
	;
}

void FSM::setIsEStop2High(bool isEStop2High_) noexcept
{
	this->isEStop2High = isEStop2High_;
}
bool FSM::getIsBGR1Pressed() const noexcept
{
	return isBGR1Pressed
	;
}

void FSM::setIsBGR1Pressed(bool isBGR1Pressed_) noexcept
{
	this->isBGR1Pressed = isBGR1Pressed_;
}
bool FSM::getIsBGR2Pressed() const noexcept
{
	return isBGR2Pressed
	;
}

void FSM::setIsBGR2Pressed(bool isBGR2Pressed_) noexcept
{
	this->isBGR2Pressed = isBGR2Pressed_;
}
bool FSM::getEStopActive() const noexcept
{
	return eStopActive
	;
}

void FSM::setEStopActive(bool eStopActive_) noexcept
{
	this->eStopActive = eStopActive_;
}
sc::integer FSM::getFST_1_HM_Counter() const noexcept
{
	return FST_1_HM_Counter
	;
}

void FSM::setFST_1_HM_Counter(sc::integer FST_1_HM_Counter_) noexcept
{
	this->FST_1_HM_Counter = FST_1_HM_Counter_;
}
sc::integer FSM::getAReferenceMinCount() const noexcept
{
	return AReferenceMinCount
	;
}

void FSM::setAReferenceMinCount(sc::integer AReferenceMinCount_) noexcept
{
	this->AReferenceMinCount = AReferenceMinCount_;
}
sc::integer FSM::getAReferenceMaxCount() const noexcept
{
	return AReferenceMaxCount
	;
}

void FSM::setAReferenceMaxCount(sc::integer AReferenceMaxCount_) noexcept
{
	this->AReferenceMaxCount = AReferenceMaxCount_;
}
sc::integer FSM::getBReferenceMinCount() const noexcept
{
	return BReferenceMinCount
	;
}

void FSM::setBReferenceMinCount(sc::integer BReferenceMinCount_) noexcept
{
	this->BReferenceMinCount = BReferenceMinCount_;
}
sc::integer FSM::getBReferenceMaxCount() const noexcept
{
	return BReferenceMaxCount
	;
}

void FSM::setBReferenceMaxCount(sc::integer BReferenceMaxCount_) noexcept
{
	this->BReferenceMaxCount = BReferenceMaxCount_;
}
sc::integer FSM::getCReferenceMinCount() const noexcept
{
	return CReferenceMinCount
	;
}

void FSM::setCReferenceMinCount(sc::integer CReferenceMinCount_) noexcept
{
	this->CReferenceMinCount = CReferenceMinCount_;
}
sc::integer FSM::getCReferenceMaxCount() const noexcept
{
	return CReferenceMaxCount
	;
}

void FSM::setCReferenceMaxCount(sc::integer CReferenceMaxCount_) noexcept
{
	this->CReferenceMaxCount = CReferenceMaxCount_;
}
sc::integer FSM::getAReferenceHeight() const noexcept
{
	return AReferenceHeight
	;
}

void FSM::setAReferenceHeight(sc::integer AReferenceHeight_) noexcept
{
	this->AReferenceHeight = AReferenceHeight_;
}
sc::integer FSM::getBReferenceHeight() const noexcept
{
	return BReferenceHeight
	;
}

void FSM::setBReferenceHeight(sc::integer BReferenceHeight_) noexcept
{
	this->BReferenceHeight = BReferenceHeight_;
}
sc::integer FSM::getCReferenceHeight() const noexcept
{
	return CReferenceHeight
	;
}

void FSM::setCReferenceHeight(sc::integer CReferenceHeight_) noexcept
{
	this->CReferenceHeight = CReferenceHeight_;
}
sc::integer FSM::getHeightThreshhold() const noexcept
{
	return HeightThreshhold
	;
}

void FSM::setHeightThreshhold(sc::integer HeightThreshhold_) noexcept
{
	this->HeightThreshhold = HeightThreshhold_;
}
sc::integer FSM::getMaxSampleCount() const noexcept
{
	return MaxSampleCount
	;
}

void FSM::setMaxSampleCount(sc::integer MaxSampleCount_) noexcept
{
	this->MaxSampleCount = MaxSampleCount_;
}
sc::integer FSM::getFST_1_currentValue() const noexcept
{
	return FST_1_currentValue
	;
}

void FSM::setFST_1_currentValue(sc::integer FST_1_currentValue_) noexcept
{
	this->FST_1_currentValue = FST_1_currentValue_;
}
sc::integer FSM::getFST_1_sampleCount() const noexcept
{
	return FST_1_sampleCount
	;
}

void FSM::setFST_1_sampleCount(sc::integer FST_1_sampleCount_) noexcept
{
	this->FST_1_sampleCount = FST_1_sampleCount_;
}
sc::integer FSM::getFST_1_generalCount() const noexcept
{
	return FST_1_generalCount
	;
}

void FSM::setFST_1_generalCount(sc::integer FST_1_generalCount_) noexcept
{
	this->FST_1_generalCount = FST_1_generalCount_;
}
bool FSM::getFST1RampFull() const noexcept
{
	return FST1RampFull
	;
}

void FSM::setFST1RampFull(bool FST1RampFull_) noexcept
{
	this->FST1RampFull = FST1RampFull_;
}
bool FSM::getFST1isMetal() const noexcept
{
	return FST1isMetal
	;
}

void FSM::setFST1isMetal(bool FST1isMetal_) noexcept
{
	this->FST1isMetal = FST1isMetal_;
}
bool FSM::getFST_1_isEjector() const noexcept
{
	return FST_1_isEjector
	;
}

void FSM::setFST_1_isEjector(bool FST_1_isEjector_) noexcept
{
	this->FST_1_isEjector = FST_1_isEjector_;
}
sc::integer FSM::getFST1_Sorting_Counter() const noexcept
{
	return FST1_Sorting_Counter
	;
}

void FSM::setFST1_Sorting_Counter(sc::integer FST1_Sorting_Counter_) noexcept
{
	this->FST1_Sorting_Counter = FST1_Sorting_Counter_;
}
sc::integer FSM::getFST_1_Egress_Counter() const noexcept
{
	return FST_1_Egress_Counter
	;
}

void FSM::setFST_1_Egress_Counter(sc::integer FST_1_Egress_Counter_) noexcept
{
	this->FST_1_Egress_Counter = FST_1_Egress_Counter_;
}
bool FSM::getLbf_1_isOpen() const noexcept
{
	return lbf_1_isOpen
	;
}

void FSM::setLbf_1_isOpen(bool lbf_1_isOpen_) noexcept
{
	this->lbf_1_isOpen = lbf_1_isOpen_;
}
bool FSM::getLbf_1_isOpenCopy() const noexcept
{
	return lbf_1_isOpenCopy
	;
}

void FSM::setLbf_1_isOpenCopy(bool lbf_1_isOpenCopy_) noexcept
{
	this->lbf_1_isOpenCopy = lbf_1_isOpenCopy_;
}
bool FSM::getHs_1_isOpen() const noexcept
{
	return hs_1_isOpen
	;
}

void FSM::setHs_1_isOpen(bool hs_1_isOpen_) noexcept
{
	this->hs_1_isOpen = hs_1_isOpen_;
}
bool FSM::getHs_1_isOpenCopy() const noexcept
{
	return hs_1_isOpenCopy
	;
}

void FSM::setHs_1_isOpenCopy(bool hs_1_isOpenCopy_) noexcept
{
	this->hs_1_isOpenCopy = hs_1_isOpenCopy_;
}
bool FSM::getLbm_1_isOpen() const noexcept
{
	return lbm_1_isOpen
	;
}

void FSM::setLbm_1_isOpen(bool lbm_1_isOpen_) noexcept
{
	this->lbm_1_isOpen = lbm_1_isOpen_;
}
bool FSM::getLbm_1_isOpenCopy() const noexcept
{
	return lbm_1_isOpenCopy
	;
}

void FSM::setLbm_1_isOpenCopy(bool lbm_1_isOpenCopy_) noexcept
{
	this->lbm_1_isOpenCopy = lbm_1_isOpenCopy_;
}
bool FSM::getLbe_1_isOpen() const noexcept
{
	return lbe_1_isOpen
	;
}

void FSM::setLbe_1_isOpen(bool lbe_1_isOpen_) noexcept
{
	this->lbe_1_isOpen = lbe_1_isOpen_;
}
bool FSM::getLbe_1_isOpenCopy() const noexcept
{
	return lbe_1_isOpenCopy
	;
}

void FSM::setLbe_1_isOpenCopy(bool lbe_1_isOpenCopy_) noexcept
{
	this->lbe_1_isOpenCopy = lbe_1_isOpenCopy_;
}
bool FSM::getLbr_1_isOpen() const noexcept
{
	return lbr_1_isOpen
	;
}

void FSM::setLbr_1_isOpen(bool lbr_1_isOpen_) noexcept
{
	this->lbr_1_isOpen = lbr_1_isOpen_;
}
bool FSM::getLbr_1_isOpenCopy() const noexcept
{
	return lbr_1_isOpenCopy
	;
}

void FSM::setLbr_1_isOpenCopy(bool lbr_1_isOpenCopy_) noexcept
{
	this->lbr_1_isOpenCopy = lbr_1_isOpenCopy_;
}
sc::integer FSM::getMotor1Stop() const noexcept
{
	return motor1Stop
	;
}

void FSM::setMotor1Stop(sc::integer motor1Stop_) noexcept
{
	this->motor1Stop = motor1Stop_;
}
sc::integer FSM::getMotor1Slow() const noexcept
{
	return motor1Slow
	;
}

void FSM::setMotor1Slow(sc::integer motor1Slow_) noexcept
{
	this->motor1Slow = motor1Slow_;
}
sc::integer FSM::getMotor1Forward() const noexcept
{
	return motor1Forward
	;
}

void FSM::setMotor1Forward(sc::integer motor1Forward_) noexcept
{
	this->motor1Forward = motor1Forward_;
}
bool FSM::getFst_2_ready() const noexcept
{
	return fst_2_ready
	;
}

void FSM::setFst_2_ready(bool fst_2_ready_) noexcept
{
	this->fst_2_ready = fst_2_ready_;
}
sc::integer FSM::getFST_2_currentValue() const noexcept
{
	return FST_2_currentValue
	;
}

void FSM::setFST_2_currentValue(sc::integer FST_2_currentValue_) noexcept
{
	this->FST_2_currentValue = FST_2_currentValue_;
}
sc::integer FSM::getFST_2_sampleCount() const noexcept
{
	return FST_2_sampleCount
	;
}

void FSM::setFST_2_sampleCount(sc::integer FST_2_sampleCount_) noexcept
{
	this->FST_2_sampleCount = FST_2_sampleCount_;
}
sc::integer FSM::getFST_2_generalCount() const noexcept
{
	return FST_2_generalCount
	;
}

void FSM::setFST_2_generalCount(sc::integer FST_2_generalCount_) noexcept
{
	this->FST_2_generalCount = FST_2_generalCount_;
}
bool FSM::getFST2RampFull() const noexcept
{
	return FST2RampFull
	;
}

void FSM::setFST2RampFull(bool FST2RampFull_) noexcept
{
	this->FST2RampFull = FST2RampFull_;
}
bool FSM::getFST2isMetal() const noexcept
{
	return FST2isMetal
	;
}

void FSM::setFST2isMetal(bool FST2isMetal_) noexcept
{
	this->FST2isMetal = FST2isMetal_;
}
bool FSM::getFST_2_isEjector() const noexcept
{
	return FST_2_isEjector
	;
}

void FSM::setFST_2_isEjector(bool FST_2_isEjector_) noexcept
{
	this->FST_2_isEjector = FST_2_isEjector_;
}
bool FSM::getLbf_2_isOpen() const noexcept
{
	return lbf_2_isOpen
	;
}

void FSM::setLbf_2_isOpen(bool lbf_2_isOpen_) noexcept
{
	this->lbf_2_isOpen = lbf_2_isOpen_;
}
bool FSM::getLbf_2_isOpenCopy() const noexcept
{
	return lbf_2_isOpenCopy
	;
}

void FSM::setLbf_2_isOpenCopy(bool lbf_2_isOpenCopy_) noexcept
{
	this->lbf_2_isOpenCopy = lbf_2_isOpenCopy_;
}
bool FSM::getHs_2_isOpen() const noexcept
{
	return hs_2_isOpen
	;
}

void FSM::setHs_2_isOpen(bool hs_2_isOpen_) noexcept
{
	this->hs_2_isOpen = hs_2_isOpen_;
}
bool FSM::getHs_2_isOpenCopy() const noexcept
{
	return hs_2_isOpenCopy
	;
}

void FSM::setHs_2_isOpenCopy(bool hs_2_isOpenCopy_) noexcept
{
	this->hs_2_isOpenCopy = hs_2_isOpenCopy_;
}
bool FSM::getLbm_2_isOpen() const noexcept
{
	return lbm_2_isOpen
	;
}

void FSM::setLbm_2_isOpen(bool lbm_2_isOpen_) noexcept
{
	this->lbm_2_isOpen = lbm_2_isOpen_;
}
bool FSM::getLbm_2_isOpenCopy() const noexcept
{
	return lbm_2_isOpenCopy
	;
}

void FSM::setLbm_2_isOpenCopy(bool lbm_2_isOpenCopy_) noexcept
{
	this->lbm_2_isOpenCopy = lbm_2_isOpenCopy_;
}
bool FSM::getLbr_2_isOpen() const noexcept
{
	return lbr_2_isOpen
	;
}

void FSM::setLbr_2_isOpen(bool lbr_2_isOpen_) noexcept
{
	this->lbr_2_isOpen = lbr_2_isOpen_;
}
bool FSM::getLbr_2_isOpenCopy() const noexcept
{
	return lbr_2_isOpenCopy
	;
}

void FSM::setLbr_2_isOpenCopy(bool lbr_2_isOpenCopy_) noexcept
{
	this->lbr_2_isOpenCopy = lbr_2_isOpenCopy_;
}
bool FSM::getLbe_2_isOpen() const noexcept
{
	return lbe_2_isOpen
	;
}

void FSM::setLbe_2_isOpen(bool lbe_2_isOpen_) noexcept
{
	this->lbe_2_isOpen = lbe_2_isOpen_;
}
bool FSM::getLbe_2_isOpenCopy() const noexcept
{
	return lbe_2_isOpenCopy
	;
}

void FSM::setLbe_2_isOpenCopy(bool lbe_2_isOpenCopy_) noexcept
{
	this->lbe_2_isOpenCopy = lbe_2_isOpenCopy_;
}
sc::integer FSM::getMotor2Stop() const noexcept
{
	return motor2Stop
	;
}

void FSM::setMotor2Stop(sc::integer motor2Stop_) noexcept
{
	this->motor2Stop = motor2Stop_;
}
sc::integer FSM::getMotor2Slow() const noexcept
{
	return motor2Slow
	;
}

void FSM::setMotor2Slow(sc::integer motor2Slow_) noexcept
{
	this->motor2Slow = motor2Slow_;
}
sc::integer FSM::getMotor2Forward() const noexcept
{
	return motor2Forward
	;
}

void FSM::setMotor2Forward(sc::integer motor2Forward_) noexcept
{
	this->motor2Forward = motor2Forward_;
}
bool FSM::getEStop_lamp_active() const noexcept
{
	return eStop_lamp_active
	;
}

void FSM::setEStop_lamp_active(bool eStop_lamp_active_) noexcept
{
	this->eStop_lamp_active = eStop_lamp_active_;
}
bool FSM::getRunning_lamp_active() const noexcept
{
	return running_lamp_active
	;
}

void FSM::setRunning_lamp_active(bool running_lamp_active_) noexcept
{
	this->running_lamp_active = running_lamp_active_;
}
bool FSM::getWarning_lamp_active() const noexcept
{
	return warning_lamp_active
	;
}

void FSM::setWarning_lamp_active(bool warning_lamp_active_) noexcept
{
	this->warning_lamp_active = warning_lamp_active_;
}

// implementations of all internal functions
void FSM::enact_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM__final_()
{
	completed = true;
}

/* Entry action for state 'EjectingDivider'. */
void FSM::enact_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider()
{
	/* Entry action for state 'EjectingDivider'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'TransferEjector'. */
void FSM::enact_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector()
{
	/* Entry action for state 'TransferEjector'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'TransferDivider'. */
void FSM::enact_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider()
{
	/* Entry action for state 'TransferDivider'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'EjectingEjector'. */
void FSM::enact_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector()
{
	/* Entry action for state 'EjectingEjector'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'EvaluateCounter'. */
void FSM::enact_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter()
{
	/* Entry action for state 'EvaluateCounter'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'Forward'. */
void FSM::enact_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward()
{
	/* Entry action for state 'Forward'. */
	MOTOR_1_FAST_observable.next();
}

/* Entry action for state 'Slow'. */
void FSM::enact_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow()
{
	/* Entry action for state 'Slow'. */
	MOTOR_1_SLOW_observable.next();
}

/* Entry action for state 'Stop'. */
void FSM::enact_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop()
{
	/* Entry action for state 'Stop'. */
	MOTOR_1_STOP_observable.next();
}

/* Entry action for state 'ServiceMode'. */
void FSM::enact___ServiceMode()
{
	/* Entry action for state 'ServiceMode'. */
	SYSTEM_SERVICE_IN_observable.next();
	raiseLocal_SYSTEM_SERVICE_IN();
}

/* Entry action for state 'Off'. */
void FSM::enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off()
{
	/* Entry action for state 'Off'. */
	LG1_OFF_observable.next();
}

/* Entry action for state 'Constant'. */
void FSM::enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant()
{
	/* Entry action for state 'Constant'. */
	LG1_ON_observable.next();
}

/* Entry action for state 'Blinking 1Hz'. */
void FSM::enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz()
{
	/* Entry action for state 'Blinking 1Hz'. */
	LG1_BLINKING_1HZ_observable.next();
}

/* Entry action for state 'Off'. */
void FSM::enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off()
{
	/* Entry action for state 'Off'. */
	LY1_OFF_observable.next();
}

/* Entry action for state 'Constant'. */
void FSM::enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant()
{
	/* Entry action for state 'Constant'. */
	LY1_ON_observable.next();
}

/* Entry action for state 'Blinking 1Hz'. */
void FSM::enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz()
{
	/* Entry action for state 'Blinking 1Hz'. */
	LY1_BLINKING_1HZ_observable.next();
}

/* Entry action for state 'Off'. */
void FSM::enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off()
{
	/* Entry action for state 'Off'. */
	LR1_OFF_observable.next();
}

/* Entry action for state 'Constant'. */
void FSM::enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant()
{
	/* Entry action for state 'Constant'. */
	LR1_ON_observable.next();
}

/* Entry action for state 'ERROR'. */
void FSM::enact_FSM_Festo2__Ingress_Ingress_Ingress_ERROR()
{
	/* Entry action for state 'ERROR'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

void FSM::enact_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final_()
{
	completed = true;
}

/* Entry action for state 'Error'. */
void FSM::enact_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error()
{
	/* Entry action for state 'Error'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'Transfer'. */
void FSM::enact_FSM_Festo2__Egress_Egress_Egress_Transfer()
{
	/* Entry action for state 'Transfer'. */
	motor2Stop++;
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'Forward'. */
void FSM::enact_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward()
{
	/* Entry action for state 'Forward'. */
	MOTOR_2_FAST_observable.next();
}

/* Entry action for state 'Slow'. */
void FSM::enact_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow()
{
	/* Entry action for state 'Slow'. */
	MOTOR_2_SLOW_observable.next();
}

/* Entry action for state 'Stop'. */
void FSM::enact_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop()
{
	/* Entry action for state 'Stop'. */
	MOTOR_2_STOP_observable.next();
}

/* Entry action for state 'Off'. */
void FSM::enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off()
{
	/* Entry action for state 'Off'. */
	LG2_OFF_observable.next();
}

/* Entry action for state 'Constant'. */
void FSM::enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant()
{
	/* Entry action for state 'Constant'. */
	LG2_ON_observable.next();
}

/* Entry action for state 'Blinking 1Hz'. */
void FSM::enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz()
{
	/* Entry action for state 'Blinking 1Hz'. */
	LG2_BLINKING_1HZ_observable.next();
}

/* Entry action for state 'Off'. */
void FSM::enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off()
{
	/* Entry action for state 'Off'. */
	LY2_OFF_observable.next();
}

/* Entry action for state 'Constant'. */
void FSM::enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant()
{
	/* Entry action for state 'Constant'. */
	LY2_ON_observable.next();
}

/* Entry action for state 'Blinking 1Hz'. */
void FSM::enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz()
{
	/* Entry action for state 'Blinking 1Hz'. */
	LY2_BLINKING_1HZ_observable.next();
}

/* Entry action for state 'Off'. */
void FSM::enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off()
{
	/* Entry action for state 'Off'. */
	LR2_OFF_observable.next();
}

/* Entry action for state 'Constant'. */
void FSM::enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant()
{
	/* Entry action for state 'Constant'. */
	LR2_ON_observable.next();
}

/* Entry action for state 'ErrorinIngressRestart'. */
void FSM::enact_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart()
{
	/* Entry action for state 'ErrorinIngressRestart'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'ErrorinIngressAcknowledged'. */
void FSM::enact_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged()
{
	/* Entry action for state 'ErrorinIngressAcknowledged'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

void FSM::enact_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart()
{
	completed = true;
}

/* Entry action for state 'EjectingDivider'. */
void FSM::enact_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider()
{
	/* Entry action for state 'EjectingDivider'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'TransferEjector'. */
void FSM::enact_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector()
{
	/* Entry action for state 'TransferEjector'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'TransferDivider'. */
void FSM::enact_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider()
{
	/* Entry action for state 'TransferDivider'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'EjectingEjector'. */
void FSM::enact_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector()
{
	/* Entry action for state 'EjectingEjector'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'EvaluateCounter'. */
void FSM::enact_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter()
{
	/* Entry action for state 'EvaluateCounter'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'ErrorinIngressRestart'. */
void FSM::enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart()
{
	/* Entry action for state 'ErrorinIngressRestart'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'ErrorinSortingPukAcknowledged'. */
void FSM::enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged()
{
	/* Entry action for state 'ErrorinSortingPukAcknowledged'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'ErrorinEgressUPRestart'. */
void FSM::enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart()
{
	/* Entry action for state 'ErrorinEgressUPRestart'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'ErrorinEgressAcknowledged'. */
void FSM::enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged()
{
	/* Entry action for state 'ErrorinEgressAcknowledged'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'ErrorinIngressUnacknowledged'. */
void FSM::enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged()
{
	/* Entry action for state 'ErrorinIngressUnacknowledged'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'ErrorinHMAcknowledged'. */
void FSM::enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged()
{
	/* Entry action for state 'ErrorinHMAcknowledged'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'ErrorinHMRestart'. */
void FSM::enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart()
{
	/* Entry action for state 'ErrorinHMRestart'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'ErrorinSortingRestart'. */
void FSM::enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart()
{
	/* Entry action for state 'ErrorinSortingRestart'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'ErrorinRampFullAcknowledged'. */
void FSM::enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged()
{
	/* Entry action for state 'ErrorinRampFullAcknowledged'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Entry action for state 'ErrorinRampFullRestart'. */
void FSM::enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart()
{
	/* Entry action for state 'ErrorinRampFullRestart'. */
	EVALUATE_observable.next();
	raiseLocal_EVALUATE();
}

/* Exit action for state 'ServiceMode'. */
void FSM::exact___ServiceMode()
{
	/* Exit action for state 'ServiceMode'. */
	SYSTEM_SERVICE_OUT_observable.next();
	raiseLocal_SYSTEM_SERVICE_OUT();
}

/* Exit action for state 'Transfer'. */
void FSM::exact_FSM_Festo2__Egress_Egress_Egress_Transfer()
{
	/* Exit action for state 'Transfer'. */
	motor2Stop--;
	FST_2_YELLOW_LAMP_OFF_observable.next();
	raiseLocal_FST_2_YELLOW_LAMP_OFF();
}

/* 'default' enter sequence for state Ingress */
void FSM::enseq_FSM_Festo1_Ingress_Ingress_default()
{
	/* 'default' enter sequence for state Ingress */
	enseq_FSM_Festo1_Ingress_Ingress_Ingress_default();
}

/* 'default' enter sequence for state Idle */
void FSM::enseq_FSM_Festo1_Ingress_Ingress_Ingress_Idle_default()
{
	/* 'default' enter sequence for state Idle */
	stateConfVector[0] = FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_Idle;
	stateConfVectorPosition = 0;
	historyVector[0] = stateConfVector[0];
}

/* 'default' enter sequence for state PukPresent */
void FSM::enseq_FSM_Festo1_Ingress_Ingress_Ingress_PukPresent_default()
{
	/* 'default' enter sequence for state PukPresent */
	stateConfVector[0] = FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_PukPresent;
	stateConfVectorPosition = 0;
	historyVector[0] = stateConfVector[0];
}

/* 'default' enter sequence for state CreatingDistance */
void FSM::enseq_FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance_default()
{
	/* 'default' enter sequence for state CreatingDistance */
	stateConfVector[0] = FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance;
	stateConfVectorPosition = 0;
	historyVector[0] = stateConfVector[0];
}

/* 'default' enter sequence for state Paused */
void FSM::enseq_FSM_Festo1_Ingress_Paused_default()
{
	/* 'default' enter sequence for state Paused */
	stateConfVector[0] = FSM::State::FSM_Festo1_Ingress_Paused;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state E_STOP */
void FSM::enseq_FSM_Festo1_Ingress_E_STOP_default()
{
	/* 'default' enter sequence for state E_STOP */
	stateConfVector[0] = FSM::State::FSM_Festo1_Ingress_E_STOP;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Start */
void FSM::enseq_FSM_Festo1_Ingress_Start_default()
{
	/* 'default' enter sequence for state Start */
	stateConfVector[0] = FSM::State::FSM_Festo1_Ingress_Start;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state ErrorFST1 */
void FSM::enseq_FSM_Festo1_Ingress_ErrorFST1_default()
{
	/* 'default' enter sequence for state ErrorFST1 */
	stateConfVector[0] = FSM::State::FSM_Festo1_Ingress_ErrorFST1;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state HeightMeasurement */
void FSM::enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_default()
{
	/* 'default' enter sequence for state HeightMeasurement */
	enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_default();
}

/* 'default' enter sequence for state Idle */
void FSM::enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle_default()
{
	/* 'default' enter sequence for state Idle */
	stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle;
	stateConfVectorPosition = 1;
	historyVector[1] = stateConfVector[1];
}

/* 'default' enter sequence for state Measuring */
void FSM::enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_default()
{
	/* 'default' enter sequence for state Measuring */
	enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_default();
	historyVector[1] = stateConfVector[1];
}

/* 'default' enter sequence for state A */
void FSM::enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_A_default()
{
	/* 'default' enter sequence for state A */
	stateConfVector[1] = FSM::State::A;
	stateConfVectorPosition = 1;
	historyVector[2] = stateConfVector[1];
}

/* 'default' enter sequence for state B */
void FSM::enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_B_default()
{
	/* 'default' enter sequence for state B */
	stateConfVector[1] = FSM::State::B;
	stateConfVectorPosition = 1;
	historyVector[2] = stateConfVector[1];
}

/* 'default' enter sequence for state C */
void FSM::enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_C_default()
{
	/* 'default' enter sequence for state C */
	stateConfVector[1] = FSM::State::C;
	stateConfVectorPosition = 1;
	historyVector[2] = stateConfVector[1];
}

/* 'default' enter sequence for state Error */
void FSM::enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error_default()
{
	/* 'default' enter sequence for state Error */
	stateConfVector[1] = FSM::State::Error;
	stateConfVectorPosition = 1;
	historyVector[2] = stateConfVector[1];
}

/* 'default' enter sequence for state Evaluate */
void FSM::enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Evaluate_default()
{
	/* 'default' enter sequence for state Evaluate */
	stateConfVector[1] = FSM::State::Evaluate;
	stateConfVectorPosition = 1;
	historyVector[2] = stateConfVector[1];
}

/* Default enter sequence for final state */
void FSM::enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM__final__default()
{
	/* Default enter sequence for final state */
	enact_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM__final_();
	stateConfVector[1] = FSM::State::_final_;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state PukPresent */
void FSM::enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent_default()
{
	/* 'default' enter sequence for state PukPresent */
	stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent;
	stateConfVectorPosition = 1;
	historyVector[1] = stateConfVector[1];
}

/* 'default' enter sequence for state PukExpected */
void FSM::enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected_default()
{
	/* 'default' enter sequence for state PukExpected */
	stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected;
	stateConfVectorPosition = 1;
	historyVector[1] = stateConfVector[1];
}

/* 'default' enter sequence for state Paused */
void FSM::enseq_FSM_Festo1_HeightMeasurement_Paused_default()
{
	/* 'default' enter sequence for state Paused */
	stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_Paused;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state E_STOP */
void FSM::enseq_FSM_Festo1_HeightMeasurement_E_STOP_default()
{
	/* 'default' enter sequence for state E_STOP */
	stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_E_STOP;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state Start */
void FSM::enseq_FSM_Festo1_HeightMeasurement_Start_default()
{
	/* 'default' enter sequence for state Start */
	stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_Start;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state ErrorFST1 */
void FSM::enseq_FSM_Festo1_HeightMeasurement_ErrorFST1_default()
{
	/* 'default' enter sequence for state ErrorFST1 */
	stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_ErrorFST1;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state Sorting */
void FSM::enseq_FSM_Festo1__Sorting_Sorting_default()
{
	/* 'default' enter sequence for state Sorting */
	enseq_FSM_Festo1__Sorting_Sorting_Sorting_default();
}

/* 'default' enter sequence for state Idle */
void FSM::enseq_FSM_Festo1__Sorting_Sorting_Sorting_Idle_default()
{
	/* 'default' enter sequence for state Idle */
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_Idle;
	stateConfVectorPosition = 2;
	historyVector[3] = stateConfVector[2];
}

/* 'default' enter sequence for state PukPresent */
void FSM::enseq_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent_default()
{
	/* 'default' enter sequence for state PukPresent */
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_PukPresent;
	stateConfVectorPosition = 2;
	historyVector[3] = stateConfVector[2];
}

/* 'default' enter sequence for state PukExpected */
void FSM::enseq_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected_default()
{
	/* 'default' enter sequence for state PukExpected */
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_PukExpected;
	stateConfVectorPosition = 2;
	historyVector[3] = stateConfVector[2];
}

/* 'default' enter sequence for state Evaluate */
void FSM::enseq_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate_default()
{
	/* 'default' enter sequence for state Evaluate */
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_Evaluate;
	stateConfVectorPosition = 2;
	historyVector[3] = stateConfVector[2];
}

/* 'default' enter sequence for state EjectingDivider */
void FSM::enseq_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider_default()
{
	/* 'default' enter sequence for state EjectingDivider */
	enact_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider();
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider;
	stateConfVectorPosition = 2;
	historyVector[3] = stateConfVector[2];
}

/* 'default' enter sequence for state TransferEjector */
void FSM::enseq_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector_default()
{
	/* 'default' enter sequence for state TransferEjector */
	enact_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector();
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector;
	stateConfVectorPosition = 2;
	historyVector[3] = stateConfVector[2];
}

/* 'default' enter sequence for state TransferDivider */
void FSM::enseq_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider_default()
{
	/* 'default' enter sequence for state TransferDivider */
	enact_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider();
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider;
	stateConfVectorPosition = 2;
	historyVector[3] = stateConfVector[2];
}

/* 'default' enter sequence for state EjectingEjector */
void FSM::enseq_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector_default()
{
	/* 'default' enter sequence for state EjectingEjector */
	enact_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector();
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector;
	stateConfVectorPosition = 2;
	historyVector[3] = stateConfVector[2];
}

/* 'default' enter sequence for state EvaluateCounter */
void FSM::enseq_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter_default()
{
	/* 'default' enter sequence for state EvaluateCounter */
	enact_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter();
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter;
	stateConfVectorPosition = 2;
	historyVector[3] = stateConfVector[2];
}

/* 'default' enter sequence for state Paused */
void FSM::enseq_FSM_Festo1__Sorting_Paused_default()
{
	/* 'default' enter sequence for state Paused */
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Paused;
	stateConfVectorPosition = 2;
}

/* 'default' enter sequence for state E_STOP */
void FSM::enseq_FSM_Festo1__Sorting_E_STOP_default()
{
	/* 'default' enter sequence for state E_STOP */
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_E_STOP;
	stateConfVectorPosition = 2;
}

/* 'default' enter sequence for state Start */
void FSM::enseq_FSM_Festo1__Sorting_Start_default()
{
	/* 'default' enter sequence for state Start */
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Start;
	stateConfVectorPosition = 2;
}

/* 'default' enter sequence for state ErrorFST1 */
void FSM::enseq_FSM_Festo1__Sorting_ErrorFST1_default()
{
	/* 'default' enter sequence for state ErrorFST1 */
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_ErrorFST1;
	stateConfVectorPosition = 2;
}

/* 'default' enter sequence for state Paused */
void FSM::enseq_FSM_Festo1__Egress_Paused_default()
{
	/* 'default' enter sequence for state Paused */
	stateConfVector[3] = FSM::State::FSM_Festo1__Egress_Paused;
	stateConfVectorPosition = 3;
}

/* 'default' enter sequence for state E_STOP */
void FSM::enseq_FSM_Festo1__Egress_E_STOP_default()
{
	/* 'default' enter sequence for state E_STOP */
	stateConfVector[3] = FSM::State::FSM_Festo1__Egress_E_STOP;
	stateConfVectorPosition = 3;
}

/* 'default' enter sequence for state Start */
void FSM::enseq_FSM_Festo1__Egress_Start_default()
{
	/* 'default' enter sequence for state Start */
	stateConfVector[3] = FSM::State::FSM_Festo1__Egress_Start;
	stateConfVectorPosition = 3;
}

/* 'default' enter sequence for state FST1Error */
void FSM::enseq_FSM_Festo1__Egress_FST1Error_default()
{
	/* 'default' enter sequence for state FST1Error */
	stateConfVector[3] = FSM::State::FSM_Festo1__Egress_FST1Error;
	stateConfVectorPosition = 3;
}

/* 'default' enter sequence for state Egress */
void FSM::enseq_FSM_Festo1__Egress_Egress_default()
{
	/* 'default' enter sequence for state Egress */
	enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_default();
}

/* 'default' enter sequence for state Waiting */
void FSM::enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Waiting_default()
{
	/* 'default' enter sequence for state Waiting */
	stateConfVector[3] = FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Waiting;
	stateConfVectorPosition = 3;
	historyVector[4] = stateConfVector[3];
}

/* 'default' enter sequence for state Transfer */
void FSM::enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer_default()
{
	/* 'default' enter sequence for state Transfer */
	stateConfVector[3] = FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer;
	stateConfVectorPosition = 3;
	historyVector[4] = stateConfVector[3];
}

/* 'default' enter sequence for state PukExpected */
void FSM::enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected_default()
{
	/* 'default' enter sequence for state PukExpected */
	stateConfVector[3] = FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected;
	stateConfVectorPosition = 3;
	historyVector[4] = stateConfVector[3];
}

/* 'default' enter sequence for state IDLE */
void FSM::enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE_default()
{
	/* 'default' enter sequence for state IDLE */
	stateConfVector[3] = FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE;
	stateConfVectorPosition = 3;
	historyVector[4] = stateConfVector[3];
}

/* 'default' enter sequence for state PukPresent */
void FSM::enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent_default()
{
	/* 'default' enter sequence for state PukPresent */
	stateConfVector[3] = FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent;
	stateConfVectorPosition = 3;
	historyVector[4] = stateConfVector[3];
}

/* 'default' enter sequence for state SystemMotor */
void FSM::enseq_FSM_QualityGate__Motor_SystemMotor_default()
{
	/* 'default' enter sequence for state SystemMotor */
	enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_default();
}

/* 'default' enter sequence for state Forward */
void FSM::enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_default()
{
	/* 'default' enter sequence for state Forward */
	enact_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward();
	stateConfVector[4] = FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward;
	stateConfVectorPosition = 4;
}

/* 'default' enter sequence for state Slow */
void FSM::enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_default()
{
	/* 'default' enter sequence for state Slow */
	enact_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow();
	stateConfVector[4] = FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow;
	stateConfVectorPosition = 4;
}

/* 'default' enter sequence for state Stop */
void FSM::enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_default()
{
	/* 'default' enter sequence for state Stop */
	enact_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop();
	stateConfVector[4] = FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop;
	stateConfVectorPosition = 4;
}

/* 'default' enter sequence for state Operational */
void FSM::enseq___Operational_default()
{
	/* 'default' enter sequence for state Operational */
	stateConfVector[5] = FSM::State::__Operational;
	stateConfVectorPosition = 5;
}

/* 'default' enter sequence for state Start */
void FSM::enseq___Start_default()
{
	/* 'default' enter sequence for state Start */
	stateConfVector[5] = FSM::State::__Start;
	stateConfVectorPosition = 5;
}

/* 'default' enter sequence for state Ready */
void FSM::enseq___Ready_default()
{
	/* 'default' enter sequence for state Ready */
	stateConfVector[5] = FSM::State::__Ready;
	stateConfVectorPosition = 5;
}

/* 'default' enter sequence for state ServiceMode */
void FSM::enseq___ServiceMode_default()
{
	/* 'default' enter sequence for state ServiceMode */
	enact___ServiceMode();
	stateConfVector[5] = FSM::State::__ServiceMode;
	stateConfVectorPosition = 5;
}

/* 'default' enter sequence for state EStopCalibration */
void FSM::enseq___EStopCalibration_default()
{
	/* 'default' enter sequence for state EStopCalibration */
	stateConfVector[5] = FSM::State::__EStopCalibration;
	stateConfVectorPosition = 5;
}

/* 'default' enter sequence for state EStopReceived */
void FSM::enseq___EStopReceived_default()
{
	/* 'default' enter sequence for state EStopReceived */
	stateConfVector[5] = FSM::State::__EStopReceived;
	stateConfVectorPosition = 5;
}

/* 'default' enter sequence for state EStopCleared */
void FSM::enseq___EStopCleared_default()
{
	/* 'default' enter sequence for state EStopCleared */
	stateConfVector[5] = FSM::State::__EStopCleared;
	stateConfVectorPosition = 5;
}

/* 'default' enter sequence for state ReveivedReset */
void FSM::enseq___ReveivedReset_default()
{
	/* 'default' enter sequence for state ReveivedReset */
	stateConfVector[5] = FSM::State::__ReveivedReset;
	stateConfVectorPosition = 5;
}

/* 'default' enter sequence for state Paused */
void FSM::enseq___Paused_default()
{
	/* 'default' enter sequence for state Paused */
	stateConfVector[5] = FSM::State::__Paused;
	stateConfVectorPosition = 5;
}

/* 'default' enter sequence for state FSM_LAMP */
void FSM::enseq_FSM_Festo1_Signaling_FSM_LAMP_default()
{
	/* 'default' enter sequence for state FSM_LAMP */
	enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_default();
}

/* 'default' enter sequence for state FSM_Lamp */
void FSM::enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_default()
{
	/* 'default' enter sequence for state FSM_Lamp */
	enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_default();
	enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_default();
	enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_default();
}

/* 'default' enter sequence for state Off */
void FSM::enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_default()
{
	/* 'default' enter sequence for state Off */
	enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
	stateConfVector[6] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off;
	stateConfVectorPosition = 6;
}

/* 'default' enter sequence for state Constant */
void FSM::enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_default()
{
	/* 'default' enter sequence for state Constant */
	enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant();
	stateConfVector[6] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant;
	stateConfVectorPosition = 6;
}

/* 'default' enter sequence for state Blinking 1Hz */
void FSM::enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz_default()
{
	/* 'default' enter sequence for state Blinking 1Hz */
	enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz();
	stateConfVector[6] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz;
	stateConfVectorPosition = 6;
}

/* 'default' enter sequence for state Off */
void FSM::enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_default()
{
	/* 'default' enter sequence for state Off */
	enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off();
	stateConfVector[7] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off;
	stateConfVectorPosition = 7;
}

/* 'default' enter sequence for state Constant */
void FSM::enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_default()
{
	/* 'default' enter sequence for state Constant */
	enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant();
	stateConfVector[7] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant;
	stateConfVectorPosition = 7;
}

/* 'default' enter sequence for state Blinking 1Hz */
void FSM::enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz_default()
{
	/* 'default' enter sequence for state Blinking 1Hz */
	enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz();
	stateConfVector[7] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz;
	stateConfVectorPosition = 7;
}

/* 'default' enter sequence for state Off */
void FSM::enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_default()
{
	/* 'default' enter sequence for state Off */
	enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off();
	stateConfVector[8] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off;
	stateConfVectorPosition = 8;
}

/* 'default' enter sequence for state Constant */
void FSM::enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_default()
{
	/* 'default' enter sequence for state Constant */
	enact_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant();
	stateConfVector[8] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant;
	stateConfVectorPosition = 8;
}

/* 'default' enter sequence for state Blinking1HZ */
void FSM::enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Blinking1HZ_default()
{
	/* 'default' enter sequence for state Blinking1HZ */
	stateConfVector[8] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Blinking1HZ;
	stateConfVectorPosition = 8;
}

/* 'default' enter sequence for state Ingress */
void FSM::enseq_FSM_Festo2__Ingress_Ingress_default()
{
	/* 'default' enter sequence for state Ingress */
	enseq_FSM_Festo2__Ingress_Ingress_Ingress_default();
}

/* 'default' enter sequence for state Idle */
void FSM::enseq_FSM_Festo2__Ingress_Ingress_Ingress_Idle_default()
{
	/* 'default' enter sequence for state Idle */
	stateConfVector[9] = FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_Idle;
	stateConfVectorPosition = 9;
	historyVector[5] = stateConfVector[9];
}

/* 'default' enter sequence for state CreatingDistance */
void FSM::enseq_FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance_default()
{
	/* 'default' enter sequence for state CreatingDistance */
	stateConfVector[9] = FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance;
	stateConfVectorPosition = 9;
	historyVector[5] = stateConfVector[9];
}

/* 'default' enter sequence for state PukPresent */
void FSM::enseq_FSM_Festo2__Ingress_Ingress_Ingress_PukPresent_default()
{
	/* 'default' enter sequence for state PukPresent */
	stateConfVector[9] = FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukPresent;
	stateConfVectorPosition = 9;
	historyVector[5] = stateConfVector[9];
}

/* 'default' enter sequence for state PukExpected */
void FSM::enseq_FSM_Festo2__Ingress_Ingress_Ingress_PukExpected_default()
{
	/* 'default' enter sequence for state PukExpected */
	stateConfVector[9] = FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukExpected;
	stateConfVectorPosition = 9;
	historyVector[5] = stateConfVector[9];
}

/* 'default' enter sequence for state PukinLBF2 */
void FSM::enseq_FSM_Festo2__Ingress_Ingress_Ingress_PukinLBF2_default()
{
	/* 'default' enter sequence for state PukinLBF2 */
	stateConfVector[9] = FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukinLBF2;
	stateConfVectorPosition = 9;
	historyVector[5] = stateConfVector[9];
}

/* 'default' enter sequence for state ERROR */
void FSM::enseq_FSM_Festo2__Ingress_Ingress_Ingress_ERROR_default()
{
	/* 'default' enter sequence for state ERROR */
	enact_FSM_Festo2__Ingress_Ingress_Ingress_ERROR();
	stateConfVector[9] = FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_ERROR;
	stateConfVectorPosition = 9;
	historyVector[5] = stateConfVector[9];
}

/* 'default' enter sequence for state E_STOP */
void FSM::enseq_FSM_Festo2__Ingress_E_STOP_default()
{
	/* 'default' enter sequence for state E_STOP */
	stateConfVector[9] = FSM::State::FSM_Festo2__Ingress_E_STOP;
	stateConfVectorPosition = 9;
}

/* 'default' enter sequence for state Paused */
void FSM::enseq_FSM_Festo2__Ingress_Paused_default()
{
	/* 'default' enter sequence for state Paused */
	stateConfVector[9] = FSM::State::FSM_Festo2__Ingress_Paused;
	stateConfVectorPosition = 9;
}

/* 'default' enter sequence for state Starting */
void FSM::enseq_FSM_Festo2__Ingress_Starting_default()
{
	/* 'default' enter sequence for state Starting */
	stateConfVector[9] = FSM::State::FSM_Festo2__Ingress_Starting;
	stateConfVectorPosition = 9;
}

/* 'default' enter sequence for state ErrorFST2 */
void FSM::enseq_FSM_Festo2__Ingress_ErrorFST2_default()
{
	/* 'default' enter sequence for state ErrorFST2 */
	stateConfVector[9] = FSM::State::FSM_Festo2__Ingress_ErrorFST2;
	stateConfVectorPosition = 9;
}

/* 'default' enter sequence for state HeightMeasurement */
void FSM::enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_default()
{
	/* 'default' enter sequence for state HeightMeasurement */
	enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_default();
}

/* 'default' enter sequence for state Idle */
void FSM::enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle_default()
{
	/* 'default' enter sequence for state Idle */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle;
	stateConfVectorPosition = 10;
	historyVector[6] = stateConfVector[10];
}

/* 'default' enter sequence for state PukPresent */
void FSM::enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent_default()
{
	/* 'default' enter sequence for state PukPresent */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent;
	stateConfVectorPosition = 10;
	historyVector[6] = stateConfVector[10];
}

/* 'default' enter sequence for state PukExpected */
void FSM::enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected_default()
{
	/* 'default' enter sequence for state PukExpected */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected;
	stateConfVectorPosition = 10;
	historyVector[6] = stateConfVector[10];
}

/* 'default' enter sequence for state Measuring */
void FSM::enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_default()
{
	/* 'default' enter sequence for state Measuring */
	enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_default();
	historyVector[6] = stateConfVector[10];
}

/* 'default' enter sequence for state A */
void FSM::enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A_default()
{
	/* 'default' enter sequence for state A */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A;
	stateConfVectorPosition = 10;
}

/* 'default' enter sequence for state B */
void FSM::enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B_default()
{
	/* 'default' enter sequence for state B */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B;
	stateConfVectorPosition = 10;
}

/* 'default' enter sequence for state C */
void FSM::enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C_default()
{
	/* 'default' enter sequence for state C */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C;
	stateConfVectorPosition = 10;
}

/* 'default' enter sequence for state Error */
void FSM::enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error_default()
{
	/* 'default' enter sequence for state Error */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error;
	stateConfVectorPosition = 10;
}

/* 'default' enter sequence for state Evaluate */
void FSM::enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate_default()
{
	/* 'default' enter sequence for state Evaluate */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate;
	stateConfVectorPosition = 10;
}

/* Default enter sequence for final state */
void FSM::enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final__default()
{
	/* Default enter sequence for final state */
	enact_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final_();
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final_;
	stateConfVectorPosition = 10;
}

/* 'default' enter sequence for state Error */
void FSM::enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error_default()
{
	/* 'default' enter sequence for state Error */
	enact_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error();
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error;
	stateConfVectorPosition = 10;
	historyVector[6] = stateConfVector[10];
}

/* 'default' enter sequence for state Paused */
void FSM::enseq_FSM_Festo2__HeightMeasurement_Paused_default()
{
	/* 'default' enter sequence for state Paused */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_Paused;
	stateConfVectorPosition = 10;
}

/* 'default' enter sequence for state E_STOP */
void FSM::enseq_FSM_Festo2__HeightMeasurement_E_STOP_default()
{
	/* 'default' enter sequence for state E_STOP */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_E_STOP;
	stateConfVectorPosition = 10;
}

/* 'default' enter sequence for state Start */
void FSM::enseq_FSM_Festo2__HeightMeasurement_Start_default()
{
	/* 'default' enter sequence for state Start */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_Start;
	stateConfVectorPosition = 10;
}

/* 'default' enter sequence for state ErrorFST2 */
void FSM::enseq_FSM_Festo2__HeightMeasurement_ErrorFST2_default()
{
	/* 'default' enter sequence for state ErrorFST2 */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_ErrorFST2;
	stateConfVectorPosition = 10;
}

/* 'default' enter sequence for state Egress */
void FSM::enseq_FSM_Festo2__Egress_Egress_default()
{
	/* 'default' enter sequence for state Egress */
	enseq_FSM_Festo2__Egress_Egress_Egress_default();
}

/* 'default' enter sequence for state IDLE */
void FSM::enseq_FSM_Festo2__Egress_Egress_Egress_IDLE_default()
{
	/* 'default' enter sequence for state IDLE */
	stateConfVector[11] = FSM::State::FSM_Festo2__Egress_Egress_Egress_IDLE;
	stateConfVectorPosition = 11;
	historyVector[7] = stateConfVector[11];
}

/* 'default' enter sequence for state PukPresent */
void FSM::enseq_FSM_Festo2__Egress_Egress_Egress_PukPresent_default()
{
	/* 'default' enter sequence for state PukPresent */
	stateConfVector[11] = FSM::State::FSM_Festo2__Egress_Egress_Egress_PukPresent;
	stateConfVectorPosition = 11;
	historyVector[7] = stateConfVector[11];
}

/* 'default' enter sequence for state Transfer */
void FSM::enseq_FSM_Festo2__Egress_Egress_Egress_Transfer_default()
{
	/* 'default' enter sequence for state Transfer */
	enact_FSM_Festo2__Egress_Egress_Egress_Transfer();
	stateConfVector[11] = FSM::State::FSM_Festo2__Egress_Egress_Egress_Transfer;
	stateConfVectorPosition = 11;
	historyVector[7] = stateConfVector[11];
}

/* 'default' enter sequence for state PukExpected */
void FSM::enseq_FSM_Festo2__Egress_Egress_Egress_PukExpected_default()
{
	/* 'default' enter sequence for state PukExpected */
	stateConfVector[11] = FSM::State::FSM_Festo2__Egress_Egress_Egress_PukExpected;
	stateConfVectorPosition = 11;
	historyVector[7] = stateConfVector[11];
}

/* 'default' enter sequence for state Error */
void FSM::enseq_FSM_Festo2__Egress_Egress_Egress_Error_default()
{
	/* 'default' enter sequence for state Error */
	stateConfVector[11] = FSM::State::FSM_Festo2__Egress_Egress_Egress_Error;
	stateConfVectorPosition = 11;
	historyVector[7] = stateConfVector[11];
}

/* 'default' enter sequence for state Paused */
void FSM::enseq_FSM_Festo2__Egress_Paused_default()
{
	/* 'default' enter sequence for state Paused */
	stateConfVector[11] = FSM::State::FSM_Festo2__Egress_Paused;
	stateConfVectorPosition = 11;
}

/* 'default' enter sequence for state E_STOP */
void FSM::enseq_FSM_Festo2__Egress_E_STOP_default()
{
	/* 'default' enter sequence for state E_STOP */
	stateConfVector[11] = FSM::State::FSM_Festo2__Egress_E_STOP;
	stateConfVectorPosition = 11;
}

/* 'default' enter sequence for state Start */
void FSM::enseq_FSM_Festo2__Egress_Start_default()
{
	/* 'default' enter sequence for state Start */
	stateConfVector[11] = FSM::State::FSM_Festo2__Egress_Start;
	stateConfVectorPosition = 11;
}

/* 'default' enter sequence for state ErrorFST2 */
void FSM::enseq_FSM_Festo2__Egress_ErrorFST2_default()
{
	/* 'default' enter sequence for state ErrorFST2 */
	stateConfVector[11] = FSM::State::FSM_Festo2__Egress_ErrorFST2;
	stateConfVectorPosition = 11;
}

/* 'default' enter sequence for state SystemMotor */
void FSM::enseq_FSM_Festo2__Motor_SystemMotor_default()
{
	/* 'default' enter sequence for state SystemMotor */
	enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_default();
}

/* 'default' enter sequence for state Forward */
void FSM::enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward_default()
{
	/* 'default' enter sequence for state Forward */
	enact_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward();
	stateConfVector[12] = FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward;
	stateConfVectorPosition = 12;
}

/* 'default' enter sequence for state Slow */
void FSM::enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow_default()
{
	/* 'default' enter sequence for state Slow */
	enact_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow();
	stateConfVector[12] = FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow;
	stateConfVectorPosition = 12;
}

/* 'default' enter sequence for state Stop */
void FSM::enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop_default()
{
	/* 'default' enter sequence for state Stop */
	enact_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop();
	stateConfVector[12] = FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop;
	stateConfVectorPosition = 12;
}

/* 'default' enter sequence for state FSM_LAMP */
void FSM::enseq_FSM_Festo2__Signaling_FSM_LAMP_default()
{
	/* 'default' enter sequence for state FSM_LAMP */
	enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_default();
}

/* 'default' enter sequence for state FSM_Lamp */
void FSM::enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_default()
{
	/* 'default' enter sequence for state FSM_Lamp */
	enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_default();
	enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_default();
	enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_default();
}

/* 'default' enter sequence for state Off */
void FSM::enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_default()
{
	/* 'default' enter sequence for state Off */
	enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
	stateConfVector[13] = FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off;
	stateConfVectorPosition = 13;
}

/* 'default' enter sequence for state Constant */
void FSM::enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_default()
{
	/* 'default' enter sequence for state Constant */
	enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant();
	stateConfVector[13] = FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant;
	stateConfVectorPosition = 13;
}

/* 'default' enter sequence for state Blinking 1Hz */
void FSM::enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz_default()
{
	/* 'default' enter sequence for state Blinking 1Hz */
	enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz();
	stateConfVector[13] = FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz;
	stateConfVectorPosition = 13;
}

/* 'default' enter sequence for state Off */
void FSM::enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_default()
{
	/* 'default' enter sequence for state Off */
	enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off();
	stateConfVector[14] = FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off;
	stateConfVectorPosition = 14;
}

/* 'default' enter sequence for state Constant */
void FSM::enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_default()
{
	/* 'default' enter sequence for state Constant */
	enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant();
	stateConfVector[14] = FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant;
	stateConfVectorPosition = 14;
}

/* 'default' enter sequence for state Blinking 1Hz */
void FSM::enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz_default()
{
	/* 'default' enter sequence for state Blinking 1Hz */
	enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz();
	stateConfVector[14] = FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz;
	stateConfVectorPosition = 14;
}

/* 'default' enter sequence for state Off */
void FSM::enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_default()
{
	/* 'default' enter sequence for state Off */
	enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off();
	stateConfVector[15] = FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off;
	stateConfVectorPosition = 15;
}

/* 'default' enter sequence for state Constant */
void FSM::enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_default()
{
	/* 'default' enter sequence for state Constant */
	enact_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant();
	stateConfVector[15] = FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant;
	stateConfVectorPosition = 15;
}

/* 'default' enter sequence for state EvaluateTester */
void FSM::enseq_TEST_EvaluateTester_default()
{
	/* 'default' enter sequence for state EvaluateTester */
	stateConfVector[16] = FSM::State::TEST_EvaluateTester;
	stateConfVectorPosition = 16;
}

/* 'default' enter sequence for state FSM_Errors */
void FSM::enseq_FSM_Festo1__Errors_FSM_Errors_default()
{
	/* 'default' enter sequence for state FSM_Errors */
	enseq_FSM_Festo1__Errors_FSM_Errors___default();
}

/* 'default' enter sequence for state ErrorinHMRestart */
void FSM::enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart_default()
{
	/* 'default' enter sequence for state ErrorinHMRestart */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart;
	stateConfVectorPosition = 17;
	historyVector[8] = stateConfVector[17];
}

/* 'default' enter sequence for state ErrorinSortingPukUnacknowledged */
void FSM::enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukUnacknowledged_default()
{
	/* 'default' enter sequence for state ErrorinSortingPukUnacknowledged */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukUnacknowledged;
	stateConfVectorPosition = 17;
	historyVector[8] = stateConfVector[17];
}

/* 'default' enter sequence for state ErrorinIngressRestart */
void FSM::enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart_default()
{
	/* 'default' enter sequence for state ErrorinIngressRestart */
	enact_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart();
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart;
	stateConfVectorPosition = 17;
	historyVector[8] = stateConfVector[17];
}

/* 'default' enter sequence for state ErrorinSortingPukAcknowledged */
void FSM::enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukAcknowledged_default()
{
	/* 'default' enter sequence for state ErrorinSortingPukAcknowledged */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukAcknowledged;
	stateConfVectorPosition = 17;
	historyVector[8] = stateConfVector[17];
}

/* 'default' enter sequence for state Idle */
void FSM::enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default()
{
	/* 'default' enter sequence for state Idle */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors___Idle;
	stateConfVectorPosition = 17;
	historyVector[8] = stateConfVector[17];
}

/* 'default' enter sequence for state ErrorinSortingRestart */
void FSM::enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart_default()
{
	/* 'default' enter sequence for state ErrorinSortingRestart */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart;
	stateConfVectorPosition = 17;
	historyVector[8] = stateConfVector[17];
}

/* 'default' enter sequence for state ErrorinEgressMissingPukAcknowledged */
void FSM::enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressMissingPukAcknowledged_default()
{
	/* 'default' enter sequence for state ErrorinEgressMissingPukAcknowledged */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressMissingPukAcknowledged;
	stateConfVectorPosition = 17;
	historyVector[8] = stateConfVector[17];
}

/* 'default' enter sequence for state ErrorinEgressPukUnacknowledged */
void FSM::enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressPukUnacknowledged_default()
{
	/* 'default' enter sequence for state ErrorinEgressPukUnacknowledged */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressPukUnacknowledged;
	stateConfVectorPosition = 17;
	historyVector[8] = stateConfVector[17];
}

/* 'default' enter sequence for state ErrorinHMPukAcknowledged */
void FSM::enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMPukAcknowledged_default()
{
	/* 'default' enter sequence for state ErrorinHMPukAcknowledged */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMPukAcknowledged;
	stateConfVectorPosition = 17;
	historyVector[8] = stateConfVector[17];
}

/* 'default' enter sequence for state ErrorinHMUnacknowledged */
void FSM::enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMUnacknowledged_default()
{
	/* 'default' enter sequence for state ErrorinHMUnacknowledged */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMUnacknowledged;
	stateConfVectorPosition = 17;
	historyVector[8] = stateConfVector[17];
}

/* 'default' enter sequence for state ErrorinIngressAcknowledged */
void FSM::enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged_default()
{
	/* 'default' enter sequence for state ErrorinIngressAcknowledged */
	enact_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged();
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged;
	stateConfVectorPosition = 17;
	historyVector[8] = stateConfVector[17];
}

/* 'default' enter sequence for state ErrorinIngressUnacknowledged */
void FSM::enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressUnacknowledged_default()
{
	/* 'default' enter sequence for state ErrorinIngressUnacknowledged */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressUnacknowledged;
	stateConfVectorPosition = 17;
	historyVector[8] = stateConfVector[17];
}

/* 'default' enter sequence for state ErrorinEgressRestart */
void FSM::enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart_default()
{
	/* 'default' enter sequence for state ErrorinEgressRestart */
	enact_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart();
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart;
	stateConfVectorPosition = 17;
	historyVector[8] = stateConfVector[17];
}

/* 'default' enter sequence for state EStop */
void FSM::enseq_FSM_Festo1__Errors_EStop_default()
{
	/* 'default' enter sequence for state EStop */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_EStop;
	stateConfVectorPosition = 17;
}

/* 'default' enter sequence for state Start */
void FSM::enseq_FSM_Festo1__Errors_Start_default()
{
	/* 'default' enter sequence for state Start */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_Start;
	stateConfVectorPosition = 17;
}

/* 'default' enter sequence for state Sorting */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_Sorting_default()
{
	/* 'default' enter sequence for state Sorting */
	enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_default();
}

/* 'default' enter sequence for state Idle */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle_default()
{
	/* 'default' enter sequence for state Idle */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle;
	stateConfVectorPosition = 18;
	historyVector[9] = stateConfVector[18];
}

/* 'default' enter sequence for state PukPresent */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent_default()
{
	/* 'default' enter sequence for state PukPresent */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent;
	stateConfVectorPosition = 18;
	historyVector[9] = stateConfVector[18];
}

/* 'default' enter sequence for state PukExpected */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected_default()
{
	/* 'default' enter sequence for state PukExpected */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected;
	stateConfVectorPosition = 18;
	historyVector[9] = stateConfVector[18];
}

/* 'default' enter sequence for state Evaluate */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate_default()
{
	/* 'default' enter sequence for state Evaluate */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate;
	stateConfVectorPosition = 18;
	historyVector[9] = stateConfVector[18];
}

/* 'default' enter sequence for state EjectingDivider */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider_default()
{
	/* 'default' enter sequence for state EjectingDivider */
	enact_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider();
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider;
	stateConfVectorPosition = 18;
	historyVector[9] = stateConfVector[18];
}

/* 'default' enter sequence for state TransferEjector */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector_default()
{
	/* 'default' enter sequence for state TransferEjector */
	enact_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector();
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector;
	stateConfVectorPosition = 18;
	historyVector[9] = stateConfVector[18];
}

/* 'default' enter sequence for state TransferDivider */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider_default()
{
	/* 'default' enter sequence for state TransferDivider */
	enact_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider();
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider;
	stateConfVectorPosition = 18;
	historyVector[9] = stateConfVector[18];
}

/* 'default' enter sequence for state EjectingEjector */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector_default()
{
	/* 'default' enter sequence for state EjectingEjector */
	enact_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector();
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector;
	stateConfVectorPosition = 18;
	historyVector[9] = stateConfVector[18];
}

/* 'default' enter sequence for state EvaluateCounter */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter_default()
{
	/* 'default' enter sequence for state EvaluateCounter */
	enact_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter();
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter;
	stateConfVectorPosition = 18;
	historyVector[9] = stateConfVector[18];
}

/* 'default' enter sequence for state Error */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error_default()
{
	/* 'default' enter sequence for state Error */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error;
	stateConfVectorPosition = 18;
	historyVector[9] = stateConfVector[18];
}

/* 'default' enter sequence for state AwaitingRampClearanceDivider */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceDivider_default()
{
	/* 'default' enter sequence for state AwaitingRampClearanceDivider */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceDivider;
	stateConfVectorPosition = 18;
	historyVector[9] = stateConfVector[18];
}

/* 'default' enter sequence for state AwaitingRampClearanceEjector */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector_default()
{
	/* 'default' enter sequence for state AwaitingRampClearanceEjector */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector;
	stateConfVectorPosition = 18;
	historyVector[9] = stateConfVector[18];
}

/* 'default' enter sequence for state Paused */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_Paused_default()
{
	/* 'default' enter sequence for state Paused */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Paused;
	stateConfVectorPosition = 18;
}

/* 'default' enter sequence for state E_STOP */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_E_STOP_default()
{
	/* 'default' enter sequence for state E_STOP */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_E_STOP;
	stateConfVectorPosition = 18;
}

/* 'default' enter sequence for state Start */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_Start_default()
{
	/* 'default' enter sequence for state Start */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Start;
	stateConfVectorPosition = 18;
}

/* 'default' enter sequence for state ErrorFST1 */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_ErrorFST1_default()
{
	/* 'default' enter sequence for state ErrorFST1 */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_ErrorFST1;
	stateConfVectorPosition = 18;
}

/* 'default' enter sequence for state FSM_Errors */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_default()
{
	/* 'default' enter sequence for state FSM_Errors */
	enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_default();
}

/* 'default' enter sequence for state ErrorinSortingUnacknowledged */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingUnacknowledged_default()
{
	/* 'default' enter sequence for state ErrorinSortingUnacknowledged */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingUnacknowledged;
	stateConfVectorPosition = 19;
	historyVector[10] = stateConfVector[19];
}

/* 'default' enter sequence for state ErrorinIngressRestart */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart_default()
{
	/* 'default' enter sequence for state ErrorinIngressRestart */
	enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart();
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart;
	stateConfVectorPosition = 19;
	historyVector[10] = stateConfVector[19];
}

/* 'default' enter sequence for state ErrorinSortingPukAcknowledged */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged_default()
{
	/* 'default' enter sequence for state ErrorinSortingPukAcknowledged */
	enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged();
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged;
	stateConfVectorPosition = 19;
	historyVector[10] = stateConfVector[19];
}

/* 'default' enter sequence for state Idle */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default()
{
	/* 'default' enter sequence for state Idle */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle;
	stateConfVectorPosition = 19;
	historyVector[10] = stateConfVector[19];
}

/* 'default' enter sequence for state ErrorinEgressUPRestart */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart_default()
{
	/* 'default' enter sequence for state ErrorinEgressUPRestart */
	enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart();
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart;
	stateConfVectorPosition = 19;
	historyVector[10] = stateConfVector[19];
}

/* 'default' enter sequence for state ErrorinEgressUnacknowledged */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUnacknowledged_default()
{
	/* 'default' enter sequence for state ErrorinEgressUnacknowledged */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUnacknowledged;
	stateConfVectorPosition = 19;
	historyVector[10] = stateConfVector[19];
}

/* 'default' enter sequence for state ErrorinEgressAcknowledged */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged_default()
{
	/* 'default' enter sequence for state ErrorinEgressAcknowledged */
	enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged();
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged;
	stateConfVectorPosition = 19;
	historyVector[10] = stateConfVector[19];
}

/* 'default' enter sequence for state ErrorinIngressUnacknowledged */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged_default()
{
	/* 'default' enter sequence for state ErrorinIngressUnacknowledged */
	enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged();
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged;
	stateConfVectorPosition = 19;
	historyVector[10] = stateConfVector[19];
}

/* 'default' enter sequence for state ErrorinIngressAcknowledged */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressAcknowledged_default()
{
	/* 'default' enter sequence for state ErrorinIngressAcknowledged */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressAcknowledged;
	stateConfVectorPosition = 19;
	historyVector[10] = stateConfVector[19];
}

/* 'default' enter sequence for state ErrorinHMAcknowledged */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged_default()
{
	/* 'default' enter sequence for state ErrorinHMAcknowledged */
	enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged();
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged;
	stateConfVectorPosition = 19;
	historyVector[10] = stateConfVector[19];
}

/* 'default' enter sequence for state ErrorinHMUnacknowledged */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMUnacknowledged_default()
{
	/* 'default' enter sequence for state ErrorinHMUnacknowledged */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMUnacknowledged;
	stateConfVectorPosition = 19;
	historyVector[10] = stateConfVector[19];
}

/* 'default' enter sequence for state ErrorinHMRestart */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart_default()
{
	/* 'default' enter sequence for state ErrorinHMRestart */
	enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart();
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart;
	stateConfVectorPosition = 19;
	historyVector[10] = stateConfVector[19];
}

/* 'default' enter sequence for state ErrorinSortingRestart */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart_default()
{
	/* 'default' enter sequence for state ErrorinSortingRestart */
	enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart();
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart;
	stateConfVectorPosition = 19;
	historyVector[10] = stateConfVector[19];
}

/* 'default' enter sequence for state ErrorRampFullUnacknowledged */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorRampFullUnacknowledged_default()
{
	/* 'default' enter sequence for state ErrorRampFullUnacknowledged */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorRampFullUnacknowledged;
	stateConfVectorPosition = 19;
	historyVector[10] = stateConfVector[19];
}

/* 'default' enter sequence for state ErrorinRampFullAcknowledged */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged_default()
{
	/* 'default' enter sequence for state ErrorinRampFullAcknowledged */
	enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged();
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged;
	stateConfVectorPosition = 19;
	historyVector[10] = stateConfVector[19];
}

/* 'default' enter sequence for state ErrorinRampFullRestart */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart_default()
{
	/* 'default' enter sequence for state ErrorinRampFullRestart */
	enact_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart();
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart;
	stateConfVectorPosition = 19;
	historyVector[10] = stateConfVector[19];
}

/* 'default' enter sequence for state EStop */
void FSM::enseq_FSM_Festo2__Errors_EStop_default()
{
	/* 'default' enter sequence for state EStop */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_EStop;
	stateConfVectorPosition = 19;
}

/* 'default' enter sequence for state Start */
void FSM::enseq_FSM_Festo2__Errors_Start_default()
{
	/* 'default' enter sequence for state Start */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_Start;
	stateConfVectorPosition = 19;
}

/* 'default' enter sequence for region FSM_Festo1:Ingress */
void FSM::enseq_FSM_Festo1_Ingress_default()
{
	/* 'default' enter sequence for region FSM_Festo1:Ingress */
	react_FSM_Festo1_Ingress__entry_Default();
}

/* 'default' enter sequence for region Ingress */
void FSM::enseq_FSM_Festo1_Ingress_Ingress_Ingress_default()
{
	/* 'default' enter sequence for region Ingress */
	react_FSM_Festo1_Ingress_Ingress_Ingress__entry_Default();
}

/* shallow enterSequence with history in child Ingress */
void FSM::shenseq_FSM_Festo1_Ingress_Ingress_Ingress()
{
	/* shallow enterSequence with history in child Ingress */
	/* Handle shallow history entry of Ingress */
	switch(historyVector[ 0 ])
	{
		case FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_Idle :
		{
			enseq_FSM_Festo1_Ingress_Ingress_Ingress_Idle_default();
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_PukPresent :
		{
			enseq_FSM_Festo1_Ingress_Ingress_Ingress_PukPresent_default();
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance :
		{
			enseq_FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance_default();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* 'default' enter sequence for region FSM_Festo1 HeightMeasurement */
void FSM::enseq_FSM_Festo1_HeightMeasurement_default()
{
	/* 'default' enter sequence for region FSM_Festo1 HeightMeasurement */
	react_FSM_Festo1_HeightMeasurement__entry_Default();
}

/* 'default' enter sequence for region FSM_Festo1: HM */
void FSM::enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_default()
{
	/* 'default' enter sequence for region FSM_Festo1: HM */
	react_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM__entry_Default();
}

/* deep enterSequence with history in child FSM_Festo1: HM */
void FSM::dhenseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM()
{
	/* deep enterSequence with history in child FSM_Festo1: HM */
	/* Handle deep history entry of FSM_Festo1: HM */
	switch(historyVector[ 1 ])
	{
		case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle :
		{
			/* enterSequence with history in child Idle for leaf Idle */
			enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle_default();
			break;
		}
		case FSM::State::A :
		{
			/* enterSequence with history in child Measuring for leaf A */
			dhenseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM();
			break;
		}
		case FSM::State::B :
		{
			/* enterSequence with history in child Measuring for leaf B */
			dhenseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM();
			break;
		}
		case FSM::State::C :
		{
			/* enterSequence with history in child Measuring for leaf C */
			dhenseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM();
			break;
		}
		case FSM::State::Error :
		{
			/* enterSequence with history in child Measuring for leaf Error */
			dhenseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM();
			break;
		}
		case FSM::State::Evaluate :
		{
			/* enterSequence with history in child Measuring for leaf Evaluate */
			dhenseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM();
			break;
		}
		case FSM::State::_final_ :
		{
			/* enterSequence with history in child Measuring for leaf null */
			dhenseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM();
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent :
		{
			/* enterSequence with history in child PukPresent for leaf PukPresent */
			enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent_default();
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected :
		{
			/* enterSequence with history in child PukExpected for leaf PukExpected */
			enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected_default();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* 'default' enter sequence for region FSMHeightInternalFSM */
void FSM::enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_default()
{
	/* 'default' enter sequence for region FSMHeightInternalFSM */
	react_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM__entry_Default();
}

/* deep enterSequence with history in child FSMHeightInternalFSM */
void FSM::dhenseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM()
{
	/* deep enterSequence with history in child FSMHeightInternalFSM */
	/* Handle deep history entry of FSMHeightInternalFSM */
	switch(historyVector[ 2 ])
	{
		case FSM::State::A :
		{
			/* enterSequence with history in child A for leaf A */
			enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_A_default();
			break;
		}
		case FSM::State::B :
		{
			/* enterSequence with history in child B for leaf B */
			enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_B_default();
			break;
		}
		case FSM::State::C :
		{
			/* enterSequence with history in child C for leaf C */
			enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_C_default();
			break;
		}
		case FSM::State::Error :
		{
			/* enterSequence with history in child Error for leaf Error */
			enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error_default();
			break;
		}
		case FSM::State::Evaluate :
		{
			/* enterSequence with history in child Evaluate for leaf Evaluate */
			enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Evaluate_default();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* 'default' enter sequence for region FSM_Festo1: Sorting */
void FSM::enseq_FSM_Festo1__Sorting_default()
{
	/* 'default' enter sequence for region FSM_Festo1: Sorting */
	react_FSM_Festo1__Sorting__entry_Default();
}

/* 'default' enter sequence for region Sorting */
void FSM::enseq_FSM_Festo1__Sorting_Sorting_Sorting_default()
{
	/* 'default' enter sequence for region Sorting */
	react_FSM_Festo1__Sorting_Sorting_Sorting__entry_Default();
}

/* shallow enterSequence with history in child Sorting */
void FSM::shenseq_FSM_Festo1__Sorting_Sorting_Sorting()
{
	/* shallow enterSequence with history in child Sorting */
	/* Handle shallow history entry of Sorting */
	switch(historyVector[ 3 ])
	{
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_Idle :
		{
			enseq_FSM_Festo1__Sorting_Sorting_Sorting_Idle_default();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_PukPresent :
		{
			enseq_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent_default();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_PukExpected :
		{
			enseq_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected_default();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_Evaluate :
		{
			enseq_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate_default();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider :
		{
			enseq_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider_default();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector :
		{
			enseq_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector_default();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider :
		{
			enseq_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider_default();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector :
		{
			enseq_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector_default();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter :
		{
			enseq_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter_default();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* 'default' enter sequence for region FSM_Festo1: Egress */
void FSM::enseq_FSM_Festo1__Egress_default()
{
	/* 'default' enter sequence for region FSM_Festo1: Egress */
	react_FSM_Festo1__Egress__entry_Default();
}

/* 'default' enter sequence for region FSM_FST_1_Egress */
void FSM::enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_default()
{
	/* 'default' enter sequence for region FSM_FST_1_Egress */
	react_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress__entry_Default();
}

/* shallow enterSequence with history in child FSM_FST_1_Egress */
void FSM::shenseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress()
{
	/* shallow enterSequence with history in child FSM_FST_1_Egress */
	/* Handle shallow history entry of FSM_FST_1_Egress */
	switch(historyVector[ 4 ])
	{
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Waiting :
		{
			enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Waiting_default();
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer :
		{
			enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer_default();
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected :
		{
			enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected_default();
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE :
		{
			enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE_default();
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent :
		{
			enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent_default();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* 'default' enter sequence for region FSM_QualityGate: Motor */
void FSM::enseq_FSM_QualityGate__Motor_default()
{
	/* 'default' enter sequence for region FSM_QualityGate: Motor */
	react_FSM_QualityGate__Motor__entry_Default();
}

/* 'default' enter sequence for region FSM:SystemMotor */
void FSM::enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_default()
{
	/* 'default' enter sequence for region FSM:SystemMotor */
	react_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor__entry_Default();
}

/* 'default' enter sequence for region < */
void FSM::enseq___default()
{
	/* 'default' enter sequence for region < */
	react____entry_Default();
}

/* 'default' enter sequence for region FSM_Festo1:Signaling */
void FSM::enseq_FSM_Festo1_Signaling_default()
{
	/* 'default' enter sequence for region FSM_Festo1:Signaling */
	react_FSM_Festo1_Signaling__entry_Default();
}

/* 'default' enter sequence for region FSM_LAMP */
void FSM::enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_default()
{
	/* 'default' enter sequence for region FSM_LAMP */
	react_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP__entry_Default();
}

/* 'default' enter sequence for region FSM_Lamp_Green */
void FSM::enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_default()
{
	/* 'default' enter sequence for region FSM_Lamp_Green */
	react_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green__entry_Default();
}

/* 'default' enter sequence for region FSM_Lamp_Yellow */
void FSM::enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_default()
{
	/* 'default' enter sequence for region FSM_Lamp_Yellow */
	react_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow__entry_Default();
}

/* 'default' enter sequence for region FSM_Lamp_Red */
void FSM::enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_default()
{
	/* 'default' enter sequence for region FSM_Lamp_Red */
	react_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red__entry_Default();
}

/* 'default' enter sequence for region FSM_Festo2: Ingress */
void FSM::enseq_FSM_Festo2__Ingress_default()
{
	/* 'default' enter sequence for region FSM_Festo2: Ingress */
	react_FSM_Festo2__Ingress__entry_Default();
}

/* 'default' enter sequence for region Ingress */
void FSM::enseq_FSM_Festo2__Ingress_Ingress_Ingress_default()
{
	/* 'default' enter sequence for region Ingress */
	react_FSM_Festo2__Ingress_Ingress_Ingress__entry_Default();
}

/* shallow enterSequence with history in child Ingress */
void FSM::shenseq_FSM_Festo2__Ingress_Ingress_Ingress()
{
	/* shallow enterSequence with history in child Ingress */
	/* Handle shallow history entry of Ingress */
	switch(historyVector[ 5 ])
	{
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_Idle :
		{
			enseq_FSM_Festo2__Ingress_Ingress_Ingress_Idle_default();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance :
		{
			enseq_FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance_default();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukPresent :
		{
			enseq_FSM_Festo2__Ingress_Ingress_Ingress_PukPresent_default();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukExpected :
		{
			enseq_FSM_Festo2__Ingress_Ingress_Ingress_PukExpected_default();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukinLBF2 :
		{
			enseq_FSM_Festo2__Ingress_Ingress_Ingress_PukinLBF2_default();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_ERROR :
		{
			enseq_FSM_Festo2__Ingress_Ingress_Ingress_ERROR_default();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* 'default' enter sequence for region FSM_Festo2: HeightMeasurement */
void FSM::enseq_FSM_Festo2__HeightMeasurement_default()
{
	/* 'default' enter sequence for region FSM_Festo2: HeightMeasurement */
	react_FSM_Festo2__HeightMeasurement__entry_Default();
}

/* 'default' enter sequence for region FSM_FST2: HM */
void FSM::enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_default()
{
	/* 'default' enter sequence for region FSM_FST2: HM */
	react_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM__entry_Default();
}

/* shallow enterSequence with history in child FSM_FST2: HM */
void FSM::shenseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM()
{
	/* shallow enterSequence with history in child FSM_FST2: HM */
	/* Handle shallow history entry of FSM_FST2: HM */
	switch(historyVector[ 6 ])
	{
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle :
		{
			enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle_default();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent :
		{
			enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent_default();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected :
		{
			enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected_default();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A :
		{
			enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_default();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B :
		{
			enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_default();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C :
		{
			enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_default();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error :
		{
			enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_default();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate :
		{
			enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_default();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final_ :
		{
			enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_default();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error :
		{
			enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error_default();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* 'default' enter sequence for region FST2FSMINTERNAL */
void FSM::enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_default()
{
	/* 'default' enter sequence for region FST2FSMINTERNAL */
	react_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__entry_Default();
}

/* 'default' enter sequence for region FSM_Festo2: Egress */
void FSM::enseq_FSM_Festo2__Egress_default()
{
	/* 'default' enter sequence for region FSM_Festo2: Egress */
	react_FSM_Festo2__Egress__entry_Default();
}

/* 'default' enter sequence for region Egress */
void FSM::enseq_FSM_Festo2__Egress_Egress_Egress_default()
{
	/* 'default' enter sequence for region Egress */
	react_FSM_Festo2__Egress_Egress_Egress__entry_Default();
}

/* shallow enterSequence with history in child Egress */
void FSM::shenseq_FSM_Festo2__Egress_Egress_Egress()
{
	/* shallow enterSequence with history in child Egress */
	/* Handle shallow history entry of Egress */
	switch(historyVector[ 7 ])
	{
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_IDLE :
		{
			enseq_FSM_Festo2__Egress_Egress_Egress_IDLE_default();
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_PukPresent :
		{
			enseq_FSM_Festo2__Egress_Egress_Egress_PukPresent_default();
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_Transfer :
		{
			enseq_FSM_Festo2__Egress_Egress_Egress_Transfer_default();
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_PukExpected :
		{
			enseq_FSM_Festo2__Egress_Egress_Egress_PukExpected_default();
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_Error :
		{
			enseq_FSM_Festo2__Egress_Egress_Egress_Error_default();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* 'default' enter sequence for region FSM_Festo2: Motor */
void FSM::enseq_FSM_Festo2__Motor_default()
{
	/* 'default' enter sequence for region FSM_Festo2: Motor */
	react_FSM_Festo2__Motor__entry_Default();
}

/* 'default' enter sequence for region FSM:SystemMotor */
void FSM::enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_default()
{
	/* 'default' enter sequence for region FSM:SystemMotor */
	react_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor__entry_Default();
}

/* 'default' enter sequence for region FSM_Festo2: Signaling */
void FSM::enseq_FSM_Festo2__Signaling_default()
{
	/* 'default' enter sequence for region FSM_Festo2: Signaling */
	react_FSM_Festo2__Signaling__entry_Default();
}

/* 'default' enter sequence for region FSM_LAMP */
void FSM::enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_default()
{
	/* 'default' enter sequence for region FSM_LAMP */
	react_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP__entry_Default();
}

/* 'default' enter sequence for region FSM_Lamp_Green */
void FSM::enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_default()
{
	/* 'default' enter sequence for region FSM_Lamp_Green */
	react_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green__entry_Default();
}

/* 'default' enter sequence for region FSM_Lamp_Yellow */
void FSM::enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_default()
{
	/* 'default' enter sequence for region FSM_Lamp_Yellow */
	react_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow__entry_Default();
}

/* 'default' enter sequence for region FSM_Lamp_Red */
void FSM::enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_default()
{
	/* 'default' enter sequence for region FSM_Lamp_Red */
	react_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red__entry_Default();
}

/* 'default' enter sequence for region TEST */
void FSM::enseq_TEST_default()
{
	/* 'default' enter sequence for region TEST */
	react_TEST__entry_Default();
}

/* 'default' enter sequence for region FSM_Festo1: Errors */
void FSM::enseq_FSM_Festo1__Errors_default()
{
	/* 'default' enter sequence for region FSM_Festo1: Errors */
	react_FSM_Festo1__Errors__entry_Default();
}

/* 'default' enter sequence for region < */
void FSM::enseq_FSM_Festo1__Errors_FSM_Errors___default()
{
	/* 'default' enter sequence for region < */
	react_FSM_Festo1__Errors_FSM_Errors____entry_Default();
}

/* shallow enterSequence with history in child < */
void FSM::shenseq_FSM_Festo1__Errors_FSM_Errors__()
{
	/* shallow enterSequence with history in child < */
	/* Handle shallow history entry of < */
	switch(historyVector[ 8 ])
	{
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart :
		{
			enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart_default();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukUnacknowledged :
		{
			enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukUnacknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart :
		{
			enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart_default();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukAcknowledged :
		{
			enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukAcknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___Idle :
		{
			enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart :
		{
			enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart_default();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressMissingPukAcknowledged :
		{
			enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressMissingPukAcknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressPukUnacknowledged :
		{
			enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressPukUnacknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMPukAcknowledged :
		{
			enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMPukAcknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMUnacknowledged :
		{
			enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMUnacknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged :
		{
			enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressUnacknowledged :
		{
			enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressUnacknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart :
		{
			enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart_default();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* 'default' enter sequence for region Copy_1_FSM_Festo1: Sorting */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_default()
{
	/* 'default' enter sequence for region Copy_1_FSM_Festo1: Sorting */
	react_Copy_1_FSM_Festo1__Sorting__entry_Default();
}

/* 'default' enter sequence for region Sorting */
void FSM::enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_default()
{
	/* 'default' enter sequence for region Sorting */
	react_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting__entry_Default();
}

/* shallow enterSequence with history in child Sorting */
void FSM::shenseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting()
{
	/* shallow enterSequence with history in child Sorting */
	/* Handle shallow history entry of Sorting */
	switch(historyVector[ 9 ])
	{
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle :
		{
			enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle_default();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent :
		{
			enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent_default();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected :
		{
			enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected_default();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate :
		{
			enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate_default();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider :
		{
			enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider_default();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector :
		{
			enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector_default();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider :
		{
			enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider_default();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector :
		{
			enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector_default();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter :
		{
			enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter_default();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error :
		{
			enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error_default();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceDivider :
		{
			enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceDivider_default();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector :
		{
			enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector_default();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* 'default' enter sequence for region FSM_Festo2: Errors */
void FSM::enseq_FSM_Festo2__Errors_default()
{
	/* 'default' enter sequence for region FSM_Festo2: Errors */
	react_FSM_Festo2__Errors__entry_Default();
}

/* 'default' enter sequence for region FST_2: FSM_Errors */
void FSM::enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_default()
{
	/* 'default' enter sequence for region FST_2: FSM_Errors */
	react_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors__entry_Default();
}

/* shallow enterSequence with history in child FST_2: FSM_Errors */
void FSM::shenseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors()
{
	/* shallow enterSequence with history in child FST_2: FSM_Errors */
	/* Handle shallow history entry of FST_2: FSM_Errors */
	switch(historyVector[ 10 ])
	{
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingUnacknowledged :
		{
			enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingUnacknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart :
		{
			enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart_default();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged :
		{
			enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle :
		{
			enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart :
		{
			enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart_default();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUnacknowledged :
		{
			enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUnacknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged :
		{
			enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged :
		{
			enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressAcknowledged :
		{
			enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressAcknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged :
		{
			enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMUnacknowledged :
		{
			enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMUnacknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart :
		{
			enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart_default();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart :
		{
			enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart_default();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorRampFullUnacknowledged :
		{
			enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorRampFullUnacknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged :
		{
			enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged_default();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart :
		{
			enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart_default();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for state Ingress */
void FSM::exseq_FSM_Festo1_Ingress_Ingress()
{
	/* Default exit sequence for state Ingress */
	exseq_FSM_Festo1_Ingress_Ingress_Ingress();
	stateConfVector[0] = FSM::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Idle */
void FSM::exseq_FSM_Festo1_Ingress_Ingress_Ingress_Idle()
{
	/* Default exit sequence for state Idle */
	stateConfVector[0] = FSM::State::FSM_Festo1_Ingress_Ingress;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state PukPresent */
void FSM::exseq_FSM_Festo1_Ingress_Ingress_Ingress_PukPresent()
{
	/* Default exit sequence for state PukPresent */
	stateConfVector[0] = FSM::State::FSM_Festo1_Ingress_Ingress;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state CreatingDistance */
void FSM::exseq_FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance()
{
	/* Default exit sequence for state CreatingDistance */
	stateConfVector[0] = FSM::State::FSM_Festo1_Ingress_Ingress;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Paused */
void FSM::exseq_FSM_Festo1_Ingress_Paused()
{
	/* Default exit sequence for state Paused */
	stateConfVector[0] = FSM::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state E_STOP */
void FSM::exseq_FSM_Festo1_Ingress_E_STOP()
{
	/* Default exit sequence for state E_STOP */
	stateConfVector[0] = FSM::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Start */
void FSM::exseq_FSM_Festo1_Ingress_Start()
{
	/* Default exit sequence for state Start */
	stateConfVector[0] = FSM::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state ErrorFST1 */
void FSM::exseq_FSM_Festo1_Ingress_ErrorFST1()
{
	/* Default exit sequence for state ErrorFST1 */
	stateConfVector[0] = FSM::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state HeightMeasurement */
void FSM::exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement()
{
	/* Default exit sequence for state HeightMeasurement */
	exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM();
	stateConfVector[1] = FSM::State::NO_STATE;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state Idle */
void FSM::exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle()
{
	/* Default exit sequence for state Idle */
	stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state Measuring */
void FSM::exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring()
{
	/* Default exit sequence for state Measuring */
	exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM();
	stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state A */
void FSM::exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_A()
{
	/* Default exit sequence for state A */
	stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state B */
void FSM::exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_B()
{
	/* Default exit sequence for state B */
	stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state C */
void FSM::exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_C()
{
	/* Default exit sequence for state C */
	stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state Error */
void FSM::exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error()
{
	/* Default exit sequence for state Error */
	stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state Evaluate */
void FSM::exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Evaluate()
{
	/* Default exit sequence for state Evaluate */
	stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for final state. */
void FSM::exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM__final_()
{
	/* Default exit sequence for final state. */
	stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state PukPresent */
void FSM::exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent()
{
	/* Default exit sequence for state PukPresent */
	stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state PukExpected */
void FSM::exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected()
{
	/* Default exit sequence for state PukExpected */
	stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state Paused */
void FSM::exseq_FSM_Festo1_HeightMeasurement_Paused()
{
	/* Default exit sequence for state Paused */
	stateConfVector[1] = FSM::State::NO_STATE;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state E_STOP */
void FSM::exseq_FSM_Festo1_HeightMeasurement_E_STOP()
{
	/* Default exit sequence for state E_STOP */
	stateConfVector[1] = FSM::State::NO_STATE;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state Start */
void FSM::exseq_FSM_Festo1_HeightMeasurement_Start()
{
	/* Default exit sequence for state Start */
	stateConfVector[1] = FSM::State::NO_STATE;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state ErrorFST1 */
void FSM::exseq_FSM_Festo1_HeightMeasurement_ErrorFST1()
{
	/* Default exit sequence for state ErrorFST1 */
	stateConfVector[1] = FSM::State::NO_STATE;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state Sorting */
void FSM::exseq_FSM_Festo1__Sorting_Sorting()
{
	/* Default exit sequence for state Sorting */
	exseq_FSM_Festo1__Sorting_Sorting_Sorting();
	stateConfVector[2] = FSM::State::NO_STATE;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state Idle */
void FSM::exseq_FSM_Festo1__Sorting_Sorting_Sorting_Idle()
{
	/* Default exit sequence for state Idle */
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state PukPresent */
void FSM::exseq_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent()
{
	/* Default exit sequence for state PukPresent */
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state PukExpected */
void FSM::exseq_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected()
{
	/* Default exit sequence for state PukExpected */
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state Evaluate */
void FSM::exseq_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate()
{
	/* Default exit sequence for state Evaluate */
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state EjectingDivider */
void FSM::exseq_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider()
{
	/* Default exit sequence for state EjectingDivider */
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state TransferEjector */
void FSM::exseq_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector()
{
	/* Default exit sequence for state TransferEjector */
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state TransferDivider */
void FSM::exseq_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider()
{
	/* Default exit sequence for state TransferDivider */
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state EjectingEjector */
void FSM::exseq_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector()
{
	/* Default exit sequence for state EjectingEjector */
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state EvaluateCounter */
void FSM::exseq_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter()
{
	/* Default exit sequence for state EvaluateCounter */
	stateConfVector[2] = FSM::State::FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state Paused */
void FSM::exseq_FSM_Festo1__Sorting_Paused()
{
	/* Default exit sequence for state Paused */
	stateConfVector[2] = FSM::State::NO_STATE;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state E_STOP */
void FSM::exseq_FSM_Festo1__Sorting_E_STOP()
{
	/* Default exit sequence for state E_STOP */
	stateConfVector[2] = FSM::State::NO_STATE;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state Start */
void FSM::exseq_FSM_Festo1__Sorting_Start()
{
	/* Default exit sequence for state Start */
	stateConfVector[2] = FSM::State::NO_STATE;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state ErrorFST1 */
void FSM::exseq_FSM_Festo1__Sorting_ErrorFST1()
{
	/* Default exit sequence for state ErrorFST1 */
	stateConfVector[2] = FSM::State::NO_STATE;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state Paused */
void FSM::exseq_FSM_Festo1__Egress_Paused()
{
	/* Default exit sequence for state Paused */
	stateConfVector[3] = FSM::State::NO_STATE;
	stateConfVectorPosition = 3;
}

/* Default exit sequence for state E_STOP */
void FSM::exseq_FSM_Festo1__Egress_E_STOP()
{
	/* Default exit sequence for state E_STOP */
	stateConfVector[3] = FSM::State::NO_STATE;
	stateConfVectorPosition = 3;
}

/* Default exit sequence for state Start */
void FSM::exseq_FSM_Festo1__Egress_Start()
{
	/* Default exit sequence for state Start */
	stateConfVector[3] = FSM::State::NO_STATE;
	stateConfVectorPosition = 3;
}

/* Default exit sequence for state FST1Error */
void FSM::exseq_FSM_Festo1__Egress_FST1Error()
{
	/* Default exit sequence for state FST1Error */
	stateConfVector[3] = FSM::State::NO_STATE;
	stateConfVectorPosition = 3;
}

/* Default exit sequence for state Egress */
void FSM::exseq_FSM_Festo1__Egress_Egress()
{
	/* Default exit sequence for state Egress */
	exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress();
	stateConfVector[3] = FSM::State::NO_STATE;
	stateConfVectorPosition = 3;
}

/* Default exit sequence for state Waiting */
void FSM::exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Waiting()
{
	/* Default exit sequence for state Waiting */
	stateConfVector[3] = FSM::State::FSM_Festo1__Egress_Egress;
	stateConfVectorPosition = 3;
}

/* Default exit sequence for state Transfer */
void FSM::exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer()
{
	/* Default exit sequence for state Transfer */
	stateConfVector[3] = FSM::State::FSM_Festo1__Egress_Egress;
	stateConfVectorPosition = 3;
}

/* Default exit sequence for state PukExpected */
void FSM::exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected()
{
	/* Default exit sequence for state PukExpected */
	stateConfVector[3] = FSM::State::FSM_Festo1__Egress_Egress;
	stateConfVectorPosition = 3;
}

/* Default exit sequence for state IDLE */
void FSM::exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE()
{
	/* Default exit sequence for state IDLE */
	stateConfVector[3] = FSM::State::FSM_Festo1__Egress_Egress;
	stateConfVectorPosition = 3;
}

/* Default exit sequence for state PukPresent */
void FSM::exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent()
{
	/* Default exit sequence for state PukPresent */
	stateConfVector[3] = FSM::State::FSM_Festo1__Egress_Egress;
	stateConfVectorPosition = 3;
}

/* Default exit sequence for state SystemMotor */
void FSM::exseq_FSM_QualityGate__Motor_SystemMotor()
{
	/* Default exit sequence for state SystemMotor */
	exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor();
	stateConfVector[4] = FSM::State::NO_STATE;
	stateConfVectorPosition = 4;
}

/* Default exit sequence for state Forward */
void FSM::exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward()
{
	/* Default exit sequence for state Forward */
	stateConfVector[4] = FSM::State::FSM_QualityGate__Motor_SystemMotor;
	stateConfVectorPosition = 4;
}

/* Default exit sequence for state Slow */
void FSM::exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow()
{
	/* Default exit sequence for state Slow */
	stateConfVector[4] = FSM::State::FSM_QualityGate__Motor_SystemMotor;
	stateConfVectorPosition = 4;
}

/* Default exit sequence for state Stop */
void FSM::exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop()
{
	/* Default exit sequence for state Stop */
	stateConfVector[4] = FSM::State::FSM_QualityGate__Motor_SystemMotor;
	stateConfVectorPosition = 4;
}

/* Default exit sequence for state Operational */
void FSM::exseq___Operational()
{
	/* Default exit sequence for state Operational */
	stateConfVector[5] = FSM::State::NO_STATE;
	stateConfVectorPosition = 5;
}

/* Default exit sequence for state Start */
void FSM::exseq___Start()
{
	/* Default exit sequence for state Start */
	stateConfVector[5] = FSM::State::NO_STATE;
	stateConfVectorPosition = 5;
}

/* Default exit sequence for state Ready */
void FSM::exseq___Ready()
{
	/* Default exit sequence for state Ready */
	stateConfVector[5] = FSM::State::NO_STATE;
	stateConfVectorPosition = 5;
}

/* Default exit sequence for state ServiceMode */
void FSM::exseq___ServiceMode()
{
	/* Default exit sequence for state ServiceMode */
	stateConfVector[5] = FSM::State::NO_STATE;
	stateConfVectorPosition = 5;
	exact___ServiceMode();
}

/* Default exit sequence for state EStopCalibration */
void FSM::exseq___EStopCalibration()
{
	/* Default exit sequence for state EStopCalibration */
	stateConfVector[5] = FSM::State::NO_STATE;
	stateConfVectorPosition = 5;
}

/* Default exit sequence for state EStopReceived */
void FSM::exseq___EStopReceived()
{
	/* Default exit sequence for state EStopReceived */
	stateConfVector[5] = FSM::State::NO_STATE;
	stateConfVectorPosition = 5;
}

/* Default exit sequence for state EStopCleared */
void FSM::exseq___EStopCleared()
{
	/* Default exit sequence for state EStopCleared */
	stateConfVector[5] = FSM::State::NO_STATE;
	stateConfVectorPosition = 5;
}

/* Default exit sequence for state ReveivedReset */
void FSM::exseq___ReveivedReset()
{
	/* Default exit sequence for state ReveivedReset */
	stateConfVector[5] = FSM::State::NO_STATE;
	stateConfVectorPosition = 5;
}

/* Default exit sequence for state Paused */
void FSM::exseq___Paused()
{
	/* Default exit sequence for state Paused */
	stateConfVector[5] = FSM::State::NO_STATE;
	stateConfVectorPosition = 5;
}

/* Default exit sequence for state Off */
void FSM::exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off()
{
	/* Default exit sequence for state Off */
	stateConfVector[6] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 6;
}

/* Default exit sequence for state Constant */
void FSM::exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant()
{
	/* Default exit sequence for state Constant */
	stateConfVector[6] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 6;
}

/* Default exit sequence for state Blinking 1Hz */
void FSM::exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz()
{
	/* Default exit sequence for state Blinking 1Hz */
	stateConfVector[6] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 6;
}

/* Default exit sequence for state Off */
void FSM::exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off()
{
	/* Default exit sequence for state Off */
	stateConfVector[7] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 7;
}

/* Default exit sequence for state Constant */
void FSM::exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant()
{
	/* Default exit sequence for state Constant */
	stateConfVector[7] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 7;
}

/* Default exit sequence for state Blinking 1Hz */
void FSM::exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz()
{
	/* Default exit sequence for state Blinking 1Hz */
	stateConfVector[7] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 7;
}

/* Default exit sequence for state Off */
void FSM::exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off()
{
	/* Default exit sequence for state Off */
	stateConfVector[8] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 8;
}

/* Default exit sequence for state Constant */
void FSM::exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant()
{
	/* Default exit sequence for state Constant */
	stateConfVector[8] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 8;
}

/* Default exit sequence for state Blinking1HZ */
void FSM::exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Blinking1HZ()
{
	/* Default exit sequence for state Blinking1HZ */
	stateConfVector[8] = FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 8;
}

/* Default exit sequence for state Ingress */
void FSM::exseq_FSM_Festo2__Ingress_Ingress()
{
	/* Default exit sequence for state Ingress */
	exseq_FSM_Festo2__Ingress_Ingress_Ingress();
	stateConfVector[9] = FSM::State::NO_STATE;
	stateConfVectorPosition = 9;
}

/* Default exit sequence for state Idle */
void FSM::exseq_FSM_Festo2__Ingress_Ingress_Ingress_Idle()
{
	/* Default exit sequence for state Idle */
	stateConfVector[9] = FSM::State::FSM_Festo2__Ingress_Ingress;
	stateConfVectorPosition = 9;
}

/* Default exit sequence for state CreatingDistance */
void FSM::exseq_FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance()
{
	/* Default exit sequence for state CreatingDistance */
	stateConfVector[9] = FSM::State::FSM_Festo2__Ingress_Ingress;
	stateConfVectorPosition = 9;
}

/* Default exit sequence for state PukPresent */
void FSM::exseq_FSM_Festo2__Ingress_Ingress_Ingress_PukPresent()
{
	/* Default exit sequence for state PukPresent */
	stateConfVector[9] = FSM::State::FSM_Festo2__Ingress_Ingress;
	stateConfVectorPosition = 9;
}

/* Default exit sequence for state PukExpected */
void FSM::exseq_FSM_Festo2__Ingress_Ingress_Ingress_PukExpected()
{
	/* Default exit sequence for state PukExpected */
	stateConfVector[9] = FSM::State::FSM_Festo2__Ingress_Ingress;
	stateConfVectorPosition = 9;
}

/* Default exit sequence for state PukinLBF2 */
void FSM::exseq_FSM_Festo2__Ingress_Ingress_Ingress_PukinLBF2()
{
	/* Default exit sequence for state PukinLBF2 */
	stateConfVector[9] = FSM::State::FSM_Festo2__Ingress_Ingress;
	stateConfVectorPosition = 9;
}

/* Default exit sequence for state ERROR */
void FSM::exseq_FSM_Festo2__Ingress_Ingress_Ingress_ERROR()
{
	/* Default exit sequence for state ERROR */
	stateConfVector[9] = FSM::State::FSM_Festo2__Ingress_Ingress;
	stateConfVectorPosition = 9;
}

/* Default exit sequence for state E_STOP */
void FSM::exseq_FSM_Festo2__Ingress_E_STOP()
{
	/* Default exit sequence for state E_STOP */
	stateConfVector[9] = FSM::State::NO_STATE;
	stateConfVectorPosition = 9;
}

/* Default exit sequence for state Paused */
void FSM::exseq_FSM_Festo2__Ingress_Paused()
{
	/* Default exit sequence for state Paused */
	stateConfVector[9] = FSM::State::NO_STATE;
	stateConfVectorPosition = 9;
}

/* Default exit sequence for state Starting */
void FSM::exseq_FSM_Festo2__Ingress_Starting()
{
	/* Default exit sequence for state Starting */
	stateConfVector[9] = FSM::State::NO_STATE;
	stateConfVectorPosition = 9;
}

/* Default exit sequence for state ErrorFST2 */
void FSM::exseq_FSM_Festo2__Ingress_ErrorFST2()
{
	/* Default exit sequence for state ErrorFST2 */
	stateConfVector[9] = FSM::State::NO_STATE;
	stateConfVectorPosition = 9;
}

/* Default exit sequence for state HeightMeasurement */
void FSM::exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement()
{
	/* Default exit sequence for state HeightMeasurement */
	exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM();
	stateConfVector[10] = FSM::State::NO_STATE;
	stateConfVectorPosition = 10;
}

/* Default exit sequence for state Idle */
void FSM::exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle()
{
	/* Default exit sequence for state Idle */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement;
	stateConfVectorPosition = 10;
}

/* Default exit sequence for state PukPresent */
void FSM::exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent()
{
	/* Default exit sequence for state PukPresent */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement;
	stateConfVectorPosition = 10;
}

/* Default exit sequence for state PukExpected */
void FSM::exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected()
{
	/* Default exit sequence for state PukExpected */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement;
	stateConfVectorPosition = 10;
}

/* Default exit sequence for state Measuring */
void FSM::exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring()
{
	/* Default exit sequence for state Measuring */
	exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL();
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement;
	stateConfVectorPosition = 10;
}

/* Default exit sequence for state A */
void FSM::exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A()
{
	/* Default exit sequence for state A */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring;
	stateConfVectorPosition = 10;
}

/* Default exit sequence for state B */
void FSM::exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B()
{
	/* Default exit sequence for state B */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring;
	stateConfVectorPosition = 10;
}

/* Default exit sequence for state C */
void FSM::exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C()
{
	/* Default exit sequence for state C */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring;
	stateConfVectorPosition = 10;
}

/* Default exit sequence for state Error */
void FSM::exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error()
{
	/* Default exit sequence for state Error */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring;
	stateConfVectorPosition = 10;
}

/* Default exit sequence for state Evaluate */
void FSM::exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate()
{
	/* Default exit sequence for state Evaluate */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring;
	stateConfVectorPosition = 10;
}

/* Default exit sequence for final state. */
void FSM::exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final_()
{
	/* Default exit sequence for final state. */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring;
	stateConfVectorPosition = 10;
}

/* Default exit sequence for state Error */
void FSM::exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error()
{
	/* Default exit sequence for state Error */
	stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement;
	stateConfVectorPosition = 10;
}

/* Default exit sequence for state Paused */
void FSM::exseq_FSM_Festo2__HeightMeasurement_Paused()
{
	/* Default exit sequence for state Paused */
	stateConfVector[10] = FSM::State::NO_STATE;
	stateConfVectorPosition = 10;
}

/* Default exit sequence for state E_STOP */
void FSM::exseq_FSM_Festo2__HeightMeasurement_E_STOP()
{
	/* Default exit sequence for state E_STOP */
	stateConfVector[10] = FSM::State::NO_STATE;
	stateConfVectorPosition = 10;
}

/* Default exit sequence for state Start */
void FSM::exseq_FSM_Festo2__HeightMeasurement_Start()
{
	/* Default exit sequence for state Start */
	stateConfVector[10] = FSM::State::NO_STATE;
	stateConfVectorPosition = 10;
}

/* Default exit sequence for state ErrorFST2 */
void FSM::exseq_FSM_Festo2__HeightMeasurement_ErrorFST2()
{
	/* Default exit sequence for state ErrorFST2 */
	stateConfVector[10] = FSM::State::NO_STATE;
	stateConfVectorPosition = 10;
}

/* Default exit sequence for state Egress */
void FSM::exseq_FSM_Festo2__Egress_Egress()
{
	/* Default exit sequence for state Egress */
	exseq_FSM_Festo2__Egress_Egress_Egress();
	stateConfVector[11] = FSM::State::NO_STATE;
	stateConfVectorPosition = 11;
}

/* Default exit sequence for state IDLE */
void FSM::exseq_FSM_Festo2__Egress_Egress_Egress_IDLE()
{
	/* Default exit sequence for state IDLE */
	stateConfVector[11] = FSM::State::FSM_Festo2__Egress_Egress;
	stateConfVectorPosition = 11;
}

/* Default exit sequence for state PukPresent */
void FSM::exseq_FSM_Festo2__Egress_Egress_Egress_PukPresent()
{
	/* Default exit sequence for state PukPresent */
	stateConfVector[11] = FSM::State::FSM_Festo2__Egress_Egress;
	stateConfVectorPosition = 11;
}

/* Default exit sequence for state Transfer */
void FSM::exseq_FSM_Festo2__Egress_Egress_Egress_Transfer()
{
	/* Default exit sequence for state Transfer */
	stateConfVector[11] = FSM::State::FSM_Festo2__Egress_Egress;
	stateConfVectorPosition = 11;
	exact_FSM_Festo2__Egress_Egress_Egress_Transfer();
}

/* Default exit sequence for state PukExpected */
void FSM::exseq_FSM_Festo2__Egress_Egress_Egress_PukExpected()
{
	/* Default exit sequence for state PukExpected */
	stateConfVector[11] = FSM::State::FSM_Festo2__Egress_Egress;
	stateConfVectorPosition = 11;
}

/* Default exit sequence for state Error */
void FSM::exseq_FSM_Festo2__Egress_Egress_Egress_Error()
{
	/* Default exit sequence for state Error */
	stateConfVector[11] = FSM::State::FSM_Festo2__Egress_Egress;
	stateConfVectorPosition = 11;
}

/* Default exit sequence for state Paused */
void FSM::exseq_FSM_Festo2__Egress_Paused()
{
	/* Default exit sequence for state Paused */
	stateConfVector[11] = FSM::State::NO_STATE;
	stateConfVectorPosition = 11;
}

/* Default exit sequence for state E_STOP */
void FSM::exseq_FSM_Festo2__Egress_E_STOP()
{
	/* Default exit sequence for state E_STOP */
	stateConfVector[11] = FSM::State::NO_STATE;
	stateConfVectorPosition = 11;
}

/* Default exit sequence for state Start */
void FSM::exseq_FSM_Festo2__Egress_Start()
{
	/* Default exit sequence for state Start */
	stateConfVector[11] = FSM::State::NO_STATE;
	stateConfVectorPosition = 11;
}

/* Default exit sequence for state ErrorFST2 */
void FSM::exseq_FSM_Festo2__Egress_ErrorFST2()
{
	/* Default exit sequence for state ErrorFST2 */
	stateConfVector[11] = FSM::State::NO_STATE;
	stateConfVectorPosition = 11;
}

/* Default exit sequence for state SystemMotor */
void FSM::exseq_FSM_Festo2__Motor_SystemMotor()
{
	/* Default exit sequence for state SystemMotor */
	exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor();
	stateConfVector[12] = FSM::State::NO_STATE;
	stateConfVectorPosition = 12;
}

/* Default exit sequence for state Forward */
void FSM::exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward()
{
	/* Default exit sequence for state Forward */
	stateConfVector[12] = FSM::State::FSM_Festo2__Motor_SystemMotor;
	stateConfVectorPosition = 12;
}

/* Default exit sequence for state Slow */
void FSM::exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow()
{
	/* Default exit sequence for state Slow */
	stateConfVector[12] = FSM::State::FSM_Festo2__Motor_SystemMotor;
	stateConfVectorPosition = 12;
}

/* Default exit sequence for state Stop */
void FSM::exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop()
{
	/* Default exit sequence for state Stop */
	stateConfVector[12] = FSM::State::FSM_Festo2__Motor_SystemMotor;
	stateConfVectorPosition = 12;
}

/* Default exit sequence for state Off */
void FSM::exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off()
{
	/* Default exit sequence for state Off */
	stateConfVector[13] = FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 13;
}

/* Default exit sequence for state Constant */
void FSM::exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant()
{
	/* Default exit sequence for state Constant */
	stateConfVector[13] = FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 13;
}

/* Default exit sequence for state Blinking 1Hz */
void FSM::exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz()
{
	/* Default exit sequence for state Blinking 1Hz */
	stateConfVector[13] = FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 13;
}

/* Default exit sequence for state Off */
void FSM::exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off()
{
	/* Default exit sequence for state Off */
	stateConfVector[14] = FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 14;
}

/* Default exit sequence for state Constant */
void FSM::exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant()
{
	/* Default exit sequence for state Constant */
	stateConfVector[14] = FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 14;
}

/* Default exit sequence for state Blinking 1Hz */
void FSM::exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz()
{
	/* Default exit sequence for state Blinking 1Hz */
	stateConfVector[14] = FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 14;
}

/* Default exit sequence for state Off */
void FSM::exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off()
{
	/* Default exit sequence for state Off */
	stateConfVector[15] = FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 15;
}

/* Default exit sequence for state Constant */
void FSM::exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant()
{
	/* Default exit sequence for state Constant */
	stateConfVector[15] = FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 15;
}

/* Default exit sequence for state EvaluateTester */
void FSM::exseq_TEST_EvaluateTester()
{
	/* Default exit sequence for state EvaluateTester */
	stateConfVector[16] = FSM::State::NO_STATE;
	stateConfVectorPosition = 16;
}

/* Default exit sequence for state FSM_Errors */
void FSM::exseq_FSM_Festo1__Errors_FSM_Errors()
{
	/* Default exit sequence for state FSM_Errors */
	exseq_FSM_Festo1__Errors_FSM_Errors__();
	stateConfVector[17] = FSM::State::NO_STATE;
	stateConfVectorPosition = 17;
}

/* Default exit sequence for state ErrorinHMRestart */
void FSM::exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart()
{
	/* Default exit sequence for state ErrorinHMRestart */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors;
	stateConfVectorPosition = 17;
}

/* Default exit sequence for state ErrorinSortingPukUnacknowledged */
void FSM::exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukUnacknowledged()
{
	/* Default exit sequence for state ErrorinSortingPukUnacknowledged */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors;
	stateConfVectorPosition = 17;
}

/* Default exit sequence for state ErrorinIngressRestart */
void FSM::exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart()
{
	/* Default exit sequence for state ErrorinIngressRestart */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors;
	stateConfVectorPosition = 17;
}

/* Default exit sequence for state ErrorinSortingPukAcknowledged */
void FSM::exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukAcknowledged()
{
	/* Default exit sequence for state ErrorinSortingPukAcknowledged */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors;
	stateConfVectorPosition = 17;
}

/* Default exit sequence for state Idle */
void FSM::exseq_FSM_Festo1__Errors_FSM_Errors___Idle()
{
	/* Default exit sequence for state Idle */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors;
	stateConfVectorPosition = 17;
}

/* Default exit sequence for state ErrorinSortingRestart */
void FSM::exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart()
{
	/* Default exit sequence for state ErrorinSortingRestart */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors;
	stateConfVectorPosition = 17;
}

/* Default exit sequence for state ErrorinEgressMissingPukAcknowledged */
void FSM::exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressMissingPukAcknowledged()
{
	/* Default exit sequence for state ErrorinEgressMissingPukAcknowledged */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors;
	stateConfVectorPosition = 17;
}

/* Default exit sequence for state ErrorinEgressPukUnacknowledged */
void FSM::exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressPukUnacknowledged()
{
	/* Default exit sequence for state ErrorinEgressPukUnacknowledged */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors;
	stateConfVectorPosition = 17;
}

/* Default exit sequence for state ErrorinHMPukAcknowledged */
void FSM::exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMPukAcknowledged()
{
	/* Default exit sequence for state ErrorinHMPukAcknowledged */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors;
	stateConfVectorPosition = 17;
}

/* Default exit sequence for state ErrorinHMUnacknowledged */
void FSM::exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMUnacknowledged()
{
	/* Default exit sequence for state ErrorinHMUnacknowledged */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors;
	stateConfVectorPosition = 17;
}

/* Default exit sequence for state ErrorinIngressAcknowledged */
void FSM::exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged()
{
	/* Default exit sequence for state ErrorinIngressAcknowledged */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors;
	stateConfVectorPosition = 17;
}

/* Default exit sequence for state ErrorinIngressUnacknowledged */
void FSM::exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressUnacknowledged()
{
	/* Default exit sequence for state ErrorinIngressUnacknowledged */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors;
	stateConfVectorPosition = 17;
}

/* Default exit sequence for state ErrorinEgressRestart */
void FSM::exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart()
{
	/* Default exit sequence for state ErrorinEgressRestart */
	stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors;
	stateConfVectorPosition = 17;
}

/* Default exit sequence for state EStop */
void FSM::exseq_FSM_Festo1__Errors_EStop()
{
	/* Default exit sequence for state EStop */
	stateConfVector[17] = FSM::State::NO_STATE;
	stateConfVectorPosition = 17;
}

/* Default exit sequence for state Start */
void FSM::exseq_FSM_Festo1__Errors_Start()
{
	/* Default exit sequence for state Start */
	stateConfVector[17] = FSM::State::NO_STATE;
	stateConfVectorPosition = 17;
}

/* Default exit sequence for state Sorting */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_Sorting()
{
	/* Default exit sequence for state Sorting */
	exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting();
	stateConfVector[18] = FSM::State::NO_STATE;
	stateConfVectorPosition = 18;
}

/* Default exit sequence for state Idle */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle()
{
	/* Default exit sequence for state Idle */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 18;
}

/* Default exit sequence for state PukPresent */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent()
{
	/* Default exit sequence for state PukPresent */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 18;
}

/* Default exit sequence for state PukExpected */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected()
{
	/* Default exit sequence for state PukExpected */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 18;
}

/* Default exit sequence for state Evaluate */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate()
{
	/* Default exit sequence for state Evaluate */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 18;
}

/* Default exit sequence for state EjectingDivider */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider()
{
	/* Default exit sequence for state EjectingDivider */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 18;
}

/* Default exit sequence for state TransferEjector */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector()
{
	/* Default exit sequence for state TransferEjector */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 18;
}

/* Default exit sequence for state TransferDivider */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider()
{
	/* Default exit sequence for state TransferDivider */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 18;
}

/* Default exit sequence for state EjectingEjector */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector()
{
	/* Default exit sequence for state EjectingEjector */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 18;
}

/* Default exit sequence for state EvaluateCounter */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter()
{
	/* Default exit sequence for state EvaluateCounter */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 18;
}

/* Default exit sequence for state Error */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error()
{
	/* Default exit sequence for state Error */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 18;
}

/* Default exit sequence for state AwaitingRampClearanceDivider */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceDivider()
{
	/* Default exit sequence for state AwaitingRampClearanceDivider */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 18;
}

/* Default exit sequence for state AwaitingRampClearanceEjector */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector()
{
	/* Default exit sequence for state AwaitingRampClearanceEjector */
	stateConfVector[18] = FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting;
	stateConfVectorPosition = 18;
}

/* Default exit sequence for state Paused */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_Paused()
{
	/* Default exit sequence for state Paused */
	stateConfVector[18] = FSM::State::NO_STATE;
	stateConfVectorPosition = 18;
}

/* Default exit sequence for state E_STOP */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_E_STOP()
{
	/* Default exit sequence for state E_STOP */
	stateConfVector[18] = FSM::State::NO_STATE;
	stateConfVectorPosition = 18;
}

/* Default exit sequence for state Start */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_Start()
{
	/* Default exit sequence for state Start */
	stateConfVector[18] = FSM::State::NO_STATE;
	stateConfVectorPosition = 18;
}

/* Default exit sequence for state ErrorFST1 */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_ErrorFST1()
{
	/* Default exit sequence for state ErrorFST1 */
	stateConfVector[18] = FSM::State::NO_STATE;
	stateConfVectorPosition = 18;
}

/* Default exit sequence for state FSM_Errors */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors()
{
	/* Default exit sequence for state FSM_Errors */
	exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors();
	stateConfVector[19] = FSM::State::NO_STATE;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state ErrorinSortingUnacknowledged */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingUnacknowledged()
{
	/* Default exit sequence for state ErrorinSortingUnacknowledged */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state ErrorinIngressRestart */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart()
{
	/* Default exit sequence for state ErrorinIngressRestart */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state ErrorinSortingPukAcknowledged */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged()
{
	/* Default exit sequence for state ErrorinSortingPukAcknowledged */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state Idle */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle()
{
	/* Default exit sequence for state Idle */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state ErrorinEgressUPRestart */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart()
{
	/* Default exit sequence for state ErrorinEgressUPRestart */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state ErrorinEgressUnacknowledged */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUnacknowledged()
{
	/* Default exit sequence for state ErrorinEgressUnacknowledged */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state ErrorinEgressAcknowledged */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged()
{
	/* Default exit sequence for state ErrorinEgressAcknowledged */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state ErrorinIngressUnacknowledged */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged()
{
	/* Default exit sequence for state ErrorinIngressUnacknowledged */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state ErrorinIngressAcknowledged */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressAcknowledged()
{
	/* Default exit sequence for state ErrorinIngressAcknowledged */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state ErrorinHMAcknowledged */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged()
{
	/* Default exit sequence for state ErrorinHMAcknowledged */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state ErrorinHMUnacknowledged */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMUnacknowledged()
{
	/* Default exit sequence for state ErrorinHMUnacknowledged */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state ErrorinHMRestart */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart()
{
	/* Default exit sequence for state ErrorinHMRestart */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state ErrorinSortingRestart */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart()
{
	/* Default exit sequence for state ErrorinSortingRestart */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state ErrorRampFullUnacknowledged */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorRampFullUnacknowledged()
{
	/* Default exit sequence for state ErrorRampFullUnacknowledged */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state ErrorinRampFullAcknowledged */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged()
{
	/* Default exit sequence for state ErrorinRampFullAcknowledged */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state ErrorinRampFullRestart */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart()
{
	/* Default exit sequence for state ErrorinRampFullRestart */
	stateConfVector[19] = FSM::State::FSM_Festo2__Errors_FSM_Errors;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state EStop */
void FSM::exseq_FSM_Festo2__Errors_EStop()
{
	/* Default exit sequence for state EStop */
	stateConfVector[19] = FSM::State::NO_STATE;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for state Start */
void FSM::exseq_FSM_Festo2__Errors_Start()
{
	/* Default exit sequence for state Start */
	stateConfVector[19] = FSM::State::NO_STATE;
	stateConfVectorPosition = 19;
}

/* Default exit sequence for region FSM_Festo1:Ingress */
void FSM::exseq_FSM_Festo1_Ingress()
{
	/* Default exit sequence for region FSM_Festo1:Ingress */
	/* Handle exit of all possible states (of FSM.FSM_Festo1_Ingress) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case FSM::State::FSM_Festo1_Ingress_Ingress :
		{
			exseq_FSM_Festo1_Ingress_Ingress();
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_Idle :
		{
			exseq_FSM_Festo1_Ingress_Ingress_Ingress_Idle();
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_PukPresent :
		{
			exseq_FSM_Festo1_Ingress_Ingress_Ingress_PukPresent();
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance :
		{
			exseq_FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance();
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Paused :
		{
			exseq_FSM_Festo1_Ingress_Paused();
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_E_STOP :
		{
			exseq_FSM_Festo1_Ingress_E_STOP();
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Start :
		{
			exseq_FSM_Festo1_Ingress_Start();
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_ErrorFST1 :
		{
			exseq_FSM_Festo1_Ingress_ErrorFST1();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region Ingress */
void FSM::exseq_FSM_Festo1_Ingress_Ingress_Ingress()
{
	/* Default exit sequence for region Ingress */
	/* Handle exit of all possible states (of FSM.FSM_Festo1_Ingress.Ingress.Ingress) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_Idle :
		{
			exseq_FSM_Festo1_Ingress_Ingress_Ingress_Idle();
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_PukPresent :
		{
			exseq_FSM_Festo1_Ingress_Ingress_Ingress_PukPresent();
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance :
		{
			exseq_FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_Festo1 HeightMeasurement */
void FSM::exseq_FSM_Festo1_HeightMeasurement()
{
	/* Default exit sequence for region FSM_Festo1 HeightMeasurement */
	/* Handle exit of all possible states (of FSM.FSM_Festo1_HeightMeasurement) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement();
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle();
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring();
			break;
		}
		case FSM::State::A :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_A();
			break;
		}
		case FSM::State::B :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_B();
			break;
		}
		case FSM::State::C :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_C();
			break;
		}
		case FSM::State::Error :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error();
			break;
		}
		case FSM::State::Evaluate :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Evaluate();
			break;
		}
		case FSM::State::_final_ :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM__final_();
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent();
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected();
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_Paused :
		{
			exseq_FSM_Festo1_HeightMeasurement_Paused();
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_E_STOP :
		{
			exseq_FSM_Festo1_HeightMeasurement_E_STOP();
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_Start :
		{
			exseq_FSM_Festo1_HeightMeasurement_Start();
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_ErrorFST1 :
		{
			exseq_FSM_Festo1_HeightMeasurement_ErrorFST1();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_Festo1: HM */
void FSM::exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM()
{
	/* Default exit sequence for region FSM_Festo1: HM */
	/* Handle exit of all possible states (of FSM.FSM_Festo1_HeightMeasurement.HeightMeasurement.FSM_Festo1__HM) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle();
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring();
			break;
		}
		case FSM::State::A :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_A();
			break;
		}
		case FSM::State::B :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_B();
			break;
		}
		case FSM::State::C :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_C();
			break;
		}
		case FSM::State::Error :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error();
			break;
		}
		case FSM::State::Evaluate :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Evaluate();
			break;
		}
		case FSM::State::_final_ :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM__final_();
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent();
			break;
		}
		case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSMHeightInternalFSM */
void FSM::exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM()
{
	/* Default exit sequence for region FSMHeightInternalFSM */
	/* Handle exit of all possible states (of FSM.FSM_Festo1_HeightMeasurement.HeightMeasurement.FSM_Festo1__HM.Measuring.FSMHeightInternalFSM) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case FSM::State::A :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_A();
			break;
		}
		case FSM::State::B :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_B();
			break;
		}
		case FSM::State::C :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_C();
			break;
		}
		case FSM::State::Error :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error();
			break;
		}
		case FSM::State::Evaluate :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Evaluate();
			break;
		}
		case FSM::State::_final_ :
		{
			exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM__final_();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_Festo1: Sorting */
void FSM::exseq_FSM_Festo1__Sorting()
{
	/* Default exit sequence for region FSM_Festo1: Sorting */
	/* Handle exit of all possible states (of FSM.FSM_Festo1__Sorting) at position 2... */
	switch(stateConfVector[ 2 ])
	{
		case FSM::State::FSM_Festo1__Sorting_Sorting :
		{
			exseq_FSM_Festo1__Sorting_Sorting();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_Idle :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_Idle();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_PukPresent :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_PukExpected :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_Evaluate :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Paused :
		{
			exseq_FSM_Festo1__Sorting_Paused();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_E_STOP :
		{
			exseq_FSM_Festo1__Sorting_E_STOP();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Start :
		{
			exseq_FSM_Festo1__Sorting_Start();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_ErrorFST1 :
		{
			exseq_FSM_Festo1__Sorting_ErrorFST1();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region Sorting */
void FSM::exseq_FSM_Festo1__Sorting_Sorting_Sorting()
{
	/* Default exit sequence for region Sorting */
	/* Handle exit of all possible states (of FSM.FSM_Festo1__Sorting.Sorting.Sorting) at position 2... */
	switch(stateConfVector[ 2 ])
	{
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_Idle :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_Idle();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_PukPresent :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_PukExpected :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_Evaluate :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector();
			break;
		}
		case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter :
		{
			exseq_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_Festo1: Egress */
void FSM::exseq_FSM_Festo1__Egress()
{
	/* Default exit sequence for region FSM_Festo1: Egress */
	/* Handle exit of all possible states (of FSM.FSM_Festo1__Egress) at position 3... */
	switch(stateConfVector[ 3 ])
	{
		case FSM::State::FSM_Festo1__Egress_Paused :
		{
			exseq_FSM_Festo1__Egress_Paused();
			break;
		}
		case FSM::State::FSM_Festo1__Egress_E_STOP :
		{
			exseq_FSM_Festo1__Egress_E_STOP();
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Start :
		{
			exseq_FSM_Festo1__Egress_Start();
			break;
		}
		case FSM::State::FSM_Festo1__Egress_FST1Error :
		{
			exseq_FSM_Festo1__Egress_FST1Error();
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress :
		{
			exseq_FSM_Festo1__Egress_Egress();
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Waiting :
		{
			exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Waiting();
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer :
		{
			exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer();
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected :
		{
			exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected();
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE :
		{
			exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE();
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent :
		{
			exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_FST_1_Egress */
void FSM::exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress()
{
	/* Default exit sequence for region FSM_FST_1_Egress */
	/* Handle exit of all possible states (of FSM.FSM_Festo1__Egress.Egress.FSM_FST_1_Egress) at position 3... */
	switch(stateConfVector[ 3 ])
	{
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Waiting :
		{
			exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Waiting();
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer :
		{
			exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer();
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected :
		{
			exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected();
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE :
		{
			exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE();
			break;
		}
		case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent :
		{
			exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_QualityGate: Motor */
void FSM::exseq_FSM_QualityGate__Motor()
{
	/* Default exit sequence for region FSM_QualityGate: Motor */
	/* Handle exit of all possible states (of FSM.FSM_QualityGate__Motor) at position 4... */
	switch(stateConfVector[ 4 ])
	{
		case FSM::State::FSM_QualityGate__Motor_SystemMotor :
		{
			exseq_FSM_QualityGate__Motor_SystemMotor();
			break;
		}
		case FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward :
		{
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward();
			break;
		}
		case FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow :
		{
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow();
			break;
		}
		case FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop :
		{
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM:SystemMotor */
void FSM::exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor()
{
	/* Default exit sequence for region FSM:SystemMotor */
	/* Handle exit of all possible states (of FSM.FSM_QualityGate__Motor.SystemMotor.FSM_SystemMotor) at position 4... */
	switch(stateConfVector[ 4 ])
	{
		case FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward :
		{
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward();
			break;
		}
		case FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow :
		{
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow();
			break;
		}
		case FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop :
		{
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region < */
void FSM::exseq__()
{
	/* Default exit sequence for region < */
	/* Handle exit of all possible states (of FSM._) at position 5... */
	switch(stateConfVector[ 5 ])
	{
		case FSM::State::__Operational :
		{
			exseq___Operational();
			break;
		}
		case FSM::State::__Start :
		{
			exseq___Start();
			break;
		}
		case FSM::State::__Ready :
		{
			exseq___Ready();
			break;
		}
		case FSM::State::__ServiceMode :
		{
			exseq___ServiceMode();
			break;
		}
		case FSM::State::__EStopCalibration :
		{
			exseq___EStopCalibration();
			break;
		}
		case FSM::State::__EStopReceived :
		{
			exseq___EStopReceived();
			break;
		}
		case FSM::State::__EStopCleared :
		{
			exseq___EStopCleared();
			break;
		}
		case FSM::State::__ReveivedReset :
		{
			exseq___ReveivedReset();
			break;
		}
		case FSM::State::__Paused :
		{
			exseq___Paused();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_Festo1:Signaling */
void FSM::exseq_FSM_Festo1_Signaling()
{
	/* Default exit sequence for region FSM_Festo1:Signaling */
	/* Handle exit of all possible states (of FSM.FSM_Festo1_Signaling) at position 6... */
	switch(stateConfVector[ 6 ])
	{
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off :
		{
			exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
			break;
		}
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant :
		{
			exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant();
			break;
		}
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz :
		{
			exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz();
			break;
		}
		default:
			/* do nothing */
			break;
	}
	/* Handle exit of all possible states (of FSM.FSM_Festo1_Signaling) at position 7... */
	switch(stateConfVector[ 7 ])
	{
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off :
		{
			exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off();
			break;
		}
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant :
		{
			exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant();
			break;
		}
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz :
		{
			exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz();
			break;
		}
		default:
			/* do nothing */
			break;
	}
	/* Handle exit of all possible states (of FSM.FSM_Festo1_Signaling) at position 8... */
	switch(stateConfVector[ 8 ])
	{
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off :
		{
			exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off();
			break;
		}
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant :
		{
			exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant();
			break;
		}
		case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Blinking1HZ :
		{
			exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Blinking1HZ();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_Festo2: Ingress */
void FSM::exseq_FSM_Festo2__Ingress()
{
	/* Default exit sequence for region FSM_Festo2: Ingress */
	/* Handle exit of all possible states (of FSM.FSM_Festo2__Ingress) at position 9... */
	switch(stateConfVector[ 9 ])
	{
		case FSM::State::FSM_Festo2__Ingress_Ingress :
		{
			exseq_FSM_Festo2__Ingress_Ingress();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_Idle :
		{
			exseq_FSM_Festo2__Ingress_Ingress_Ingress_Idle();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance :
		{
			exseq_FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukPresent :
		{
			exseq_FSM_Festo2__Ingress_Ingress_Ingress_PukPresent();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukExpected :
		{
			exseq_FSM_Festo2__Ingress_Ingress_Ingress_PukExpected();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukinLBF2 :
		{
			exseq_FSM_Festo2__Ingress_Ingress_Ingress_PukinLBF2();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_ERROR :
		{
			exseq_FSM_Festo2__Ingress_Ingress_Ingress_ERROR();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_E_STOP :
		{
			exseq_FSM_Festo2__Ingress_E_STOP();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Paused :
		{
			exseq_FSM_Festo2__Ingress_Paused();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Starting :
		{
			exseq_FSM_Festo2__Ingress_Starting();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_ErrorFST2 :
		{
			exseq_FSM_Festo2__Ingress_ErrorFST2();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region Ingress */
void FSM::exseq_FSM_Festo2__Ingress_Ingress_Ingress()
{
	/* Default exit sequence for region Ingress */
	/* Handle exit of all possible states (of FSM.FSM_Festo2__Ingress.Ingress.Ingress) at position 9... */
	switch(stateConfVector[ 9 ])
	{
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_Idle :
		{
			exseq_FSM_Festo2__Ingress_Ingress_Ingress_Idle();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance :
		{
			exseq_FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukPresent :
		{
			exseq_FSM_Festo2__Ingress_Ingress_Ingress_PukPresent();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukExpected :
		{
			exseq_FSM_Festo2__Ingress_Ingress_Ingress_PukExpected();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukinLBF2 :
		{
			exseq_FSM_Festo2__Ingress_Ingress_Ingress_PukinLBF2();
			break;
		}
		case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_ERROR :
		{
			exseq_FSM_Festo2__Ingress_Ingress_Ingress_ERROR();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_Festo2: HeightMeasurement */
void FSM::exseq_FSM_Festo2__HeightMeasurement()
{
	/* Default exit sequence for region FSM_Festo2: HeightMeasurement */
	/* Handle exit of all possible states (of FSM.FSM_Festo2__HeightMeasurement) at position 10... */
	switch(stateConfVector[ 10 ])
	{
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final_ :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final_();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_Paused :
		{
			exseq_FSM_Festo2__HeightMeasurement_Paused();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_E_STOP :
		{
			exseq_FSM_Festo2__HeightMeasurement_E_STOP();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_Start :
		{
			exseq_FSM_Festo2__HeightMeasurement_Start();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_ErrorFST2 :
		{
			exseq_FSM_Festo2__HeightMeasurement_ErrorFST2();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_FST2: HM */
void FSM::exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM()
{
	/* Default exit sequence for region FSM_FST2: HM */
	/* Handle exit of all possible states (of FSM.FSM_Festo2__HeightMeasurement.HeightMeasurement.FSM_FST2__HM) at position 10... */
	switch(stateConfVector[ 10 ])
	{
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final_ :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final_();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FST2FSMINTERNAL */
void FSM::exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL()
{
	/* Default exit sequence for region FST2FSMINTERNAL */
	/* Handle exit of all possible states (of FSM.FSM_Festo2__HeightMeasurement.HeightMeasurement.FSM_FST2__HM.Measuring.FST2FSMINTERNAL) at position 10... */
	switch(stateConfVector[ 10 ])
	{
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate();
			break;
		}
		case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final_ :
		{
			exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final_();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_Festo2: Egress */
void FSM::exseq_FSM_Festo2__Egress()
{
	/* Default exit sequence for region FSM_Festo2: Egress */
	/* Handle exit of all possible states (of FSM.FSM_Festo2__Egress) at position 11... */
	switch(stateConfVector[ 11 ])
	{
		case FSM::State::FSM_Festo2__Egress_Egress :
		{
			exseq_FSM_Festo2__Egress_Egress();
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_IDLE :
		{
			exseq_FSM_Festo2__Egress_Egress_Egress_IDLE();
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_PukPresent :
		{
			exseq_FSM_Festo2__Egress_Egress_Egress_PukPresent();
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_Transfer :
		{
			exseq_FSM_Festo2__Egress_Egress_Egress_Transfer();
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_PukExpected :
		{
			exseq_FSM_Festo2__Egress_Egress_Egress_PukExpected();
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_Error :
		{
			exseq_FSM_Festo2__Egress_Egress_Egress_Error();
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Paused :
		{
			exseq_FSM_Festo2__Egress_Paused();
			break;
		}
		case FSM::State::FSM_Festo2__Egress_E_STOP :
		{
			exseq_FSM_Festo2__Egress_E_STOP();
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Start :
		{
			exseq_FSM_Festo2__Egress_Start();
			break;
		}
		case FSM::State::FSM_Festo2__Egress_ErrorFST2 :
		{
			exseq_FSM_Festo2__Egress_ErrorFST2();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region Egress */
void FSM::exseq_FSM_Festo2__Egress_Egress_Egress()
{
	/* Default exit sequence for region Egress */
	/* Handle exit of all possible states (of FSM.FSM_Festo2__Egress.Egress.Egress) at position 11... */
	switch(stateConfVector[ 11 ])
	{
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_IDLE :
		{
			exseq_FSM_Festo2__Egress_Egress_Egress_IDLE();
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_PukPresent :
		{
			exseq_FSM_Festo2__Egress_Egress_Egress_PukPresent();
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_Transfer :
		{
			exseq_FSM_Festo2__Egress_Egress_Egress_Transfer();
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_PukExpected :
		{
			exseq_FSM_Festo2__Egress_Egress_Egress_PukExpected();
			break;
		}
		case FSM::State::FSM_Festo2__Egress_Egress_Egress_Error :
		{
			exseq_FSM_Festo2__Egress_Egress_Egress_Error();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_Festo2: Motor */
void FSM::exseq_FSM_Festo2__Motor()
{
	/* Default exit sequence for region FSM_Festo2: Motor */
	/* Handle exit of all possible states (of FSM.FSM_Festo2__Motor) at position 12... */
	switch(stateConfVector[ 12 ])
	{
		case FSM::State::FSM_Festo2__Motor_SystemMotor :
		{
			exseq_FSM_Festo2__Motor_SystemMotor();
			break;
		}
		case FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward :
		{
			exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward();
			break;
		}
		case FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow :
		{
			exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow();
			break;
		}
		case FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop :
		{
			exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM:SystemMotor */
void FSM::exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor()
{
	/* Default exit sequence for region FSM:SystemMotor */
	/* Handle exit of all possible states (of FSM.FSM_Festo2__Motor.SystemMotor.FSM_SystemMotor) at position 12... */
	switch(stateConfVector[ 12 ])
	{
		case FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward :
		{
			exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward();
			break;
		}
		case FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow :
		{
			exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow();
			break;
		}
		case FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop :
		{
			exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_Festo2: Signaling */
void FSM::exseq_FSM_Festo2__Signaling()
{
	/* Default exit sequence for region FSM_Festo2: Signaling */
	/* Handle exit of all possible states (of FSM.FSM_Festo2__Signaling) at position 13... */
	switch(stateConfVector[ 13 ])
	{
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off :
		{
			exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
			break;
		}
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant :
		{
			exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant();
			break;
		}
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz :
		{
			exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz();
			break;
		}
		default:
			/* do nothing */
			break;
	}
	/* Handle exit of all possible states (of FSM.FSM_Festo2__Signaling) at position 14... */
	switch(stateConfVector[ 14 ])
	{
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off :
		{
			exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off();
			break;
		}
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant :
		{
			exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant();
			break;
		}
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz :
		{
			exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz();
			break;
		}
		default:
			/* do nothing */
			break;
	}
	/* Handle exit of all possible states (of FSM.FSM_Festo2__Signaling) at position 15... */
	switch(stateConfVector[ 15 ])
	{
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off :
		{
			exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off();
			break;
		}
		case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant :
		{
			exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region TEST */
void FSM::exseq_TEST()
{
	/* Default exit sequence for region TEST */
	/* Handle exit of all possible states (of FSM.TEST) at position 16... */
	switch(stateConfVector[ 16 ])
	{
		case FSM::State::TEST_EvaluateTester :
		{
			exseq_TEST_EvaluateTester();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_Festo1: Errors */
void FSM::exseq_FSM_Festo1__Errors()
{
	/* Default exit sequence for region FSM_Festo1: Errors */
	/* Handle exit of all possible states (of FSM.FSM_Festo1__Errors) at position 17... */
	switch(stateConfVector[ 17 ])
	{
		case FSM::State::FSM_Festo1__Errors_FSM_Errors :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukUnacknowledged :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukAcknowledged :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___Idle :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___Idle();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressMissingPukAcknowledged :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressMissingPukAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressPukUnacknowledged :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressPukUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMPukAcknowledged :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMPukAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMUnacknowledged :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressUnacknowledged :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_EStop :
		{
			exseq_FSM_Festo1__Errors_EStop();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_Start :
		{
			exseq_FSM_Festo1__Errors_Start();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region < */
void FSM::exseq_FSM_Festo1__Errors_FSM_Errors__()
{
	/* Default exit sequence for region < */
	/* Handle exit of all possible states (of FSM.FSM_Festo1__Errors.FSM_Errors._) at position 17... */
	switch(stateConfVector[ 17 ])
	{
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukUnacknowledged :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukAcknowledged :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___Idle :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___Idle();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressMissingPukAcknowledged :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressMissingPukAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressPukUnacknowledged :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressPukUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMPukAcknowledged :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMPukAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMUnacknowledged :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressUnacknowledged :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart :
		{
			exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region Copy_1_FSM_Festo1: Sorting */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting()
{
	/* Default exit sequence for region Copy_1_FSM_Festo1: Sorting */
	/* Handle exit of all possible states (of FSM.Copy_1_FSM_Festo1__Sorting) at position 18... */
	switch(stateConfVector[ 18 ])
	{
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceDivider :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceDivider();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Paused :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Paused();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_E_STOP :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_E_STOP();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Start :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Start();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_ErrorFST1 :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_ErrorFST1();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region Sorting */
void FSM::exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting()
{
	/* Default exit sequence for region Sorting */
	/* Handle exit of all possible states (of FSM.Copy_1_FSM_Festo1__Sorting.Sorting.Sorting) at position 18... */
	switch(stateConfVector[ 18 ])
	{
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceDivider :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceDivider();
			break;
		}
		case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector :
		{
			exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_Festo2: Errors */
void FSM::exseq_FSM_Festo2__Errors()
{
	/* Default exit sequence for region FSM_Festo2: Errors */
	/* Handle exit of all possible states (of FSM.FSM_Festo2__Errors) at position 19... */
	switch(stateConfVector[ 19 ])
	{
		case FSM::State::FSM_Festo2__Errors_FSM_Errors :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingUnacknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUnacknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressAcknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMUnacknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorRampFullUnacknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorRampFullUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_EStop :
		{
			exseq_FSM_Festo2__Errors_EStop();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_Start :
		{
			exseq_FSM_Festo2__Errors_Start();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FST_2: FSM_Errors */
void FSM::exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors()
{
	/* Default exit sequence for region FST_2: FSM_Errors */
	/* Handle exit of all possible states (of FSM.FSM_Festo2__Errors.FSM_Errors.FST_2__FSM_Errors) at position 19... */
	switch(stateConfVector[ 19 ])
	{
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingUnacknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUnacknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressAcknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMUnacknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorRampFullUnacknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorRampFullUnacknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged();
			break;
		}
		case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart :
		{
			exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo1_Ingress_Ingress_Ingress__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo1_Ingress_Ingress_Ingress_Idle_default();
}

/* Default react sequence for shallow history entry History */
void FSM::react_FSM_Festo1_Ingress_Ingress_Ingress_History()
{
	/* Default react sequence for shallow history entry History */
	/* Enter the region with shallow history */
	if (historyVector[0] != FSM::State::NO_STATE)
	{
		shenseq_FSM_Festo1_Ingress_Ingress_Ingress();
	} else
	{
		enseq_FSM_Festo1_Ingress_Ingress_Ingress_Idle_default();
	} 
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo1_Ingress__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo1_Ingress_Start_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_A_default();
}

/* Default react sequence for deep history entry History */
void FSM::react_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_History()
{
	/* Default react sequence for deep history entry History */
	/* Enter the region with deep history */
	if (historyVector[1] != FSM::State::NO_STATE)
	{
		dhenseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM();
	} else
	{
		enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle_default();
	} 
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo1_HeightMeasurement__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo1_HeightMeasurement_Start_default();
}

/* Default react sequence for shallow history entry History */
void FSM::react_FSM_Festo1__Sorting_Sorting_Sorting_History()
{
	/* Default react sequence for shallow history entry History */
	/* Enter the region with shallow history */
	if (historyVector[3] != FSM::State::NO_STATE)
	{
		shenseq_FSM_Festo1__Sorting_Sorting_Sorting();
	} else
	{
		enseq_FSM_Festo1__Sorting_Sorting_Sorting_Idle_default();
	} 
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo1__Sorting_Sorting_Sorting__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo1__Sorting_Sorting_Sorting_Idle_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo1__Sorting__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo1__Sorting_Start_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo1__Egress__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo1__Egress_Start_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE_default();
}

/* Default react sequence for shallow history entry History */
void FSM::react_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_History()
{
	/* Default react sequence for shallow history entry History */
	/* Enter the region with shallow history */
	if (historyVector[4] != FSM::State::NO_STATE)
	{
		shenseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress();
	} else
	{
		enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE_default();
	} 
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_QualityGate__Motor__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_QualityGate__Motor_SystemMotor_default();
}

/* Default react sequence for initial entry  */
void FSM::react____entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq___Start_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo1_Signaling__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo1_Signaling_FSM_LAMP_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo2__Ingress_Ingress_Ingress__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo2__Ingress_Ingress_Ingress_Idle_default();
}

/* Default react sequence for shallow history entry History */
void FSM::react_FSM_Festo2__Ingress_Ingress_Ingress_History()
{
	/* Default react sequence for shallow history entry History */
	/* Enter the region with shallow history */
	if (historyVector[5] != FSM::State::NO_STATE)
	{
		shenseq_FSM_Festo2__Ingress_Ingress_Ingress();
	} else
	{
		enseq_FSM_Festo2__Ingress_Ingress_Ingress_Idle_default();
	} 
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo2__Ingress__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo2__Ingress_Starting_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle_default();
}

/* Default react sequence for shallow history entry History */
void FSM::react_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_History()
{
	/* Default react sequence for shallow history entry History */
	/* Enter the region with shallow history */
	if (historyVector[6] != FSM::State::NO_STATE)
	{
		shenseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM();
	} else
	{
		enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle_default();
	} 
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo2__HeightMeasurement__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo2__HeightMeasurement_Start_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo2__Egress_Egress_Egress__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo2__Egress_Egress_Egress_IDLE_default();
}

/* Default react sequence for shallow history entry History */
void FSM::react_FSM_Festo2__Egress_Egress_Egress_History()
{
	/* Default react sequence for shallow history entry History */
	/* Enter the region with shallow history */
	if (historyVector[7] != FSM::State::NO_STATE)
	{
		shenseq_FSM_Festo2__Egress_Egress_Egress();
	} else
	{
		enseq_FSM_Festo2__Egress_Egress_Egress_IDLE_default();
	} 
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo2__Egress__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo2__Egress_Start_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo2__Motor__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo2__Motor_SystemMotor_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo2__Signaling__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo2__Signaling_FSM_LAMP_default();
}

/* Default react sequence for initial entry  */
void FSM::react_TEST__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_TEST_EvaluateTester_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo1__Errors__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo1__Errors_Start_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo1__Errors_FSM_Errors____entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
}

/* Default react sequence for shallow history entry History */
void FSM::react_FSM_Festo1__Errors_FSM_Errors___History()
{
	/* Default react sequence for shallow history entry History */
	/* Enter the region with shallow history */
	if (historyVector[8] != FSM::State::NO_STATE)
	{
		shenseq_FSM_Festo1__Errors_FSM_Errors__();
	} else
	{
		enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
	} 
}

/* Default react sequence for shallow history entry History */
void FSM::react_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_History()
{
	/* Default react sequence for shallow history entry History */
	/* Enter the region with shallow history */
	if (historyVector[9] != FSM::State::NO_STATE)
	{
		shenseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting();
	} else
	{
		enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle_default();
	} 
}

/* Default react sequence for initial entry  */
void FSM::react_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle_default();
}

/* Default react sequence for initial entry  */
void FSM::react_Copy_1_FSM_Festo1__Sorting__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_Copy_1_FSM_Festo1__Sorting_Start_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo2__Errors__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo2__Errors_Start_default();
}

/* Default react sequence for initial entry  */
void FSM::react_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
}

/* Default react sequence for shallow history entry History */
void FSM::react_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_History()
{
	/* Default react sequence for shallow history entry History */
	/* Enter the region with shallow history */
	if (historyVector[10] != FSM::State::NO_STATE)
	{
		shenseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors();
	} else
	{
		enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
	} 
}

sc::integer FSM::react(const sc::integer transitioned_before) {
	/* State machine reactions. */
	return transitioned_before;
}

sc::integer FSM::FSM_Festo1_Ingress_Ingress_react(const sc::integer transitioned_before) {
	/* The reactions of state Ingress. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (local_SYSTEM_OPERATIONAL_OUT_raised)
			{ 
				exseq_FSM_Festo1_Ingress_Ingress();
				enseq_FSM_Festo1_Ingress_Paused_default();
				transitioned_after = 0;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo1_Ingress_Ingress();
					enseq_FSM_Festo1_Ingress_E_STOP_default();
					transitioned_after = 0;
				}  else
				{
					if (local_FST_1_ERROR_SYSTEM_raised)
					{ 
						exseq_FSM_Festo1_Ingress_Ingress();
						enseq_FSM_Festo1_Ingress_ErrorFST1_default();
						transitioned_after = 0;
					} 
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_Ingress_Ingress_Ingress_Idle_react(const sc::integer transitioned_before) {
	/* The reactions of state Idle. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (LBF_1_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo1_Ingress_Ingress_Ingress_Idle();
				motor1Forward++;
				FST_1_INGRESS_IN_observable.next();
				raiseLocal_FST_1_INGRESS_IN();
				enseq_FSM_Festo1_Ingress_Ingress_Ingress_PukPresent_default();
				FSM_Festo1_Ingress_Ingress_react(0);
				transitioned_after = 0;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1_Ingress_Ingress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_Ingress_Ingress_Ingress_PukPresent_react(const sc::integer transitioned_before) {
	/* The reactions of state PukPresent. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (LBF_1_OPEN_raised)
			{ 
				exseq_FSM_Festo1_Ingress_Ingress_Ingress_PukPresent();
				FST_1_POSITION_INGRESS_NEW_PUK_observable.next();
				enseq_FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance_default();
				FSM_Festo1_Ingress_Ingress_react(0);
				transitioned_after = 0;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1_Ingress_Ingress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance_react(const sc::integer transitioned_before) {
	/* The reactions of state CreatingDistance. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (FST_1_POSITION_INGRESS_DISTANCE_VALID_raised)
			{ 
				exseq_FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance();
				incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_1_PUK_ENTRY_HeightMeasurement))
				;
				FST_1_INGRESS_OUT_observable.next();
				raiseLocal_FST_1_INGRESS_OUT();
				enseq_FSM_Festo1_Ingress_Ingress_Ingress_Idle_default();
				FSM_Festo1_Ingress_Ingress_react(0);
				transitioned_after = 0;
			}  else
			{
				if (LBF_1_INTERRUPTED_raised)
				{ 
					exseq_FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance();
					FST_1_ERROR_SYSTEM_observable.next();
					raiseLocal_FST_1_ERROR_SYSTEM();
					FST_1_ERROR_INGRESS_observable.next();
					raiseLocal_FST_1_ERROR_INGRESS();
					enseq_FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance_default();
					FSM_Festo1_Ingress_Ingress_react(0);
					transitioned_after = 0;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1_Ingress_Ingress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_Ingress_Paused_react(const sc::integer transitioned_before) {
	/* The reactions of state Paused. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (SYSTEM_OPERATIONAL_IN_raised)
			{ 
				exseq_FSM_Festo1_Ingress_Paused();
				react_FSM_Festo1_Ingress_Ingress_Ingress_History();
				transitioned_after = 0;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo1_Ingress_Paused();
					enseq_FSM_Festo1_Ingress_E_STOP_default();
					transitioned_after = 0;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_Ingress_E_STOP_react(const sc::integer transitioned_before) {
	/* The reactions of state E_STOP. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (local_ESTOP_CLEARED_raised)
			{ 
				exseq_FSM_Festo1_Ingress_E_STOP();
				enseq_FSM_Festo1_Ingress_Start_default();
				transitioned_after = 0;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_Ingress_Start_react(const sc::integer transitioned_before) {
	/* The reactions of state Start. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (SYSTEM_OPERATIONAL_IN_raised)
			{ 
				exseq_FSM_Festo1_Ingress_Start();
				enseq_FSM_Festo1_Ingress_Ingress_default();
				transitioned_after = 0;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_Ingress_ErrorFST1_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorFST1. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (FST_1_ERROR_SYSTEM_RESOLVED_raised)
			{ 
				exseq_FSM_Festo1_Ingress_ErrorFST1();
				react_FSM_Festo1_Ingress_Ingress_Ingress_History();
				transitioned_after = 0;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo1_Ingress_ErrorFST1();
					enseq_FSM_Festo1_Ingress_E_STOP_default();
					transitioned_after = 0;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_HeightMeasurement_HeightMeasurement_react(const sc::integer transitioned_before) {
	/* The reactions of state HeightMeasurement. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (1))
		{ 
			if (local_SYSTEM_OPERATIONAL_OUT_raised)
			{ 
				exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement();
				enseq_FSM_Festo1_HeightMeasurement_Paused_default();
				transitioned_after = 1;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement();
					enseq_FSM_Festo1_HeightMeasurement_E_STOP_default();
					transitioned_after = 1;
				}  else
				{
					if (FST_1_PUK_ENTRY_HeightMeasurement_raised)
					{ 
						exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement();
						FST_1_HM_Counter++;
						EVALUATE_observable.next();
						raiseLocal_EVALUATE();
						react_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_History();
						transitioned_after = 1;
					}  else
					{
						if (local_FST_1_ERROR_SYSTEM_raised)
						{ 
							exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement();
							enseq_FSM_Festo1_HeightMeasurement_ErrorFST1_default();
							transitioned_after = 1;
						} 
					}
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle_react(const sc::integer transitioned_before) {
	/* The reactions of state Idle. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (1))
		{ 
			if ((FST_1_HM_Counter) > (0))
			{ 
				exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle();
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent_default();
				FSM_Festo1_HeightMeasurement_HeightMeasurement_react(1);
				transitioned_after = 1;
			}  else
			{
				if (HS_1_SAMPLE_raised)
				{ 
					exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle();
					FST_1_ERROR_SYSTEM_observable.next();
					raiseLocal_FST_1_ERROR_SYSTEM();
					FST_1_ERROR_HM_observable.next();
					raiseLocal_FST_1_ERROR_HM();
					enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle_default();
					FSM_Festo1_HeightMeasurement_HeightMeasurement_react(1);
					transitioned_after = 1;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1_HeightMeasurement_HeightMeasurement_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(const sc::integer transitioned_before) {
	/* The reactions of state Measuring. */
	sc::integer transitioned_after = transitioned_before;
	if ((isStateActive(FSM::State::_final_)) && (doCompletion))
	{ 
		/* Default exit sequence for state Measuring */
		exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM();
		stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement;
		stateConfVectorPosition = 1;
		/* 'default' enter sequence for state Idle */
		stateConfVector[1] = FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle;
		stateConfVectorPosition = 1;
		historyVector[1] = stateConfVector[1];
		FSM_Festo1_HeightMeasurement_HeightMeasurement_react(1);
	}  else
	{
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1_HeightMeasurement_HeightMeasurement_react(transitioned_before);
		} 
	}
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_A_react(const sc::integer transitioned_before) {
	/* The reactions of state A. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (1))
		{ 
			if ((((AReferenceMinCount) <= (FST_1_sampleCount)) && (((BReferenceHeight + HeightThreshhold)) > (FST_1_currentValue))) && (((BReferenceHeight - HeightThreshhold)) < (FST_1_currentValue)))
			{ 
				exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_A();
				setFST_1_sampleCount(0);
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_B_default();
				FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(1);
				transitioned_after = 1;
			}  else
			{
				if ((((AReferenceHeight + HeightThreshhold)) < (FST_1_currentValue)) || ((FST_1_currentValue) < ((AReferenceHeight - HeightThreshhold))))
				{ 
					exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_A();
					enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error_default();
					FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(1);
					transitioned_after = 1;
				}  else
				{
					if ((AReferenceMaxCount) < (FST_1_sampleCount))
					{ 
						exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_A();
						enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error_default();
						FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(1);
						transitioned_after = 1;
					}  else
					{
						if (HS_1_SAMPLE_raised)
						{ 
							exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_A();
							FST_1_sampleCount++;
							FST_1_generalCount++;
							EVALUATE_observable.next();
							raiseLocal_EVALUATE();
							enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_A_default();
							FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(1);
							transitioned_after = 1;
						}  else
						{
							if ((FST_1_generalCount) > (MaxSampleCount))
							{ 
								exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_A();
								enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error_default();
								FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(1);
								transitioned_after = 1;
							} 
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_B_react(const sc::integer transitioned_before) {
	/* The reactions of state B. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (1))
		{ 
			if ((((BReferenceMinCount) <= (FST_1_sampleCount)) && (((CReferenceHeight + HeightThreshhold)) > (FST_1_currentValue))) && (((CReferenceHeight - HeightThreshhold)) < (FST_1_currentValue)))
			{ 
				exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_B();
				setFST_1_sampleCount(0);
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_C_default();
				FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(1);
				transitioned_after = 1;
			}  else
			{
				if ((((BReferenceHeight + HeightThreshhold)) < (FST_1_currentValue)) || ((FST_1_currentValue) < ((BReferenceHeight - HeightThreshhold))))
				{ 
					exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_B();
					enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error_default();
					FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(1);
					transitioned_after = 1;
				}  else
				{
					if (HS_1_SAMPLE_raised)
					{ 
						exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_B();
						FST_1_sampleCount++;
						FST_1_generalCount++;
						EVALUATE_observable.next();
						raiseLocal_EVALUATE();
						enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_B_default();
						FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(1);
						transitioned_after = 1;
					}  else
					{
						if ((BReferenceMaxCount) < (FST_1_sampleCount))
						{ 
							exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_B();
							enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error_default();
							FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(1);
							transitioned_after = 1;
						}  else
						{
							if ((FST_1_generalCount) > (MaxSampleCount))
							{ 
								exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_B();
								enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error_default();
								FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(1);
								transitioned_after = 1;
							} 
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_C_react(const sc::integer transitioned_before) {
	/* The reactions of state C. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (1))
		{ 
			if (HS_1_SAMPLING_DONE_raised)
			{ 
				exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_C();
				FST_1_POSITION_HEIGHTMEASUREMENT_NEW_PUK_observable.next();
				motor1Slow--;
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Evaluate_default();
				FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(1);
				transitioned_after = 1;
			}  else
			{
				if ((((CReferenceHeight + HeightThreshhold)) < (FST_1_currentValue)) || ((FST_1_currentValue) < ((CReferenceHeight - HeightThreshhold))))
				{ 
					exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_C();
					enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error_default();
					FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(1);
					transitioned_after = 1;
				}  else
				{
					if ((CReferenceMaxCount) < (FST_1_sampleCount))
					{ 
						exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_C();
						enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error_default();
						FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(1);
						transitioned_after = 1;
					}  else
					{
						if (HS_1_SAMPLE_raised)
						{ 
							exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_C();
							FST_1_sampleCount++;
							FST_1_generalCount++;
							EVALUATE_observable.next();
							raiseLocal_EVALUATE();
							enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_C_default();
							FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(1);
							transitioned_after = 1;
						}  else
						{
							if ((FST_1_generalCount) > (MaxSampleCount))
							{ 
								exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_C();
								enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error_default();
								FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(1);
								transitioned_after = 1;
							} 
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error_react(const sc::integer transitioned_before) {
	/* The reactions of state Error. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (1))
		{ 
			if (HS_1_SAMPLING_DONE_raised)
			{ 
				exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error();
				setFST_1_generalCount(0);
				setFST_1_sampleCount(0);
				motor1Slow--;
				FST_1_HM_Counter--;
				FST_1_POSITION_HEIGHTMEASUREMENT_NEW_PUK_observable.next();
				FST_1_PUK_HEIGHT_IS_NOT_VALID_observable.next();
				Q12_ON_observable.next();
				FST_1_PUK_ENTRY_SORTING_observable.next();
				raiseLocal_FST_1_PUK_ENTRY_SORTING();
				enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM__final__default();
				transitioned_after = 1;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Evaluate_react(const sc::integer transitioned_before) {
	/* The reactions of state Evaluate. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (1))
		{ 
			if ((CReferenceMinCount) <= (FST_1_sampleCount))
			{ 
				exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Evaluate();
				setFST_1_generalCount(0);
				setFST_1_sampleCount(0);
				FST_1_HM_Counter--;
				FST_1_PUK_HEIGHT_IS_VALID_observable.next();
				Q11_ON_observable.next();
				FST_1_PUK_ENTRY_SORTING_observable.next();
				raiseLocal_FST_1_PUK_ENTRY_SORTING();
				enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM__final__default();
				transitioned_after = 1;
			}  else
			{
				if ((CReferenceMinCount) > (FST_1_sampleCount))
				{ 
					exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Evaluate();
					setFST_1_generalCount(0);
					setFST_1_sampleCount(0);
					FST_1_HM_Counter--;
					FST_1_PUK_HEIGHT_IS_NOT_VALID_observable.next();
					Q12_ON_observable.next();
					FST_1_PUK_ENTRY_SORTING_observable.next();
					raiseLocal_FST_1_PUK_ENTRY_SORTING();
					enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM__final__default();
					transitioned_after = 1;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM__final__react(const sc::integer transitioned_before) {
	/* The reactions of state null. */
	return FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_react(transitioned_before);
}

sc::integer FSM::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent_react(const sc::integer transitioned_before) {
	/* The reactions of state PukPresent. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (1))
		{ 
			if (FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED_raised)
			{ 
				exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent();
				enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected_default();
				FSM_Festo1_HeightMeasurement_HeightMeasurement_react(1);
				transitioned_after = 1;
			}  else
			{
				if (HS_1_SAMPLE_raised)
				{ 
					exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent();
					FST_1_ERROR_SYSTEM_observable.next();
					raiseLocal_FST_1_ERROR_SYSTEM();
					FST_1_ERROR_HM_observable.next();
					raiseLocal_FST_1_ERROR_HM();
					enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent_default();
					FSM_Festo1_HeightMeasurement_HeightMeasurement_react(1);
					transitioned_after = 1;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1_HeightMeasurement_HeightMeasurement_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected_react(const sc::integer transitioned_before) {
	/* The reactions of state PukExpected. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (1))
		{ 
			if (HS_1_SAMPLE_raised)
			{ 
				exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected();
				motor1Slow++;
				FST_1_sampleCount++;
				FST_1_generalCount++;
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_default();
				FSM_Festo1_HeightMeasurement_HeightMeasurement_react(1);
				transitioned_after = 1;
			}  else
			{
				if ((FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED_raised) && ((FST_1_HM_Counter) > (1)))
				{ 
					exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected();
					FST_1_HM_Counter--;
					motor1Forward--;
					FST_1_ERROR_SYSTEM_observable.next();
					raiseLocal_FST_1_ERROR_SYSTEM();
					FST_1_ERROR_HM_MISSING_PUK_observable.next();
					enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent_default();
					FSM_Festo1_HeightMeasurement_HeightMeasurement_react(1);
					transitioned_after = 1;
				}  else
				{
					if ((FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED_raised) && ((FST_1_HM_Counter) == (1)))
					{ 
						exseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected();
						FST_1_HM_Counter--;
						motor1Forward--;
						FST_1_ERROR_SYSTEM_observable.next();
						raiseLocal_FST_1_ERROR_SYSTEM();
						FST_1_ERROR_HM_MISSING_PUK_observable.next();
						enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle_default();
						FSM_Festo1_HeightMeasurement_HeightMeasurement_react(1);
						transitioned_after = 1;
					} 
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1_HeightMeasurement_HeightMeasurement_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_HeightMeasurement_Paused_react(const sc::integer transitioned_before) {
	/* The reactions of state Paused. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (1))
		{ 
			if (SYSTEM_OPERATIONAL_IN_raised)
			{ 
				exseq_FSM_Festo1_HeightMeasurement_Paused();
				react_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_History();
				transitioned_after = 1;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo1_HeightMeasurement_Paused();
					enseq_FSM_Festo1_HeightMeasurement_E_STOP_default();
					transitioned_after = 1;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_HeightMeasurement_E_STOP_react(const sc::integer transitioned_before) {
	/* The reactions of state E_STOP. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (1))
		{ 
			if (local_ESTOP_CLEARED_raised)
			{ 
				exseq_FSM_Festo1_HeightMeasurement_E_STOP();
				enseq_FSM_Festo1_HeightMeasurement_Start_default();
				transitioned_after = 1;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_HeightMeasurement_Start_react(const sc::integer transitioned_before) {
	/* The reactions of state Start. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (1))
		{ 
			if (SYSTEM_OPERATIONAL_IN_raised)
			{ 
				exseq_FSM_Festo1_HeightMeasurement_Start();
				enseq_FSM_Festo1_HeightMeasurement_HeightMeasurement_default();
				transitioned_after = 1;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_HeightMeasurement_ErrorFST1_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorFST1. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (1))
		{ 
			if (FST_1_ERROR_SYSTEM_RESOLVED_raised)
			{ 
				exseq_FSM_Festo1_HeightMeasurement_ErrorFST1();
				react_FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_History();
				transitioned_after = 1;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo1_HeightMeasurement_ErrorFST1();
					enseq_FSM_Festo1_HeightMeasurement_E_STOP_default();
					transitioned_after = 1;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Sorting_Sorting_react(const sc::integer transitioned_before) {
	/* The reactions of state Sorting. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (2))
		{ 
			if (local_SYSTEM_OPERATIONAL_OUT_raised)
			{ 
				exseq_FSM_Festo1__Sorting_Sorting();
				enseq_FSM_Festo1__Sorting_Paused_default();
				transitioned_after = 2;
			}  else
			{
				if (LBR_1_INTERRUPTED_raised)
				{ 
					exseq_FSM_Festo1__Sorting_Sorting();
					setFST1RampFull(true);
					EVALUATE_observable.next();
					raiseLocal_EVALUATE();
					react_FSM_Festo1__Sorting_Sorting_Sorting_History();
					transitioned_after = 2;
				}  else
				{
					if (LBR_1_OPEN_raised)
					{ 
						exseq_FSM_Festo1__Sorting_Sorting();
						setFST1RampFull(false);
						EVALUATE_observable.next();
						raiseLocal_EVALUATE();
						react_FSM_Festo1__Sorting_Sorting_Sorting_History();
						transitioned_after = 2;
					}  else
					{
						if (local_ESTOP_RECEIVED_raised)
						{ 
							exseq_FSM_Festo1__Sorting_Sorting();
							enseq_FSM_Festo1__Sorting_E_STOP_default();
							transitioned_after = 2;
						}  else
						{
							if (MS_1_HIGH_raised)
							{ 
								exseq_FSM_Festo1__Sorting_Sorting();
								setFST1isMetal(true);
								EVALUATE_observable.next();
								raiseLocal_EVALUATE();
								react_FSM_Festo1__Sorting_Sorting_Sorting_History();
								transitioned_after = 2;
							}  else
							{
								if (MS_1_LOW_raised)
								{ 
									exseq_FSM_Festo1__Sorting_Sorting();
									setFST1isMetal(false);
									EVALUATE_observable.next();
									raiseLocal_EVALUATE();
									react_FSM_Festo1__Sorting_Sorting_Sorting_History();
									transitioned_after = 2;
								}  else
								{
									if (local_FST_1_ERROR_SYSTEM_raised)
									{ 
										exseq_FSM_Festo1__Sorting_Sorting();
										enseq_FSM_Festo1__Sorting_ErrorFST1_default();
										transitioned_after = 2;
									}  else
									{
										if (local_FST_1_PUK_ENTRY_SORTING_raised)
										{ 
											exseq_FSM_Festo1__Sorting_Sorting();
											FST1_Sorting_Counter++;
											EVALUATE_observable.next();
											raiseLocal_EVALUATE();
											react_FSM_Festo1__Sorting_Sorting_Sorting_History();
											transitioned_after = 2;
										}  else
										{
											if ((FST_1_POSITION_DIVIDER_DISTANCE_VALID_raised) && (!(FST_1_isEjector)))
											{ 
												exseq_FSM_Festo1__Sorting_Sorting();
												FST_1_SORTING_MODULE_RESTING_observable.next();
												react_FSM_Festo1__Sorting_Sorting_Sorting_History();
												transitioned_after = 2;
											} 
										}
									}
								}
							}
						}
					}
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Sorting_Sorting_Sorting_Idle_react(const sc::integer transitioned_before) {
	/* The reactions of state Idle. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (2))
		{ 
			if ((FST1_Sorting_Counter) > (0))
			{ 
				exseq_FSM_Festo1__Sorting_Sorting_Sorting_Idle();
				enseq_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent_default();
				FSM_Festo1__Sorting_Sorting_react(2);
				transitioned_after = 2;
			}  else
			{
				if (LBM_1_INTERRUPTED_raised)
				{ 
					exseq_FSM_Festo1__Sorting_Sorting_Sorting_Idle();
					FST_1_ERROR_SYSTEM_observable.next();
					raiseLocal_FST_1_ERROR_SYSTEM();
					FST_1_ERROR_SORTING_observable.next();
					raiseLocal_FST_1_ERROR_SORTING();
					enseq_FSM_Festo1__Sorting_Sorting_Sorting_Idle_default();
					FSM_Festo1__Sorting_Sorting_react(2);
					transitioned_after = 2;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Sorting_Sorting_Sorting_PukPresent_react(const sc::integer transitioned_before) {
	/* The reactions of state PukPresent. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (2))
		{ 
			if (FST_1_POSITION_SORTING_PUK_EXPECTED_raised)
			{ 
				exseq_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent();
				enseq_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected_default();
				FSM_Festo1__Sorting_Sorting_react(2);
				transitioned_after = 2;
			}  else
			{
				if (LBM_1_INTERRUPTED_raised)
				{ 
					exseq_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent();
					FST_1_ERROR_SYSTEM_observable.next();
					raiseLocal_FST_1_ERROR_SYSTEM();
					FST_1_ERROR_SORTING_observable.next();
					raiseLocal_FST_1_ERROR_SORTING();
					enseq_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent_default();
					FSM_Festo1__Sorting_Sorting_react(2);
					transitioned_after = 2;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Sorting_Sorting_Sorting_PukExpected_react(const sc::integer transitioned_before) {
	/* The reactions of state PukExpected. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (2))
		{ 
			if ((LBM_1_INTERRUPTED_raised) && ((FST1isMetal) == (true)))
			{ 
				exseq_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected();
				FST_1_PUK_IS_METAL_observable.next();
				enseq_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate_default();
				FSM_Festo1__Sorting_Sorting_react(2);
				transitioned_after = 2;
			}  else
			{
				if ((LBM_1_INTERRUPTED_raised) && ((FST1isMetal) == (false)))
				{ 
					exseq_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected();
					FST_1_PUK_IS_NOT_METAL_observable.next();
					enseq_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate_default();
					FSM_Festo1__Sorting_Sorting_react(2);
					transitioned_after = 2;
				}  else
				{
					if ((FST_1_POSITION_SORTING_PUK_EXPIRED_raised) && ((FST1_Sorting_Counter) > (1)))
					{ 
						exseq_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected();
						FST1_Sorting_Counter--;
						motor1Forward--;
						FST_1_ERROR_SYSTEM_observable.next();
						raiseLocal_FST_1_ERROR_SYSTEM();
						FST_1_ERROR_SORTING_observable.next();
						raiseLocal_FST_1_ERROR_SORTING();
						enseq_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent_default();
						FSM_Festo1__Sorting_Sorting_react(2);
						transitioned_after = 2;
					}  else
					{
						if ((FST_1_POSITION_SORTING_PUK_EXPIRED_raised) && ((FST1_Sorting_Counter) == (1)))
						{ 
							exseq_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected();
							FST1_Sorting_Counter--;
							motor1Forward--;
							FST_1_ERROR_SYSTEM_observable.next();
							raiseLocal_FST_1_ERROR_SYSTEM();
							FST_1_ERROR_SORTING_observable.next();
							raiseLocal_FST_1_ERROR_SORTING();
							enseq_FSM_Festo1__Sorting_Sorting_Sorting_Idle_default();
							FSM_Festo1__Sorting_Sorting_react(2);
							transitioned_after = 2;
						} 
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Sorting_Sorting_Sorting_Evaluate_react(const sc::integer transitioned_before) {
	/* The reactions of state Evaluate. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (2))
		{ 
			if ((FST_1_PUK_SORTING_PASSTHROUGH_raised) && (FST_1_isEjector))
			{ 
				exseq_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
				FST1_Sorting_Counter--;
				FST_1_PUK_ENTRY_EGRESS_observable.next();
				raiseLocal_FST_1_PUK_ENTRY_EGRESS();
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector_default();
				FSM_Festo1__Sorting_Sorting_react(2);
				transitioned_after = 2;
			}  else
			{
				if ((FST_1_PUK_SORTING_PASSTHROUGH_raised) && (!(FST_1_isEjector)))
				{ 
					exseq_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
					FST1_Sorting_Counter--;
					FST_1_SORTING_MODULE_ACTIVE_observable.next();
					FST_1_PUK_ENTRY_EGRESS_observable.next();
					raiseLocal_FST_1_PUK_ENTRY_EGRESS();
					enseq_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider_default();
					FSM_Festo1__Sorting_Sorting_react(2);
					transitioned_after = 2;
				}  else
				{
					if (((FST_1_PUK_SORTING_EJECT_raised) && (!(FST_1_isEjector))) && (!(FST1RampFull)))
					{ 
						exseq_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
						FST1_Sorting_Counter--;
						EVALUATE_observable.next();
						raiseLocal_EVALUATE();
						enseq_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider_default();
						FSM_Festo1__Sorting_Sorting_react(2);
						transitioned_after = 2;
					}  else
					{
						if (((FST_1_PUK_SORTING_EJECT_raised) && (FST_1_isEjector)) && (!(FST1RampFull)))
						{ 
							exseq_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
							FST1_Sorting_Counter--;
							FST_1_SORTING_MODULE_ACTIVE_observable.next();
							FST_1_SORTING_MODULE_RESTING_observable.next();
							enseq_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector_default();
							FSM_Festo1__Sorting_Sorting_react(2);
							transitioned_after = 2;
						}  else
						{
							if (((FST_1_PUK_SORTING_EJECT_raised) && (!(FST_1_isEjector))) && (FST1RampFull))
							{ 
								exseq_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
								FST1_Sorting_Counter--;
								FST_1_PUK_ENTRY_EGRESS_observable.next();
								raiseLocal_FST_1_PUK_ENTRY_EGRESS();
								enseq_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider_default();
								FSM_Festo1__Sorting_Sorting_react(2);
								transitioned_after = 2;
							}  else
							{
								if (((FST_1_PUK_SORTING_EJECT_raised) && (!(FST_1_isEjector))) && (FST1RampFull))
								{ 
									exseq_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
									FST1_Sorting_Counter--;
									FST_1_PUK_ENTRY_EGRESS_observable.next();
									raiseLocal_FST_1_PUK_ENTRY_EGRESS();
									enseq_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector_default();
									FSM_Festo1__Sorting_Sorting_react(2);
									transitioned_after = 2;
								} 
							}
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider_react(const sc::integer transitioned_before) {
	/* The reactions of state EjectingDivider. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (2))
		{ 
			if (LBM_1_OPEN_raised)
			{ 
				exseq_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider();
				enseq_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter_default();
				FSM_Festo1__Sorting_Sorting_react(2);
				transitioned_after = 2;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector_react(const sc::integer transitioned_before) {
	/* The reactions of state TransferEjector. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (2))
		{ 
			if (LBM_1_OPEN_raised)
			{ 
				exseq_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector();
				FST_1_POSITION_SORTING_NEW_PUK_observable.next();
				FST_1_PUK_ENTRY_EGRESS_observable.next();
				raiseLocal_FST_1_PUK_ENTRY_EGRESS();
				enseq_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter_default();
				FSM_Festo1__Sorting_Sorting_react(2);
				transitioned_after = 2;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider_react(const sc::integer transitioned_before) {
	/* The reactions of state TransferDivider. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (2))
		{ 
			if (LBM_1_OPEN_raised)
			{ 
				exseq_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider();
				FST_1_POSITION_SORTING_NEW_PUK_observable.next();
				FST_1_PUK_ENTRY_EGRESS_observable.next();
				raiseLocal_FST_1_PUK_ENTRY_EGRESS();
				enseq_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter_default();
				FSM_Festo1__Sorting_Sorting_react(2);
				transitioned_after = 2;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector_react(const sc::integer transitioned_before) {
	/* The reactions of state EjectingEjector. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (2))
		{ 
			if (LBM_1_OPEN_raised)
			{ 
				exseq_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector();
				enseq_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter_default();
				FSM_Festo1__Sorting_Sorting_react(2);
				transitioned_after = 2;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter_react(const sc::integer transitioned_before) {
	/* The reactions of state EvaluateCounter. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (2))
		{ 
			if ((FST1_Sorting_Counter) == (0))
			{ 
				exseq_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter();
				motor1Forward--;
				enseq_FSM_Festo1__Sorting_Sorting_Sorting_Idle_default();
				FSM_Festo1__Sorting_Sorting_react(2);
				transitioned_after = 2;
			}  else
			{
				if ((FST1_Sorting_Counter) > (0))
				{ 
					exseq_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter();
					enseq_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent_default();
					FSM_Festo1__Sorting_Sorting_react(2);
					transitioned_after = 2;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Sorting_Paused_react(const sc::integer transitioned_before) {
	/* The reactions of state Paused. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (2))
		{ 
			if (SYSTEM_OPERATIONAL_IN_raised)
			{ 
				exseq_FSM_Festo1__Sorting_Paused();
				react_FSM_Festo1__Sorting_Sorting_Sorting_History();
				transitioned_after = 2;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo1__Sorting_Paused();
					enseq_FSM_Festo1__Sorting_E_STOP_default();
					transitioned_after = 2;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Sorting_E_STOP_react(const sc::integer transitioned_before) {
	/* The reactions of state E_STOP. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (2))
		{ 
			if (local_ESTOP_CLEARED_raised)
			{ 
				exseq_FSM_Festo1__Sorting_E_STOP();
				enseq_FSM_Festo1__Sorting_Start_default();
				transitioned_after = 2;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Sorting_Start_react(const sc::integer transitioned_before) {
	/* The reactions of state Start. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (2))
		{ 
			if (SYSTEM_OPERATIONAL_IN_raised)
			{ 
				exseq_FSM_Festo1__Sorting_Start();
				enseq_FSM_Festo1__Sorting_Sorting_default();
				transitioned_after = 2;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Sorting_ErrorFST1_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorFST1. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (2))
		{ 
			if (FST_1_ERROR_SYSTEM_RESOLVED_raised)
			{ 
				exseq_FSM_Festo1__Sorting_ErrorFST1();
				react_FSM_Festo1__Sorting_Sorting_Sorting_History();
				transitioned_after = 2;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo1__Sorting_ErrorFST1();
					enseq_FSM_Festo1__Sorting_E_STOP_default();
					transitioned_after = 2;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Egress_Paused_react(const sc::integer transitioned_before) {
	/* The reactions of state Paused. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (3))
		{ 
			if (local_ESTOP_RECEIVED_raised)
			{ 
				exseq_FSM_Festo1__Egress_Paused();
				enseq_FSM_Festo1__Egress_E_STOP_default();
				transitioned_after = 3;
			}  else
			{
				if (SYSTEM_OPERATIONAL_IN_raised)
				{ 
					exseq_FSM_Festo1__Egress_Paused();
					react_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_History();
					transitioned_after = 3;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Egress_E_STOP_react(const sc::integer transitioned_before) {
	/* The reactions of state E_STOP. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (3))
		{ 
			if (local_ESTOP_CLEARED_raised)
			{ 
				exseq_FSM_Festo1__Egress_E_STOP();
				enseq_FSM_Festo1__Egress_Start_default();
				transitioned_after = 3;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Egress_Start_react(const sc::integer transitioned_before) {
	/* The reactions of state Start. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (3))
		{ 
			if (SYSTEM_OPERATIONAL_IN_raised)
			{ 
				exseq_FSM_Festo1__Egress_Start();
				enseq_FSM_Festo1__Egress_Egress_default();
				transitioned_after = 3;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Egress_FST1Error_react(const sc::integer transitioned_before) {
	/* The reactions of state FST1Error. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (3))
		{ 
			if (local_ESTOP_RECEIVED_raised)
			{ 
				exseq_FSM_Festo1__Egress_FST1Error();
				enseq_FSM_Festo1__Egress_E_STOP_default();
				transitioned_after = 3;
			}  else
			{
				if (FST_1_ERROR_SYSTEM_RESOLVED_raised)
				{ 
					exseq_FSM_Festo1__Egress_FST1Error();
					react_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_History();
					transitioned_after = 3;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Egress_Egress_react(const sc::integer transitioned_before) {
	/* The reactions of state Egress. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (3))
		{ 
			if (local_SYSTEM_OPERATIONAL_OUT_raised)
			{ 
				exseq_FSM_Festo1__Egress_Egress();
				enseq_FSM_Festo1__Egress_Paused_default();
				transitioned_after = 3;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo1__Egress_Egress();
					enseq_FSM_Festo1__Egress_E_STOP_default();
					transitioned_after = 3;
				}  else
				{
					if (local_FST_1_ERROR_SYSTEM_raised)
					{ 
						exseq_FSM_Festo1__Egress_Egress();
						enseq_FSM_Festo1__Egress_FST1Error_default();
						transitioned_after = 3;
					}  else
					{
						if (local_FST_1_PUK_ENTRY_EGRESS_raised)
						{ 
							exseq_FSM_Festo1__Egress_Egress();
							FST_1_Egress_Counter++;
							EVALUATE_observable.next();
							raiseLocal_EVALUATE();
							enseq_FSM_Festo1__Egress_Egress_default();
							transitioned_after = 3;
						} 
					}
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Waiting_react(const sc::integer transitioned_before) {
	/* The reactions of state Waiting. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (3))
		{ 
			if ((fst_2_ready) == (true))
			{ 
				exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Waiting();
				motor1Stop--;
				FST_2_PUK_ENTRY_INGRESS_observable.next();
				raiseLocal_FST_2_PUK_ENTRY_INGRESS();
				enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer_default();
				FSM_Festo1__Egress_Egress_react(3);
				transitioned_after = 3;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Egress_Egress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer_react(const sc::integer transitioned_before) {
	/* The reactions of state Transfer. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (3))
		{ 
			if ((LBE_1_OPEN_raised) && ((FST_1_Egress_Counter) == (0)))
			{ 
				exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer();
				FST_1_POSITION_EGRESS_NEW_PUK_observable.next();
				enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE_default();
				FSM_Festo1__Egress_Egress_react(3);
				transitioned_after = 3;
			}  else
			{
				if ((LBE_1_OPEN_raised) && ((FST_1_Egress_Counter) > (0)))
				{ 
					exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer();
					FST_1_POSITION_EGRESS_NEW_PUK_observable.next();
					enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent_default();
					FSM_Festo1__Egress_Egress_react(3);
					transitioned_after = 3;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Egress_Egress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected_react(const sc::integer transitioned_before) {
	/* The reactions of state PukExpected. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (3))
		{ 
			if ((LBE_1_INTERRUPTED_raised) && (((fst_2_ready) == (false))))
			{ 
				exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected();
				motor1Stop++;
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Waiting_default();
				FSM_Festo1__Egress_Egress_react(3);
				transitioned_after = 3;
			}  else
			{
				if ((LBE_1_INTERRUPTED_raised) && (((fst_2_ready) == (true))))
				{ 
					exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected();
					FST_2_PUK_ENTRY_INGRESS_observable.next();
					raiseLocal_FST_2_PUK_ENTRY_INGRESS();
					enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer_default();
					FSM_Festo1__Egress_Egress_react(3);
					transitioned_after = 3;
				}  else
				{
					if ((FST_1_POSITION_EGRESS_PUK_EXPIRED_raised) && ((FST_1_Egress_Counter) > (1)))
					{ 
						exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected();
						motor1Forward--;
						FST_1_Egress_Counter--;
						FST_1_ERROR_SYSTEM_observable.next();
						raiseLocal_FST_1_ERROR_SYSTEM();
						FST_1_ERROR_EGRESS_observable.next();
						enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent_default();
						FSM_Festo1__Egress_Egress_react(3);
						transitioned_after = 3;
					}  else
					{
						if ((FST_1_POSITION_EGRESS_PUK_EXPIRED_raised) && ((FST_1_Egress_Counter) == (1)))
						{ 
							exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected();
							motor1Forward--;
							FST_1_Egress_Counter--;
							FST_1_ERROR_SYSTEM_observable.next();
							raiseLocal_FST_1_ERROR_SYSTEM();
							FST_1_ERROR_EGRESS_observable.next();
							enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE_default();
							FSM_Festo1__Egress_Egress_react(3);
							transitioned_after = 3;
						} 
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Egress_Egress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE_react(const sc::integer transitioned_before) {
	/* The reactions of state IDLE. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (3))
		{ 
			if ((FST_1_Egress_Counter) > (0))
			{ 
				exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE();
				enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent_default();
				FSM_Festo1__Egress_Egress_react(3);
				transitioned_after = 3;
			}  else
			{
				if (LBE_1_INTERRUPTED_raised)
				{ 
					exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE();
					FST_1_ERROR_SYSTEM_observable.next();
					raiseLocal_FST_1_ERROR_SYSTEM();
					FST_1_ERROR_EGRESS_observable.next();
					enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE_default();
					FSM_Festo1__Egress_Egress_react(3);
					transitioned_after = 3;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Egress_Egress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent_react(const sc::integer transitioned_before) {
	/* The reactions of state PukPresent. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (3))
		{ 
			if (FST_1_POSITION_EGRESS_PUK_EXPECTED_raised)
			{ 
				exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent();
				enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected_default();
				FSM_Festo1__Egress_Egress_react(3);
				transitioned_after = 3;
			}  else
			{
				if ((LBE_1_INTERRUPTED_raised) && ((FST_1_Egress_Counter) > (0)))
				{ 
					exseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent();
					FST_1_ERROR_SYSTEM_observable.next();
					raiseLocal_FST_1_ERROR_SYSTEM();
					FST_1_ERROR_EGRESS_observable.next();
					enseq_FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent_default();
					FSM_Festo1__Egress_Egress_react(3);
					transitioned_after = 3;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Egress_Egress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_QualityGate__Motor_SystemMotor_react(const sc::integer transitioned_before) {
	/* The reactions of state SystemMotor. */
	return transitioned_before;
}

sc::integer FSM::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_react(const sc::integer transitioned_before) {
	/* The reactions of state Forward. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (4))
		{ 
			if (((motor1Stop) > (0)) || ((((motor1Forward) == (0)) && ((motor1Slow) == (0)))))
			{ 
				exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward();
				enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_default();
				FSM_QualityGate__Motor_SystemMotor_react(4);
				transitioned_after = 4;
			}  else
			{
				if (((motor1Stop) == (0)) && ((motor1Slow) > (0)))
				{ 
					exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward();
					enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_default();
					FSM_QualityGate__Motor_SystemMotor_react(4);
					transitioned_after = 4;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_QualityGate__Motor_SystemMotor_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_react(const sc::integer transitioned_before) {
	/* The reactions of state Slow. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (4))
		{ 
			if (((motor1Stop) > (0)) || ((((motor1Forward) == (0)) && ((motor1Slow) == (0)))))
			{ 
				exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow();
				enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_default();
				FSM_QualityGate__Motor_SystemMotor_react(4);
				transitioned_after = 4;
			}  else
			{
				if ((((motor1Stop) == (0)) && ((motor1Slow) == (0))) && ((motor1Forward) > (0)))
				{ 
					exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow();
					enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_default();
					FSM_QualityGate__Motor_SystemMotor_react(4);
					transitioned_after = 4;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_QualityGate__Motor_SystemMotor_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_react(const sc::integer transitioned_before) {
	/* The reactions of state Stop. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (4))
		{ 
			if (((motor1Stop) == (0)) && ((motor1Slow) > (0)))
			{ 
				exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop();
				enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_default();
				FSM_QualityGate__Motor_SystemMotor_react(4);
				transitioned_after = 4;
			}  else
			{
				if ((((motor1Stop) == (0)) && ((motor1Slow) == (0))) && ((motor1Forward) > (0)))
				{ 
					exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop();
					enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_default();
					FSM_QualityGate__Motor_SystemMotor_react(4);
					transitioned_after = 4;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_QualityGate__Motor_SystemMotor_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::__Operational_react(const sc::integer transitioned_before) {
	/* The reactions of state Operational. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (5))
		{ 
			if (BRS_1_INTERRUPTED_raised)
			{ 
				exseq___Operational();
				motor1Stop++;
				motor2Stop++;
				SYSTEM_OPERATIONAL_OUT_observable.next();
				raiseLocal_SYSTEM_OPERATIONAL_OUT();
				enseq___Paused_default();
				transitioned_after = 5;
			}  else
			{
				if (ESTOP_1_LOW_raised)
				{ 
					exseq___Operational();
					setIsEStop1High(false);
					motor1Stop++;
					motor2Stop++;
					setReadyReturn(true);
					ESTOP_RECEIVED_observable.next();
					raiseLocal_ESTOP_RECEIVED();
					enseq___EStopReceived_default();
					transitioned_after = 5;
				}  else
				{
					if (ESTOP_2_LOW_raised)
					{ 
						exseq___Operational();
						setIsEStop2High(false);
						motor1Stop++;
						motor2Stop++;
						setReadyReturn(true);
						ESTOP_RECEIVED_observable.next();
						raiseLocal_ESTOP_RECEIVED();
						enseq___EStopReceived_default();
						transitioned_after = 5;
					}  else
					{
						if (BRS_2_INTERRUPTED_raised)
						{ 
							exseq___Operational();
							motor1Stop++;
							motor2Stop++;
							SYSTEM_OPERATIONAL_OUT_observable.next();
							raiseLocal_SYSTEM_OPERATIONAL_OUT();
							enseq___Paused_default();
							transitioned_after = 5;
						} 
					}
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::__Start_react(const sc::integer transitioned_before) {
	/* The reactions of state Start. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (5))
		{ 
			if (((isEStop1High) == (true)) && ((isEStop2High) == (true)))
			{ 
				exseq___Start();
				enseq___EStopCalibration_default();
				transitioned_after = 5;
			}  else
			{
				if (ESTOP_2_HIGH_raised)
				{ 
					exseq___Start();
					setIsEStop2High(true);
					EVALUATE_observable.next();
					raiseLocal_EVALUATE();
					enseq___Start_default();
					transitioned_after = 5;
				}  else
				{
					if (ESTOP_2_LOW_raised)
					{ 
						exseq___Start();
						setIsEStop2High(false);
						EVALUATE_observable.next();
						raiseLocal_EVALUATE();
						enseq___Start_default();
						transitioned_after = 5;
					}  else
					{
						if (ESTOP_1_HIGH_raised)
						{ 
							exseq___Start();
							setIsEStop1High(true);
							EVALUATE_observable.next();
							raiseLocal_EVALUATE();
							enseq___Start_default();
							transitioned_after = 5;
						}  else
						{
							if (ESTOP_1_LOW_raised)
							{ 
								exseq___Start();
								setIsEStop1High(false);
								EVALUATE_observable.next();
								raiseLocal_EVALUATE();
								enseq___Start_default();
								transitioned_after = 5;
							} 
						}
					}
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::__Ready_react(const sc::integer transitioned_before) {
	/* The reactions of state Ready. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (5))
		{ 
			if (BGS_1_LONG_PRESSED_raised)
			{ 
				exseq___Ready();
				setCalibrated(false);
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq___ServiceMode_default();
				transitioned_after = 5;
			}  else
			{
				if (BGS_1_INTERRUPTED_raised)
				{ 
					exseq___Ready();
					incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::SYSTEM_OPERATIONAL_IN))
					;
					enseq___Operational_default();
					transitioned_after = 5;
				}  else
				{
					if (ESTOP_2_LOW_raised)
					{ 
						exseq___Ready();
						setIsEStop2High(false);
						setReadyReturn(true);
						ESTOP_RECEIVED_observable.next();
						raiseLocal_ESTOP_RECEIVED();
						enseq___EStopReceived_default();
						transitioned_after = 5;
					}  else
					{
						if (ESTOP_1_LOW_raised)
						{ 
							exseq___Ready();
							setIsEStop1High(false);
							motor1Stop++;
							motor2Stop++;
							setReadyReturn(true);
							ESTOP_RECEIVED_observable.next();
							raiseLocal_ESTOP_RECEIVED();
							enseq___EStopReceived_default();
							transitioned_after = 5;
						}  else
						{
							if (BGS_2_INTERRUPTED_raised)
							{ 
								exseq___Ready();
								incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::SYSTEM_OPERATIONAL_IN))
								;
								enseq___Operational_default();
								transitioned_after = 5;
							}  else
							{
								if (BGS_2_LONG_PRESSED_raised)
								{ 
									exseq___Ready();
									setCalibrated(false);
									EVALUATE_observable.next();
									raiseLocal_EVALUATE();
									enseq___ServiceMode_default();
									transitioned_after = 5;
								} 
							}
						}
					}
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::__ServiceMode_react(const sc::integer transitioned_before) {
	/* The reactions of state ServiceMode. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (5))
		{ 
			if (BRS_1_INTERRUPTED_raised)
			{ 
				exseq___ServiceMode();
				setCalibrated(true);
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq___Ready_default();
				transitioned_after = 5;
			}  else
			{
				if (ESTOP_1_LOW_raised)
				{ 
					exseq___ServiceMode();
					setIsEStop1High(false);
					motor1Stop++;
					motor2Stop++;
					setServiceModeReturn(true);
					ESTOP_RECEIVED_observable.next();
					raiseLocal_ESTOP_RECEIVED();
					enseq___EStopReceived_default();
					transitioned_after = 5;
				}  else
				{
					if (ESTOP_2_LOW_raised)
					{ 
						exseq___ServiceMode();
						setIsEStop2High(false);
						setServiceModeReturn(true);
						ESTOP_RECEIVED_observable.next();
						raiseLocal_ESTOP_RECEIVED();
						enseq___EStopReceived_default();
						transitioned_after = 5;
					}  else
					{
						if (BRS_2_INTERRUPTED_raised)
						{ 
							exseq___ServiceMode();
							setCalibrated(true);
							EVALUATE_observable.next();
							raiseLocal_EVALUATE();
							enseq___Ready_default();
							transitioned_after = 5;
						} 
					}
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::__EStopCalibration_react(const sc::integer transitioned_before) {
	/* The reactions of state EStopCalibration. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (5))
		{ 
			if (BGS_1_LONG_PRESSED_raised)
			{ 
				exseq___EStopCalibration();
				enseq___ServiceMode_default();
				transitioned_after = 5;
			}  else
			{
				if (ESTOP_1_LOW_raised)
				{ 
					exseq___EStopCalibration();
					setIsEStop1High(false);
					motor1Stop++;
					motor2Stop++;
					setEStopCalibratedReturn(true);
					ESTOP_RECEIVED_observable.next();
					raiseLocal_ESTOP_RECEIVED();
					enseq___EStopReceived_default();
					transitioned_after = 5;
				}  else
				{
					if (ESTOP_2_LOW_raised)
					{ 
						exseq___EStopCalibration();
						setIsEStop2High(false);
						setEStopCalibratedReturn(true);
						ESTOP_RECEIVED_observable.next();
						raiseLocal_ESTOP_RECEIVED();
						enseq___EStopReceived_default();
						transitioned_after = 5;
					}  else
					{
						if (BGS_2_LONG_PRESSED_raised)
						{ 
							exseq___EStopCalibration();
							enseq___ServiceMode_default();
							transitioned_after = 5;
						} 
					}
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::__EStopReceived_react(const sc::integer transitioned_before) {
	/* The reactions of state EStopReceived. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (5))
		{ 
			if (ESTOP_1_HIGH_raised)
			{ 
				exseq___EStopReceived();
				setIsEStop1High(true);
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq___EStopReceived_default();
				transitioned_after = 5;
			}  else
			{
				if (ESTOP_2_HIGH_raised)
				{ 
					exseq___EStopReceived();
					setIsEStop2High(true);
					EVALUATE_observable.next();
					raiseLocal_EVALUATE();
					enseq___EStopReceived_default();
					transitioned_after = 5;
				}  else
				{
					if (((isEStop1High) == (true)) && ((isEStop2High) == (true)))
					{ 
						exseq___EStopReceived();
						enseq___EStopCleared_default();
						transitioned_after = 5;
					}  else
					{
						if (ESTOP_1_LOW_raised)
						{ 
							exseq___EStopReceived();
							setIsEStop1High(false);
							EVALUATE_observable.next();
							raiseLocal_EVALUATE();
							enseq___EStopReceived_default();
							transitioned_after = 5;
						}  else
						{
							if (ESTOP_2_LOW_raised)
							{ 
								exseq___EStopReceived();
								setIsEStop2High(false);
								EVALUATE_observable.next();
								raiseLocal_EVALUATE();
								enseq___EStopReceived_default();
								transitioned_after = 5;
							} 
						}
					}
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::__EStopCleared_react(const sc::integer transitioned_before) {
	/* The reactions of state EStopCleared. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (5))
		{ 
			if (BGR_1_INTERRUPTED_raised)
			{ 
				exseq___EStopCleared();
				setIsBGR1Pressed(true);
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq___EStopCleared_default();
				transitioned_after = 5;
			}  else
			{
				if (BGR_2_INTERRUPTED_raised)
				{ 
					exseq___EStopCleared();
					setIsBGR2Pressed(true);
					EVALUATE_observable.next();
					raiseLocal_EVALUATE();
					enseq___EStopCleared_default();
					transitioned_after = 5;
				}  else
				{
					if (ESTOP_1_LOW_raised)
					{ 
						exseq___EStopCleared();
						setIsEStop1High(false);
						setIsBGR1Pressed(false);
						setIsBGR2Pressed(false);
						enseq___EStopReceived_default();
						transitioned_after = 5;
					}  else
					{
						if (ESTOP_2_LOW_raised)
						{ 
							exseq___EStopCleared();
							setIsEStop2High(false);
							setIsBGR1Pressed(false);
							setIsBGR2Pressed(false);
							enseq___EStopReceived_default();
							transitioned_after = 5;
						}  else
						{
							if (((isBGR1Pressed) == (true)) && ((isBGR2Pressed) == (true)))
							{ 
								exseq___EStopCleared();
								setIsBGR1Pressed(false);
								setIsBGR2Pressed(false);
								setMotor1Stop(0);
								setMotor1Slow(0);
								setMotor1Forward(0);
								setMotor2Stop(0);
								setMotor2Slow(0);
								setMotor2Forward(0);
								ESTOP_CLEARED_observable.next();
								raiseLocal_ESTOP_CLEARED();
								enseq___ReveivedReset_default();
								transitioned_after = 5;
							} 
						}
					}
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::__ReveivedReset_react(const sc::integer transitioned_before) {
	/* The reactions of state ReveivedReset. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (5))
		{ 
			if ((eStopCalibratedReturn) == (true))
			{ 
				exseq___ReveivedReset();
				setEStopCalibratedReturn(false);
				enseq___EStopCalibration_default();
				transitioned_after = 5;
			}  else
			{
				if ((serviceModeReturn) == (true))
				{ 
					exseq___ReveivedReset();
					setServiceModeReturn(false);
					enseq___ServiceMode_default();
					transitioned_after = 5;
				}  else
				{
					if ((readyReturn) == (true))
					{ 
						exseq___ReveivedReset();
						setReadyReturn(false);
						enseq___Ready_default();
						transitioned_after = 5;
					} 
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::__Paused_react(const sc::integer transitioned_before) {
	/* The reactions of state Paused. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (5))
		{ 
			if (BGS_1_INTERRUPTED_raised)
			{ 
				exseq___Paused();
				motor1Stop--;
				motor2Stop--;
				incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::SYSTEM_OPERATIONAL_IN))
				;
				enseq___Operational_default();
				transitioned_after = 5;
			}  else
			{
				if (BGS_2_INTERRUPTED_raised)
				{ 
					exseq___Paused();
					motor1Stop--;
					motor2Stop--;
					incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::SYSTEM_OPERATIONAL_IN))
					;
					enseq___Operational_default();
					transitioned_after = 5;
				}  else
				{
					if (ESTOP_1_LOW_raised)
					{ 
						exseq___Paused();
						setIsEStop1High(false);
						motor1Stop++;
						motor2Stop++;
						setReadyReturn(true);
						ESTOP_RECEIVED_observable.next();
						raiseLocal_ESTOP_RECEIVED();
						enseq___EStopReceived_default();
						transitioned_after = 5;
					}  else
					{
						if (ESTOP_2_LOW_raised)
						{ 
							exseq___Paused();
							motor1Stop++;
							motor2Stop++;
							setIsEStop2High(false);
							setReadyReturn(true);
							ESTOP_RECEIVED_observable.next();
							raiseLocal_ESTOP_RECEIVED();
							enseq___EStopReceived_default();
							transitioned_after = 5;
						}  else
						{
							if ((BGS_1_LONG_PRESSED_raised) || (BGS_2_LONG_PRESSED_raised))
							{ 
								exseq___Paused();
								setMotor1Stop(0);
								setMotor1Slow(0);
								setMotor1Forward(0);
								setMotor2Stop(0);
								setMotor2Slow(0);
								setMotor2Forward(0);
								setCalibrated(false);
								EVALUATE_observable.next();
								raiseLocal_EVALUATE();
								enseq___ServiceMode_default();
								transitioned_after = 5;
							} 
						}
					}
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_Signaling_FSM_LAMP_react(const sc::integer transitioned_before) {
	/* The reactions of state FSM_LAMP. */
	return transitioned_before;
}

sc::integer FSM::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(const sc::integer transitioned_before) {
	/* The reactions of state FSM_Lamp. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		/* Always execute local reactions. */
		transitioned_after = FSM_Festo1_Signaling_FSM_LAMP_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_react(const sc::integer transitioned_before) {
	/* The reactions of state Off. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (6))
		{ 
			if (SYSTEM_OPERATIONAL_IN_raised)
			{ 
				exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
				enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_default();
				transitioned_after = 6;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
					enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_default();
					transitioned_after = 6;
				}  else
				{
					if (local_SYSTEM_SERVICE_IN_raised)
					{ 
						exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
						enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz_default();
						transitioned_after = 6;
					} 
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_react(const sc::integer transitioned_before) {
	/* The reactions of state Constant. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (6))
		{ 
			if (local_SYSTEM_OPERATIONAL_OUT_raised)
			{ 
				exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant();
				enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_default();
				transitioned_after = 6;
			}  else
			{
				if (local_ESTOP_CLEARED_raised)
				{ 
					exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant();
					enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_default();
					transitioned_after = 6;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz_react(const sc::integer transitioned_before) {
	/* The reactions of state Blinking 1Hz. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (6))
		{ 
			if (local_SYSTEM_SERVICE_OUT_raised)
			{ 
				exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz();
				enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_default();
				transitioned_after = 6;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_react(const sc::integer transitioned_before) {
	/* The reactions of state Off. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (7))
		{ 
			if (local_ESTOP_RECEIVED_raised)
			{ 
				exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off();
				enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_default();
				transitioned_after = 7;
			}  else
			{
				if (local_FST_1_INGRESS_IN_raised)
				{ 
					exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off();
					enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz_default();
					transitioned_after = 7;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_react(const sc::integer transitioned_before) {
	/* The reactions of state Constant. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (7))
		{ 
			if (local_ESTOP_CLEARED_raised)
			{ 
				exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant();
				enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_default();
				transitioned_after = 7;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz_react(const sc::integer transitioned_before) {
	/* The reactions of state Blinking 1Hz. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (7))
		{ 
			if (local_FST_1_INGRESS_OUT_raised)
			{ 
				exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz();
				enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_default();
				transitioned_after = 7;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz();
					enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_default();
					transitioned_after = 7;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_react(const sc::integer transitioned_before) {
	/* The reactions of state Off. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (8))
		{ 
			if (local_ESTOP_RECEIVED_raised)
			{ 
				exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off();
				enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_default();
				FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(6);
				transitioned_after = 8;
			}  else
			{
				if (local_FST_1_ERROR_SYSTEM_raised)
				{ 
					exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off();
					enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Blinking1HZ_default();
					FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(6);
					transitioned_after = 8;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_react(const sc::integer transitioned_before) {
	/* The reactions of state Constant. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (8))
		{ 
			if (local_ESTOP_CLEARED_raised)
			{ 
				exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant();
				enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_default();
				FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(6);
				transitioned_after = 8;
			}  else
			{
				if (local_FST_1_ERROR_ACKNOWLEDGED_raised)
				{ 
					exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant();
					enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Blinking1HZ_default();
					FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(6);
					transitioned_after = 8;
				}  else
				{
					if (FST_1_ERROR_SYSTEM_RESOLVED_raised)
					{ 
						exseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant();
						enseq_FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_default();
						FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(6);
						transitioned_after = 8;
					} 
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Blinking1HZ_react(const sc::integer transitioned_before) {
	/* The reactions of state Blinking1HZ. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		/* Always execute local reactions. */
		transitioned_after = FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Ingress_Ingress_react(const sc::integer transitioned_before) {
	/* The reactions of state Ingress. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (9))
		{ 
			if (local_ESTOP_RECEIVED_raised)
			{ 
				exseq_FSM_Festo2__Ingress_Ingress();
				enseq_FSM_Festo2__Ingress_E_STOP_default();
				transitioned_after = 9;
			}  else
			{
				if (local_SYSTEM_OPERATIONAL_OUT_raised)
				{ 
					exseq_FSM_Festo2__Ingress_Ingress();
					enseq_FSM_Festo2__Ingress_Paused_default();
					transitioned_after = 9;
				}  else
				{
					if (local_FST_2_ERROR_SYSTEM_raised)
					{ 
						exseq_FSM_Festo2__Ingress_Ingress();
						enseq_FSM_Festo2__Ingress_ErrorFST2_default();
						transitioned_after = 9;
					} 
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Ingress_Ingress_Ingress_Idle_react(const sc::integer transitioned_before) {
	/* The reactions of state Idle. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (9))
		{ 
			if (local_FST_2_PUK_ENTRY_INGRESS_raised)
			{ 
				exseq_FSM_Festo2__Ingress_Ingress_Ingress_Idle();
				setFst_2_ready(false);
				motor2Forward++;
				FST_2_ERROR_INGRESS_observable.next();
				raiseLocal_FST_2_ERROR_INGRESS();
				FST_2_YELLOW_LAMP_ON_observable.next();
				raiseLocal_FST_2_YELLOW_LAMP_ON();
				enseq_FSM_Festo2__Ingress_Ingress_Ingress_PukPresent_default();
				FSM_Festo2__Ingress_Ingress_react(9);
				transitioned_after = 9;
			}  else
			{
				if (LBF_2_INTERRUPTED_raised)
				{ 
					exseq_FSM_Festo2__Ingress_Ingress_Ingress_Idle();
					motor2Stop++;
					FST_2_ERROR_SYSTEM_observable.next();
					raiseLocal_FST_2_ERROR_SYSTEM();
					FST_2_ERROR_INGRESS_observable.next();
					raiseLocal_FST_2_ERROR_INGRESS();
					enseq_FSM_Festo2__Ingress_Ingress_Ingress_ERROR_default();
					FSM_Festo2__Ingress_Ingress_react(9);
					transitioned_after = 9;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Ingress_Ingress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance_react(const sc::integer transitioned_before) {
	/* The reactions of state CreatingDistance. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (9))
		{ 
			if (FST_2_POSITION_INGRESS_DISTANCE_VALID_raised)
			{ 
				exseq_FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance();
				FST_2_YELLOW_LAMP_OFF_observable.next();
				raiseLocal_FST_2_YELLOW_LAMP_OFF();
				enseq_FSM_Festo2__Ingress_Ingress_Ingress_Idle_default();
				FSM_Festo2__Ingress_Ingress_react(9);
				transitioned_after = 9;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Ingress_Ingress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Ingress_Ingress_Ingress_PukPresent_react(const sc::integer transitioned_before) {
	/* The reactions of state PukPresent. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (9))
		{ 
			if (FST_2_POSITION_INGRESS_PUK_EXPECTED_raised)
			{ 
				exseq_FSM_Festo2__Ingress_Ingress_Ingress_PukPresent();
				enseq_FSM_Festo2__Ingress_Ingress_Ingress_PukExpected_default();
				FSM_Festo2__Ingress_Ingress_react(9);
				transitioned_after = 9;
			}  else
			{
				if (LBF_2_INTERRUPTED_raised)
				{ 
					exseq_FSM_Festo2__Ingress_Ingress_Ingress_PukPresent();
					FST_2_ERROR_INGRESS_observable.next();
					raiseLocal_FST_2_ERROR_INGRESS();
					motor2Stop++;
					enseq_FSM_Festo2__Ingress_Ingress_Ingress_ERROR_default();
					FSM_Festo2__Ingress_Ingress_react(9);
					transitioned_after = 9;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Ingress_Ingress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Ingress_Ingress_Ingress_PukExpected_react(const sc::integer transitioned_before) {
	/* The reactions of state PukExpected. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (9))
		{ 
			if (LBF_2_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo2__Ingress_Ingress_Ingress_PukExpected();
				enseq_FSM_Festo2__Ingress_Ingress_Ingress_PukinLBF2_default();
				FSM_Festo2__Ingress_Ingress_react(9);
				transitioned_after = 9;
			}  else
			{
				if (FST_2_POSITION_INGRESS_PUK_EXPIRED_raised)
				{ 
					exseq_FSM_Festo2__Ingress_Ingress_Ingress_PukExpected();
					motor2Stop++;
					motor2Forward--;
					setFst_2_ready(true);
					FST_2_ERROR_INGRESS_observable.next();
					raiseLocal_FST_2_ERROR_INGRESS();
					enseq_FSM_Festo2__Ingress_Ingress_Ingress_ERROR_default();
					FSM_Festo2__Ingress_Ingress_react(9);
					transitioned_after = 9;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Ingress_Ingress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Ingress_Ingress_Ingress_PukinLBF2_react(const sc::integer transitioned_before) {
	/* The reactions of state PukinLBF2. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (9))
		{ 
			if (LBF_2_OPEN_raised)
			{ 
				exseq_FSM_Festo2__Ingress_Ingress_Ingress_PukinLBF2();
				motor1Forward--;
				FST_2_POSITION_INGRESS_NEW_PUK_observable.next();
				FST_2_PUK_ENTRY_HeightMeasurement_observable.next();
				raiseLocal_FST_2_PUK_ENTRY_HeightMeasurement();
				enseq_FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance_default();
				FSM_Festo2__Ingress_Ingress_react(9);
				transitioned_after = 9;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Ingress_Ingress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Ingress_Ingress_Ingress_ERROR_react(const sc::integer transitioned_before) {
	/* The reactions of state ERROR. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (9))
		{ 
			if ((fst_2_ready) == (true))
			{ 
				exseq_FSM_Festo2__Ingress_Ingress_Ingress_ERROR();
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_FSM_Festo2__Ingress_Ingress_Ingress_Idle_default();
				FSM_Festo2__Ingress_Ingress_react(9);
				transitioned_after = 9;
			}  else
			{
				if ((fst_2_ready) == (false))
				{ 
					exseq_FSM_Festo2__Ingress_Ingress_Ingress_ERROR();
					motor2Stop--;
					EVALUATE_observable.next();
					raiseLocal_EVALUATE();
					enseq_FSM_Festo2__Ingress_Ingress_Ingress_PukPresent_default();
					FSM_Festo2__Ingress_Ingress_react(9);
					transitioned_after = 9;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Ingress_Ingress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Ingress_E_STOP_react(const sc::integer transitioned_before) {
	/* The reactions of state E_STOP. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (9))
		{ 
			if (local_ESTOP_CLEARED_raised)
			{ 
				exseq_FSM_Festo2__Ingress_E_STOP();
				enseq_FSM_Festo2__Ingress_Starting_default();
				transitioned_after = 9;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Ingress_Paused_react(const sc::integer transitioned_before) {
	/* The reactions of state Paused. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (9))
		{ 
			if (SYSTEM_OPERATIONAL_IN_raised)
			{ 
				exseq_FSM_Festo2__Ingress_Paused();
				react_FSM_Festo2__Ingress_Ingress_Ingress_History();
				transitioned_after = 9;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo2__Ingress_Paused();
					enseq_FSM_Festo2__Ingress_E_STOP_default();
					transitioned_after = 9;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Ingress_Starting_react(const sc::integer transitioned_before) {
	/* The reactions of state Starting. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (9))
		{ 
			if (SYSTEM_OPERATIONAL_IN_raised)
			{ 
				exseq_FSM_Festo2__Ingress_Starting();
				enseq_FSM_Festo2__Ingress_Ingress_default();
				transitioned_after = 9;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Ingress_ErrorFST2_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorFST2. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (9))
		{ 
			if (local_ESTOP_RECEIVED_raised)
			{ 
				exseq_FSM_Festo2__Ingress_ErrorFST2();
				enseq_FSM_Festo2__Ingress_E_STOP_default();
				transitioned_after = 9;
			}  else
			{
				if (FST_2_ERROR_SYSTEM_RESOLVED_raised)
				{ 
					exseq_FSM_Festo2__Ingress_ErrorFST2();
					react_FSM_Festo2__Ingress_Ingress_Ingress_History();
					transitioned_after = 9;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__HeightMeasurement_HeightMeasurement_react(const sc::integer transitioned_before) {
	/* The reactions of state HeightMeasurement. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (10))
		{ 
			if (local_SYSTEM_OPERATIONAL_OUT_raised)
			{ 
				exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement();
				enseq_FSM_Festo2__HeightMeasurement_Paused_default();
				transitioned_after = 10;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement();
					enseq_FSM_Festo2__HeightMeasurement_E_STOP_default();
					transitioned_after = 10;
				}  else
				{
					if (local_FST_2_ERROR_SYSTEM_raised)
					{ 
						exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement();
						enseq_FSM_Festo2__HeightMeasurement_ErrorFST2_default();
						transitioned_after = 10;
					} 
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle_react(const sc::integer transitioned_before) {
	/* The reactions of state Idle. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (10))
		{ 
			if (local_FST_2_PUK_ENTRY_HeightMeasurement_raised)
			{ 
				exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle();
				enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent_default();
				FSM_Festo2__HeightMeasurement_HeightMeasurement_react(10);
				transitioned_after = 10;
			}  else
			{
				if (HS_2_SAMPLE_raised)
				{ 
					exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle();
					motor2Stop++;
					FST_2_ERROR_SYSTEM_observable.next();
					raiseLocal_FST_2_ERROR_SYSTEM();
					FST_2_ERROR_HM_observable.next();
					raiseLocal_FST_2_ERROR_HM();
					enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error_default();
					FSM_Festo2__HeightMeasurement_HeightMeasurement_react(10);
					transitioned_after = 10;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__HeightMeasurement_HeightMeasurement_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent_react(const sc::integer transitioned_before) {
	/* The reactions of state PukPresent. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (10))
		{ 
			if (FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED_raised)
			{ 
				exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent();
				enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected_default();
				FSM_Festo2__HeightMeasurement_HeightMeasurement_react(10);
				transitioned_after = 10;
			}  else
			{
				if (HS_2_SAMPLE_raised)
				{ 
					exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent();
					motor2Stop++;
					FST_2_ERROR_SYSTEM_observable.next();
					raiseLocal_FST_2_ERROR_SYSTEM();
					FST_2_ERROR_HM_observable.next();
					raiseLocal_FST_2_ERROR_HM();
					enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error_default();
					FSM_Festo2__HeightMeasurement_HeightMeasurement_react(10);
					transitioned_after = 10;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__HeightMeasurement_HeightMeasurement_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected_react(const sc::integer transitioned_before) {
	/* The reactions of state PukExpected. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (10))
		{ 
			if (HS_2_SAMPLE_raised)
			{ 
				exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected();
				motor2Slow++;
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_default();
				FSM_Festo2__HeightMeasurement_HeightMeasurement_react(10);
				transitioned_after = 10;
			}  else
			{
				if (FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED_raised)
				{ 
					exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected();
					motor2Stop++;
					motor2Forward--;
					setFst_2_ready(true);
					FST_2_ERROR_SYSTEM_observable.next();
					raiseLocal_FST_2_ERROR_SYSTEM();
					FST_2_ERROR_HM_observable.next();
					raiseLocal_FST_2_ERROR_HM();
					enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error_default();
					FSM_Festo2__HeightMeasurement_HeightMeasurement_react(10);
					transitioned_after = 10;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__HeightMeasurement_HeightMeasurement_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(const sc::integer transitioned_before) {
	/* The reactions of state Measuring. */
	sc::integer transitioned_after = transitioned_before;
	if ((isStateActive(FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final_)) && (doCompletion))
	{ 
		/* Default exit sequence for state Measuring */
		exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL();
		stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement;
		stateConfVectorPosition = 10;
		/* 'default' enter sequence for state Idle */
		stateConfVector[10] = FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle;
		stateConfVectorPosition = 10;
		historyVector[6] = stateConfVector[10];
		FSM_Festo2__HeightMeasurement_HeightMeasurement_react(10);
	}  else
	{
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__HeightMeasurement_HeightMeasurement_react(transitioned_before);
		} 
	}
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A_react(const sc::integer transitioned_before) {
	/* The reactions of state A. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (10))
		{ 
			if ((((AReferenceMinCount) <= (FST_2_sampleCount)) && (((BReferenceHeight + HeightThreshhold)) > (FST_2_currentValue))) && (((BReferenceHeight - HeightThreshhold)) < (FST_2_currentValue)))
			{ 
				exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A();
				setFST_2_sampleCount(0);
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B_default();
				FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(10);
				transitioned_after = 10;
			}  else
			{
				if ((((AReferenceHeight + HeightThreshhold)) < (FST_2_currentValue)) || ((FST_2_currentValue) < ((AReferenceHeight - HeightThreshhold))))
				{ 
					exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A();
					enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error_default();
					FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(10);
					transitioned_after = 10;
				}  else
				{
					if ((AReferenceMaxCount) < (FST_2_sampleCount))
					{ 
						exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A();
						enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error_default();
						FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(10);
						transitioned_after = 10;
					}  else
					{
						if (HS_2_SAMPLE_raised)
						{ 
							exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A();
							FST_2_sampleCount++;
							FST_2_generalCount++;
							EVALUATE_observable.next();
							raiseLocal_EVALUATE();
							enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A_default();
							FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(10);
							transitioned_after = 10;
						}  else
						{
							if ((FST_2_generalCount) > (MaxSampleCount))
							{ 
								exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A();
								enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error_default();
								FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(10);
								transitioned_after = 10;
							} 
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B_react(const sc::integer transitioned_before) {
	/* The reactions of state B. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (10))
		{ 
			if ((((BReferenceMinCount) <= (FST_2_sampleCount)) && (((CReferenceHeight + HeightThreshhold)) > (FST_2_currentValue))) && (((CReferenceHeight - HeightThreshhold)) < (FST_2_currentValue)))
			{ 
				exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B();
				setFST_2_sampleCount(0);
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C_default();
				FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(10);
				transitioned_after = 10;
			}  else
			{
				if ((((BReferenceHeight + HeightThreshhold)) < (FST_2_currentValue)) || ((FST_2_currentValue) < ((BReferenceHeight - HeightThreshhold))))
				{ 
					exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B();
					enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error_default();
					FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(10);
					transitioned_after = 10;
				}  else
				{
					if (HS_2_SAMPLE_raised)
					{ 
						exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B();
						FST_2_sampleCount++;
						FST_2_generalCount++;
						EVALUATE_observable.next();
						raiseLocal_EVALUATE();
						enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B_default();
						FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(10);
						transitioned_after = 10;
					}  else
					{
						if ((BReferenceMaxCount) < (FST_2_sampleCount))
						{ 
							exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B();
							enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error_default();
							FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(10);
							transitioned_after = 10;
						}  else
						{
							if ((FST_2_generalCount) > (MaxSampleCount))
							{ 
								exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B();
								enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error_default();
								FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(10);
								transitioned_after = 10;
							} 
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C_react(const sc::integer transitioned_before) {
	/* The reactions of state C. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (10))
		{ 
			if (HS_2_SAMPLING_DONE_raised)
			{ 
				exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C();
				FST_2_POSITION_HEIGHTMEASUREMENT_NEW_PUK_observable.next();
				motor2Slow--;
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate_default();
				FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(10);
				transitioned_after = 10;
			}  else
			{
				if ((((CReferenceHeight + HeightThreshhold)) < (FST_2_currentValue)) || ((FST_2_currentValue) < ((CReferenceHeight - HeightThreshhold))))
				{ 
					exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C();
					enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error_default();
					FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(10);
					transitioned_after = 10;
				}  else
				{
					if ((CReferenceMaxCount) < (FST_2_sampleCount))
					{ 
						exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C();
						enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error_default();
						FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(10);
						transitioned_after = 10;
					}  else
					{
						if (HS_2_SAMPLE_raised)
						{ 
							exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C();
							FST_2_sampleCount++;
							FST_2_generalCount++;
							EVALUATE_observable.next();
							raiseLocal_EVALUATE();
							enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C_default();
							FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(10);
							transitioned_after = 10;
						}  else
						{
							if ((FST_2_generalCount) > (MaxSampleCount))
							{ 
								exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C();
								enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error_default();
								FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(10);
								transitioned_after = 10;
							} 
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error_react(const sc::integer transitioned_before) {
	/* The reactions of state Error. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (10))
		{ 
			if (HS_2_SAMPLING_DONE_raised)
			{ 
				exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error();
				setFST_2_generalCount(0);
				setFST_2_sampleCount(0);
				motor2Slow--;
				motor2Forward--;
				FST_2_PUK_HEIGHT_IS_NOT_VALID_observable.next();
				FST_2_PUK_ENTRY_SORTING_observable.next();
				raiseLocal_FST_2_PUK_ENTRY_SORTING();
				FST_2_POSITION_HEIGHTMEASUREMENT_NEW_PUK_observable.next();
				enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final__default();
				transitioned_after = 10;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate_react(const sc::integer transitioned_before) {
	/* The reactions of state Evaluate. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (10))
		{ 
			if ((CReferenceMinCount) <= (FST_2_sampleCount))
			{ 
				exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate();
				setFST_2_generalCount(0);
				setFST_2_sampleCount(0);
				motor2Forward--;
				FST_2_PUK_HEIGHT_IS_VALID_observable.next();
				FST_2_PUK_ENTRY_SORTING_observable.next();
				raiseLocal_FST_2_PUK_ENTRY_SORTING();
				FST_2_POSITION_HEIGHTMEASUREMENT_NEW_PUK_observable.next();
				enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final__default();
				transitioned_after = 10;
			}  else
			{
				if ((CReferenceMinCount) > (FST_2_sampleCount))
				{ 
					exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate();
					setFST_2_generalCount(0);
					setFST_2_sampleCount(0);
					motor2Forward--;
					FST_2_PUK_HEIGHT_IS_NOT_VALID_observable.next();
					FST_2_PUK_ENTRY_SORTING_observable.next();
					raiseLocal_FST_2_PUK_ENTRY_SORTING();
					FST_2_POSITION_HEIGHTMEASUREMENT_NEW_PUK_observable.next();
					enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final__default();
					transitioned_after = 10;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final__react(const sc::integer transitioned_before) {
	/* The reactions of state null. */
	return FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_react(transitioned_before);
}

sc::integer FSM::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error_react(const sc::integer transitioned_before) {
	/* The reactions of state Error. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (10))
		{ 
			if ((FST_2_ERROR_SYSTEM_RESOLVED_raised) && ((fst_2_ready) == (true)))
			{ 
				exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error();
				motor2Stop--;
				motor2Forward--;
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle_default();
				FSM_Festo2__HeightMeasurement_HeightMeasurement_react(10);
				transitioned_after = 10;
			}  else
			{
				if ((fst_2_ready) == (false))
				{ 
					exseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error();
					motor2Stop--;
					EVALUATE_observable.next();
					raiseLocal_EVALUATE();
					enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent_default();
					FSM_Festo2__HeightMeasurement_HeightMeasurement_react(10);
					transitioned_after = 10;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__HeightMeasurement_HeightMeasurement_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__HeightMeasurement_Paused_react(const sc::integer transitioned_before) {
	/* The reactions of state Paused. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (10))
		{ 
			if (SYSTEM_OPERATIONAL_IN_raised)
			{ 
				exseq_FSM_Festo2__HeightMeasurement_Paused();
				react_FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_History();
				transitioned_after = 10;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo2__HeightMeasurement_Paused();
					enseq_FSM_Festo2__HeightMeasurement_E_STOP_default();
					transitioned_after = 10;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__HeightMeasurement_E_STOP_react(const sc::integer transitioned_before) {
	/* The reactions of state E_STOP. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (10))
		{ 
			if (local_ESTOP_CLEARED_raised)
			{ 
				exseq_FSM_Festo2__HeightMeasurement_E_STOP();
				enseq_FSM_Festo2__HeightMeasurement_Start_default();
				transitioned_after = 10;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__HeightMeasurement_Start_react(const sc::integer transitioned_before) {
	/* The reactions of state Start. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (10))
		{ 
			if (SYSTEM_OPERATIONAL_IN_raised)
			{ 
				exseq_FSM_Festo2__HeightMeasurement_Start();
				enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_default();
				transitioned_after = 10;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__HeightMeasurement_ErrorFST2_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorFST2. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (10))
		{ 
			if (local_ESTOP_RECEIVED_raised)
			{ 
				exseq_FSM_Festo2__HeightMeasurement_ErrorFST2();
				enseq_FSM_Festo2__HeightMeasurement_E_STOP_default();
				transitioned_after = 10;
			}  else
			{
				if (FST_2_ERROR_SYSTEM_RESOLVED_raised)
				{ 
					exseq_FSM_Festo2__HeightMeasurement_ErrorFST2();
					enseq_FSM_Festo2__HeightMeasurement_HeightMeasurement_default();
					transitioned_after = 10;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Egress_Egress_react(const sc::integer transitioned_before) {
	/* The reactions of state Egress. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (11))
		{ 
			if (local_SYSTEM_OPERATIONAL_OUT_raised)
			{ 
				exseq_FSM_Festo2__Egress_Egress();
				enseq_FSM_Festo2__Egress_Paused_default();
				transitioned_after = 11;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo2__Egress_Egress();
					enseq_FSM_Festo2__Egress_E_STOP_default();
					transitioned_after = 11;
				}  else
				{
					if (local_FST_2_ERROR_SYSTEM_raised)
					{ 
						exseq_FSM_Festo2__Egress_Egress();
						enseq_FSM_Festo2__Egress_ErrorFST2_default();
						transitioned_after = 11;
					} 
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Egress_Egress_Egress_IDLE_react(const sc::integer transitioned_before) {
	/* The reactions of state IDLE. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (11))
		{ 
			if (FST_2_PUK_ENTRY_EGRESS_raised)
			{ 
				exseq_FSM_Festo2__Egress_Egress_Egress_IDLE();
				FST_2_POSITION_EGRESS_NEW_PUK_observable.next();
				enseq_FSM_Festo2__Egress_Egress_Egress_PukPresent_default();
				FSM_Festo2__Egress_Egress_react(11);
				transitioned_after = 11;
			}  else
			{
				if (LBE_2_INTERRUPTED_raised)
				{ 
					exseq_FSM_Festo2__Egress_Egress_Egress_IDLE();
					motor2Stop++;
					FST_2_ERROR_SYSTEM_observable.next();
					raiseLocal_FST_2_ERROR_SYSTEM();
					FST_2_ERROR_EGRESS_observable.next();
					raiseLocal_FST_2_ERROR_EGRESS();
					enseq_FSM_Festo2__Egress_Egress_Egress_Error_default();
					FSM_Festo2__Egress_Egress_react(11);
					transitioned_after = 11;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Egress_Egress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Egress_Egress_Egress_PukPresent_react(const sc::integer transitioned_before) {
	/* The reactions of state PukPresent. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (11))
		{ 
			if (FST_2_POSITION_EGRESS_PUK_EXPECTED_raised)
			{ 
				exseq_FSM_Festo2__Egress_Egress_Egress_PukPresent();
				enseq_FSM_Festo2__Egress_Egress_Egress_PukExpected_default();
				FSM_Festo2__Egress_Egress_react(11);
				transitioned_after = 11;
			}  else
			{
				if (LBE_2_INTERRUPTED_raised)
				{ 
					exseq_FSM_Festo2__Egress_Egress_Egress_PukPresent();
					motor2Stop++;
					FST_2_ERROR_SYSTEM_observable.next();
					raiseLocal_FST_2_ERROR_SYSTEM();
					FST_2_ERROR_EGRESS_observable.next();
					raiseLocal_FST_2_ERROR_EGRESS();
					enseq_FSM_Festo2__Egress_Egress_Egress_Error_default();
					FSM_Festo2__Egress_Egress_react(11);
					transitioned_after = 11;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Egress_Egress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Egress_Egress_Egress_Transfer_react(const sc::integer transitioned_before) {
	/* The reactions of state Transfer. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (11))
		{ 
			if (LBE_2_OPEN_raised)
			{ 
				exseq_FSM_Festo2__Egress_Egress_Egress_Transfer();
				setFst_2_ready(true);
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_FSM_Festo2__Egress_Egress_Egress_IDLE_default();
				FSM_Festo2__Egress_Egress_react(11);
				transitioned_after = 11;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Egress_Egress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Egress_Egress_Egress_PukExpected_react(const sc::integer transitioned_before) {
	/* The reactions of state PukExpected. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (11))
		{ 
			if (LBF_2_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo2__Egress_Egress_Egress_PukExpected();
				motor2Forward--;
				enseq_FSM_Festo2__Egress_Egress_Egress_Transfer_default();
				FSM_Festo2__Egress_Egress_react(11);
				transitioned_after = 11;
			}  else
			{
				if (FST_2_POSITION_EGRESS_PUK_EXPIRED_raised)
				{ 
					exseq_FSM_Festo2__Egress_Egress_Egress_PukExpected();
					setFst_2_ready(true);
					motor2Forward--;
					motor2Stop++;
					FST_2_ERROR_SYSTEM_observable.next();
					raiseLocal_FST_2_ERROR_SYSTEM();
					FST_2_ERROR_EGRESS_observable.next();
					raiseLocal_FST_2_ERROR_EGRESS();
					enseq_FSM_Festo2__Egress_Egress_Egress_Error_default();
					FSM_Festo2__Egress_Egress_react(11);
					transitioned_after = 11;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Egress_Egress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Egress_Egress_Egress_Error_react(const sc::integer transitioned_before) {
	/* The reactions of state Error. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (11))
		{ 
			if ((FST_2_ERROR_SYSTEM_RESOLVED_raised) && ((fst_2_ready) == (false)))
			{ 
				exseq_FSM_Festo2__Egress_Egress_Egress_Error();
				motor2Stop--;
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_FSM_Festo2__Egress_Egress_Egress_PukPresent_default();
				FSM_Festo2__Egress_Egress_react(11);
				transitioned_after = 11;
			}  else
			{
				if ((FST_2_ERROR_SYSTEM_RESOLVED_raised) && ((fst_2_ready) == (true)))
				{ 
					exseq_FSM_Festo2__Egress_Egress_Egress_Error();
					motor2Stop--;
					EVALUATE_observable.next();
					raiseLocal_EVALUATE();
					enseq_FSM_Festo2__Egress_Egress_Egress_IDLE_default();
					FSM_Festo2__Egress_Egress_react(11);
					transitioned_after = 11;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Egress_Egress_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Egress_Paused_react(const sc::integer transitioned_before) {
	/* The reactions of state Paused. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (11))
		{ 
			if (SYSTEM_OPERATIONAL_IN_raised)
			{ 
				exseq_FSM_Festo2__Egress_Paused();
				react_FSM_Festo2__Egress_Egress_Egress_History();
				transitioned_after = 11;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo2__Egress_Paused();
					enseq_FSM_Festo2__Egress_E_STOP_default();
					transitioned_after = 11;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Egress_E_STOP_react(const sc::integer transitioned_before) {
	/* The reactions of state E_STOP. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (11))
		{ 
			if (local_ESTOP_CLEARED_raised)
			{ 
				exseq_FSM_Festo2__Egress_E_STOP();
				enseq_FSM_Festo2__Egress_Start_default();
				transitioned_after = 11;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Egress_Start_react(const sc::integer transitioned_before) {
	/* The reactions of state Start. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (11))
		{ 
			if (SYSTEM_OPERATIONAL_IN_raised)
			{ 
				exseq_FSM_Festo2__Egress_Start();
				enseq_FSM_Festo2__Egress_Egress_default();
				transitioned_after = 11;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Egress_ErrorFST2_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorFST2. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (11))
		{ 
			if (FST_2_ERROR_SYSTEM_RESOLVED_raised)
			{ 
				exseq_FSM_Festo2__Egress_ErrorFST2();
				react_FSM_Festo2__Egress_Egress_Egress_History();
				transitioned_after = 11;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Motor_SystemMotor_react(const sc::integer transitioned_before) {
	/* The reactions of state SystemMotor. */
	return transitioned_before;
}

sc::integer FSM::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward_react(const sc::integer transitioned_before) {
	/* The reactions of state Forward. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (12))
		{ 
			if (((motor2Stop) > (0)) || ((((motor2Forward) == (0)) && ((motor2Slow) == (0)))))
			{ 
				exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward();
				enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop_default();
				FSM_Festo2__Motor_SystemMotor_react(12);
				transitioned_after = 12;
			}  else
			{
				if (((motor2Stop) == (0)) && ((motor2Slow) > (0)))
				{ 
					exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward();
					enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow_default();
					FSM_Festo2__Motor_SystemMotor_react(12);
					transitioned_after = 12;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Motor_SystemMotor_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow_react(const sc::integer transitioned_before) {
	/* The reactions of state Slow. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (12))
		{ 
			if (((motor2Stop) > (0)) || ((((motor2Slow) == (0)) && ((motor2Forward) == (0)))))
			{ 
				exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow();
				enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop_default();
				FSM_Festo2__Motor_SystemMotor_react(12);
				transitioned_after = 12;
			}  else
			{
				if ((((motor2Stop) == (0)) && ((motor2Slow) == (0))) && ((motor2Forward) > (0)))
				{ 
					exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow();
					enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward_default();
					FSM_Festo2__Motor_SystemMotor_react(12);
					transitioned_after = 12;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Motor_SystemMotor_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop_react(const sc::integer transitioned_before) {
	/* The reactions of state Stop. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (12))
		{ 
			if (((motor2Stop) == (0)) && ((motor2Slow) > (0)))
			{ 
				exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop();
				enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow_default();
				FSM_Festo2__Motor_SystemMotor_react(12);
				transitioned_after = 12;
			}  else
			{
				if ((((motor2Stop) == (0)) && ((motor2Slow) == (0))) && ((motor2Forward) > (0)))
				{ 
					exseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop();
					enseq_FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward_default();
					FSM_Festo2__Motor_SystemMotor_react(12);
					transitioned_after = 12;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Motor_SystemMotor_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Signaling_FSM_LAMP_react(const sc::integer transitioned_before) {
	/* The reactions of state FSM_LAMP. */
	return transitioned_before;
}

sc::integer FSM::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(const sc::integer transitioned_before) {
	/* The reactions of state FSM_Lamp. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		/* Always execute local reactions. */
		transitioned_after = FSM_Festo2__Signaling_FSM_LAMP_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_react(const sc::integer transitioned_before) {
	/* The reactions of state Off. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (13))
		{ 
			if (SYSTEM_OPERATIONAL_IN_raised)
			{ 
				exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
				enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_default();
				transitioned_after = 13;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
					enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_default();
					transitioned_after = 13;
				}  else
				{
					if (local_SYSTEM_SERVICE_IN_raised)
					{ 
						exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
						enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz_default();
						transitioned_after = 13;
					} 
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_react(const sc::integer transitioned_before) {
	/* The reactions of state Constant. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (13))
		{ 
			if (local_SYSTEM_OPERATIONAL_OUT_raised)
			{ 
				exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant();
				enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_default();
				transitioned_after = 13;
			}  else
			{
				if (local_ESTOP_CLEARED_raised)
				{ 
					exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant();
					enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_default();
					transitioned_after = 13;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz_react(const sc::integer transitioned_before) {
	/* The reactions of state Blinking 1Hz. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (13))
		{ 
			if (local_SYSTEM_SERVICE_OUT_raised)
			{ 
				exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz();
				enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_default();
				transitioned_after = 13;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz();
					enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_default();
					transitioned_after = 13;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_react(const sc::integer transitioned_before) {
	/* The reactions of state Off. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (14))
		{ 
			if (local_ESTOP_RECEIVED_raised)
			{ 
				exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off();
				enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_default();
				transitioned_after = 14;
			}  else
			{
				if (local_FST_2_YELLOW_LAMP_ON_raised)
				{ 
					exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off();
					enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz_default();
					transitioned_after = 14;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_react(const sc::integer transitioned_before) {
	/* The reactions of state Constant. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (14))
		{ 
			if (local_ESTOP_CLEARED_raised)
			{ 
				exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant();
				enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_default();
				transitioned_after = 14;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz_react(const sc::integer transitioned_before) {
	/* The reactions of state Blinking 1Hz. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (14))
		{ 
			if (local_FST_2_YELLOW_LAMP_OFF_raised)
			{ 
				exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz();
				enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_default();
				transitioned_after = 14;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz();
					enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_default();
					transitioned_after = 14;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_react(const sc::integer transitioned_before) {
	/* The reactions of state Off. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (15))
		{ 
			if (local_ESTOP_RECEIVED_raised)
			{ 
				exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off();
				enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_default();
				FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(13);
				transitioned_after = 15;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_react(const sc::integer transitioned_before) {
	/* The reactions of state Constant. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (15))
		{ 
			if (local_ESTOP_CLEARED_raised)
			{ 
				exseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant();
				enseq_FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_default();
				FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(13);
				transitioned_after = 15;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::TEST_EvaluateTester_react(const sc::integer transitioned_before) {
	/* The reactions of state EvaluateTester. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (16))
		{ 
			if (local_EVALUATE_raised)
			{ 
				exseq_TEST_EvaluateTester();
				enseq_TEST_EvaluateTester_default();
				transitioned_after = 16;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Errors_FSM_Errors_react(const sc::integer transitioned_before) {
	/* The reactions of state FSM_Errors. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (17))
		{ 
			if (local_ESTOP_RECEIVED_raised)
			{ 
				exseq_FSM_Festo1__Errors_FSM_Errors();
				enseq_FSM_Festo1__Errors_EStop_default();
				transitioned_after = 17;
			}  else
			{
				if (LBF_1_INTERRUPTED_raised)
				{ 
					exseq_FSM_Festo1__Errors_FSM_Errors();
					setLbf_1_isOpen(false);
					EVALUATE_observable.next();
					raiseLocal_EVALUATE();
					react_FSM_Festo1__Errors_FSM_Errors___History();
					transitioned_after = 17;
				}  else
				{
					if (LBF_1_OPEN_raised)
					{ 
						exseq_FSM_Festo1__Errors_FSM_Errors();
						setLbf_1_isOpen(true);
						EVALUATE_observable.next();
						raiseLocal_EVALUATE();
						react_FSM_Festo1__Errors_FSM_Errors___History();
						transitioned_after = 17;
					}  else
					{
						if (HS_1_SAMPLE_raised)
						{ 
							exseq_FSM_Festo1__Errors_FSM_Errors();
							setHs_1_isOpen(false);
							EVALUATE_observable.next();
							raiseLocal_EVALUATE();
							react_FSM_Festo1__Errors_FSM_Errors___History();
							transitioned_after = 17;
						}  else
						{
							if (LBE_1_OPEN_raised)
							{ 
								exseq_FSM_Festo1__Errors_FSM_Errors();
								setLbe_1_isOpen(true);
								react_FSM_Festo1__Errors_FSM_Errors___History();
								transitioned_after = 17;
							}  else
							{
								if (LBE_1_INTERRUPTED_raised)
								{ 
									exseq_FSM_Festo1__Errors_FSM_Errors();
									setLbe_1_isOpen(false);
									EVALUATE_observable.next();
									raiseLocal_EVALUATE();
									react_FSM_Festo1__Errors_FSM_Errors___History();
									transitioned_after = 17;
								}  else
								{
									if (LBM_1_OPEN_raised)
									{ 
										exseq_FSM_Festo1__Errors_FSM_Errors();
										setLbm_1_isOpen(true);
										EVALUATE_observable.next();
										raiseLocal_EVALUATE();
										react_FSM_Festo1__Errors_FSM_Errors___History();
										transitioned_after = 17;
									}  else
									{
										if (LBM_1_INTERRUPTED_raised)
										{ 
											exseq_FSM_Festo1__Errors_FSM_Errors();
											setLbm_1_isOpen(false);
											EVALUATE_observable.next();
											raiseLocal_EVALUATE();
											react_FSM_Festo1__Errors_FSM_Errors___History();
											transitioned_after = 17;
										}  else
										{
											if (HS_1_SAMPLING_DONE_raised)
											{ 
												exseq_FSM_Festo1__Errors_FSM_Errors();
												setHs_1_isOpen(true);
												EVALUATE_observable.next();
												raiseLocal_EVALUATE();
												react_FSM_Festo1__Errors_FSM_Errors___History();
												transitioned_after = 17;
											}  else
											{
												if (LBR_1_OPEN_raised)
												{ 
													exseq_FSM_Festo1__Errors_FSM_Errors();
													setLbr_1_isOpen(true);
													EVALUATE_observable.next();
													raiseLocal_EVALUATE();
													react_FSM_Festo1__Errors_FSM_Errors___History();
													transitioned_after = 17;
												}  else
												{
													if (LBR_1_INTERRUPTED_raised)
													{ 
														exseq_FSM_Festo1__Errors_FSM_Errors();
														setLbr_1_isOpen(false);
														EVALUATE_observable.next();
														raiseLocal_EVALUATE();
														react_FSM_Festo1__Errors_FSM_Errors___History();
														transitioned_after = 17;
													}  else
													{
														if (FST_1_ERROR_SYSTEM_RESOLVED_raised)
														{ 
															exseq_FSM_Festo1__Errors_FSM_Errors();
															motor1Stop--;
															EVALUATE_observable.next();
															raiseLocal_EVALUATE();
															enseq_FSM_Festo1__Errors_Start_default();
															transitioned_after = 17;
														} 
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinHMRestart. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (17))
		{ 
			if (BGS_1_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart();
				incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_1_ERROR_SYSTEM_RESOLVED))
				;
				enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
				FSM_Festo1__Errors_FSM_Errors_react(17);
				transitioned_after = 17;
			}  else
			{
				if ((lbe_1_isOpenCopy) != (lbe_1_isOpen))
				{ 
					exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart();
					setHs_1_isOpenCopy(hs_1_isOpen);
					FST_1_ERROR_INGRESS_observable.next();
					raiseLocal_FST_1_ERROR_INGRESS();
					enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
					FSM_Festo1__Errors_FSM_Errors_react(17);
					transitioned_after = 17;
				}  else
				{
					if ((lbm_1_isOpenCopy) != (lbm_1_isOpen))
					{ 
						exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart();
						setHs_1_isOpenCopy(hs_1_isOpen);
						FST_1_ERROR_SORTING_observable.next();
						raiseLocal_FST_1_ERROR_SORTING();
						enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
						FSM_Festo1__Errors_FSM_Errors_react(17);
						transitioned_after = 17;
					}  else
					{
						if ((lbr_1_isOpenCopy) != (lbr_1_isOpen))
						{ 
							exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart();
							setHs_1_isOpenCopy(hs_1_isOpen);
							FST_1_ERROR_RAMPFULL_observable.next();
							enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
							FSM_Festo1__Errors_FSM_Errors_react(17);
							transitioned_after = 17;
						}  else
						{
							if ((lbe_1_isOpenCopy) != (lbe_1_isOpen))
							{ 
								exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart();
								setHs_1_isOpenCopy(hs_1_isOpen);
								FST_1_ERROR_EGRESS_observable.next();
								enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
								FSM_Festo1__Errors_FSM_Errors_react(17);
								transitioned_after = 17;
							} 
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukUnacknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinSortingPukUnacknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (17))
		{ 
			if (BGR_1_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukUnacknowledged();
				FST_1_ERROR_ACKNOWLEDGED_observable.next();
				raiseLocal_FST_1_ERROR_ACKNOWLEDGED();
				enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukAcknowledged_default();
				FSM_Festo1__Errors_FSM_Errors_react(17);
				transitioned_after = 17;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinIngressRestart. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (17))
		{ 
			if (BGS_1_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart();
				incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_1_ERROR_SYSTEM_RESOLVED))
				;
				enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
				FSM_Festo1__Errors_FSM_Errors_react(17);
				transitioned_after = 17;
			}  else
			{
				if ((hs_1_isOpenCopy) != (hs_1_isOpen))
				{ 
					exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart();
					setLbf_1_isOpenCopy(lbf_1_isOpen);
					FST_1_ERROR_HM_observable.next();
					raiseLocal_FST_1_ERROR_HM();
					enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
					FSM_Festo1__Errors_FSM_Errors_react(17);
					transitioned_after = 17;
				}  else
				{
					if ((lbm_1_isOpenCopy) != (lbm_1_isOpen))
					{ 
						exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart();
						setLbf_1_isOpenCopy(lbf_1_isOpen);
						FST_1_ERROR_SORTING_observable.next();
						raiseLocal_FST_1_ERROR_SORTING();
						enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
						FSM_Festo1__Errors_FSM_Errors_react(17);
						transitioned_after = 17;
					}  else
					{
						if ((lbr_1_isOpenCopy) != (lbr_1_isOpen))
						{ 
							exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart();
							setLbf_1_isOpenCopy(lbf_1_isOpen);
							FST_1_ERROR_RAMPFULL_observable.next();
							enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
							FSM_Festo1__Errors_FSM_Errors_react(17);
							transitioned_after = 17;
						}  else
						{
							if ((lbe_1_isOpenCopy) != (lbe_1_isOpen))
							{ 
								exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart();
								setLbf_1_isOpenCopy(lbf_1_isOpen);
								FST_1_ERROR_EGRESS_observable.next();
								enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
								FSM_Festo1__Errors_FSM_Errors_react(17);
								transitioned_after = 17;
							} 
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukAcknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinSortingPukAcknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (17))
		{ 
			if (lbm_1_isOpen)
			{ 
				exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukAcknowledged();
				FST_1_ERROR_LAMP_RESOLVED_observable.next();
				Q12_OFF_observable.next();
				enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart_default();
				FSM_Festo1__Errors_FSM_Errors_react(17);
				transitioned_after = 17;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Errors_FSM_Errors___Idle_react(const sc::integer transitioned_before) {
	/* The reactions of state Idle. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (17))
		{ 
			if (local_FST_1_ERROR_INGRESS_raised)
			{ 
				exseq_FSM_Festo1__Errors_FSM_Errors___Idle();
				FST_1_ERROR_LAMP_UNACKNOWLEDGED_observable.next();
				enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressUnacknowledged_default();
				FSM_Festo1__Errors_FSM_Errors_react(17);
				transitioned_after = 17;
			}  else
			{
				if (local_FST_1_ERROR_HM_raised)
				{ 
					exseq_FSM_Festo1__Errors_FSM_Errors___Idle();
					FST_1_ERROR_LAMP_UNACKNOWLEDGED_observable.next();
					Q11_ON_observable.next();
					enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMUnacknowledged_default();
					FSM_Festo1__Errors_FSM_Errors_react(17);
					transitioned_after = 17;
				}  else
				{
					if (local_FST_1_ERROR_SORTING_raised)
					{ 
						exseq_FSM_Festo1__Errors_FSM_Errors___Idle();
						FST_1_ERROR_LAMP_UNACKNOWLEDGED_observable.next();
						Q12_ON_observable.next();
						enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukUnacknowledged_default();
						FSM_Festo1__Errors_FSM_Errors_react(17);
						transitioned_after = 17;
					}  else
					{
						if (local_FST_1_ERROR_EGRESS_MISSING_PUK_raised)
						{ 
							exseq_FSM_Festo1__Errors_FSM_Errors___Idle();
							FST_1_ERROR_SYSTEM_observable.next();
							raiseLocal_FST_1_ERROR_SYSTEM();
							Q11_ON_observable.next();
							Q12_ON_observable.next();
							enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressPukUnacknowledged_default();
							FSM_Festo1__Errors_FSM_Errors_react(17);
							transitioned_after = 17;
						} 
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinSortingRestart. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (17))
		{ 
			if (BGS_1_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart();
				incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_1_ERROR_SYSTEM_RESOLVED))
				;
				enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
				FSM_Festo1__Errors_FSM_Errors_react(17);
				transitioned_after = 17;
			}  else
			{
				if ((lbe_1_isOpenCopy) != (lbe_1_isOpen))
				{ 
					exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart();
					setLbm_1_isOpenCopy(lbm_1_isOpen);
					FST_1_ERROR_INGRESS_observable.next();
					raiseLocal_FST_1_ERROR_INGRESS();
					enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
					FSM_Festo1__Errors_FSM_Errors_react(17);
					transitioned_after = 17;
				}  else
				{
					if ((hs_1_isOpenCopy) != (hs_1_isOpen))
					{ 
						exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart();
						setLbm_1_isOpenCopy(lbm_1_isOpen);
						FST_1_ERROR_HM_observable.next();
						raiseLocal_FST_1_ERROR_HM();
						enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
						FSM_Festo1__Errors_FSM_Errors_react(17);
						transitioned_after = 17;
					}  else
					{
						if ((lbr_1_isOpenCopy) != (lbr_1_isOpen))
						{ 
							exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart();
							setLbm_1_isOpenCopy(lbm_1_isOpen);
							FST_1_ERROR_RAMPFULL_observable.next();
							enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
							FSM_Festo1__Errors_FSM_Errors_react(17);
							transitioned_after = 17;
						}  else
						{
							if ((lbe_1_isOpenCopy) != (lbe_1_isOpen))
							{ 
								exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart();
								setLbm_1_isOpenCopy(lbm_1_isOpen);
								FST_1_ERROR_EGRESS_observable.next();
								enseq_FSM_Festo1__Errors_FSM_Errors___Idle_default();
								FSM_Festo1__Errors_FSM_Errors_react(17);
								transitioned_after = 17;
							} 
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressMissingPukAcknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinEgressMissingPukAcknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (17))
		{ 
			if (BGS_1_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressMissingPukAcknowledged();
				FST_1_ERROR_EGRESS_RESOLVED_observable.next();
				incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_1_ERROR_SYSTEM_RESOLVED))
				;
				Q11_OFF_observable.next();
				Q12_OFF_observable.next();
				enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart_default();
				FSM_Festo1__Errors_FSM_Errors_react(17);
				transitioned_after = 17;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressPukUnacknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinEgressPukUnacknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (17))
		{ 
			if (BGR_1_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressPukUnacknowledged();
				FST_1_ERROR_ACKNOWLEDGED_observable.next();
				raiseLocal_FST_1_ERROR_ACKNOWLEDGED();
				enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinEgressMissingPukAcknowledged_default();
				FSM_Festo1__Errors_FSM_Errors_react(17);
				transitioned_after = 17;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Errors_FSM_Errors___ErrorinHMPukAcknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinHMPukAcknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (17))
		{ 
			if (hs_1_isOpen)
			{ 
				exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMPukAcknowledged();
				FST_1_ERROR_LAMP_RESOLVED_observable.next();
				Q12_OFF_observable.next();
				enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart_default();
				FSM_Festo1__Errors_FSM_Errors_react(17);
				transitioned_after = 17;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Errors_FSM_Errors___ErrorinHMUnacknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinHMUnacknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (17))
		{ 
			if (BGR_1_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMUnacknowledged();
				FST_1_ERROR_ACKNOWLEDGED_observable.next();
				raiseLocal_FST_1_ERROR_ACKNOWLEDGED();
				enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinHMPukAcknowledged_default();
				FSM_Festo1__Errors_FSM_Errors_react(17);
				transitioned_after = 17;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinIngressAcknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (17))
		{ 
			if (lbf_1_isOpen)
			{ 
				exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged();
				FST_1_ERROR_LAMP_RESOLVED_observable.next();
				enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart_default();
				FSM_Festo1__Errors_FSM_Errors_react(17);
				transitioned_after = 17;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressUnacknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinIngressUnacknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (17))
		{ 
			if (BGR_1_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressUnacknowledged();
				FST_1_ERROR_ACKNOWLEDGED_observable.next();
				raiseLocal_FST_1_ERROR_ACKNOWLEDGED();
				enseq_FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged_default();
				FSM_Festo1__Errors_FSM_Errors_react(17);
				transitioned_after = 17;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinEgressRestart. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state ErrorinEgressRestart */
		stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors;
		stateConfVectorPosition = 17;
		/* 'default' enter sequence for state Idle */
		stateConfVector[17] = FSM::State::FSM_Festo1__Errors_FSM_Errors___Idle;
		stateConfVectorPosition = 17;
		historyVector[8] = stateConfVector[17];
		FSM_Festo1__Errors_FSM_Errors_react(17);
	}  else
	{
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo1__Errors_FSM_Errors_react(transitioned_before);
		} 
	}
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Errors_EStop_react(const sc::integer transitioned_before) {
	/* The reactions of state EStop. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (17))
		{ 
			if (local_ESTOP_CLEARED_raised)
			{ 
				exseq_FSM_Festo1__Errors_EStop();
				enseq_FSM_Festo1__Errors_Start_default();
				transitioned_after = 17;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo1__Errors_Start_react(const sc::integer transitioned_before) {
	/* The reactions of state Start. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (17))
		{ 
			if (local_FST_1_ERROR_SYSTEM_raised)
			{ 
				exseq_FSM_Festo1__Errors_Start();
				motor1Stop++;
				setLbf_1_isOpenCopy(lbf_1_isOpen);
				setHs_1_isOpenCopy(hs_1_isOpen);
				setLbm_1_isOpenCopy(lbm_1_isOpen);
				setLbe_1_isOpenCopy(lbe_1_isOpen);
				setLbr_1_isOpenCopy(lbr_1_isOpen);
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_FSM_Festo1__Errors_FSM_Errors_default();
				transitioned_after = 17;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::Copy_1_FSM_Festo1__Sorting_Sorting_react(const sc::integer transitioned_before) {
	/* The reactions of state Sorting. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (18))
		{ 
			if (local_SYSTEM_OPERATIONAL_OUT_raised)
			{ 
				exseq_Copy_1_FSM_Festo1__Sorting_Sorting();
				enseq_Copy_1_FSM_Festo1__Sorting_Paused_default();
				transitioned_after = 18;
			}  else
			{
				if (LBR_2_INTERRUPTED_raised)
				{ 
					exseq_Copy_1_FSM_Festo1__Sorting_Sorting();
					setFST2RampFull(true);
					EVALUATE_observable.next();
					raiseLocal_EVALUATE();
					react_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_History();
					transitioned_after = 18;
				}  else
				{
					if (LBR_2_OPEN_raised)
					{ 
						exseq_Copy_1_FSM_Festo1__Sorting_Sorting();
						setFST2RampFull(false);
						EVALUATE_observable.next();
						raiseLocal_EVALUATE();
						react_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_History();
						transitioned_after = 18;
					}  else
					{
						if (local_ESTOP_RECEIVED_raised)
						{ 
							exseq_Copy_1_FSM_Festo1__Sorting_Sorting();
							enseq_Copy_1_FSM_Festo1__Sorting_E_STOP_default();
							transitioned_after = 18;
						}  else
						{
							if (MS_2_HIGH_raised)
							{ 
								exseq_Copy_1_FSM_Festo1__Sorting_Sorting();
								setFST2isMetal(true);
								EVALUATE_observable.next();
								raiseLocal_EVALUATE();
								react_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_History();
								transitioned_after = 18;
							}  else
							{
								if (MS_2_LOW_raised)
								{ 
									exseq_Copy_1_FSM_Festo1__Sorting_Sorting();
									setFST1isMetal(false);
									EVALUATE_observable.next();
									raiseLocal_EVALUATE();
									react_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_History();
									transitioned_after = 18;
								}  else
								{
									if (local_FST_2_ERROR_SYSTEM_raised)
									{ 
										exseq_Copy_1_FSM_Festo1__Sorting_Sorting();
										enseq_Copy_1_FSM_Festo1__Sorting_ErrorFST1_default();
										transitioned_after = 18;
									}  else
									{
										if ((FST_2_POSITION_DIVIDER_DISTANCE_VALID_raised) && (!(FST_2_isEjector)))
										{ 
											exseq_Copy_1_FSM_Festo1__Sorting_Sorting();
											FST_2_SORTING_MODULE_RESTING_observable.next();
											react_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_History();
											transitioned_after = 18;
										} 
									}
								}
							}
						}
					}
				}
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle_react(const sc::integer transitioned_before) {
	/* The reactions of state Idle. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (18))
		{ 
			if (local_FST_2_PUK_ENTRY_SORTING_raised)
			{ 
				exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle();
				enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent_default();
				Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
				transitioned_after = 18;
			}  else
			{
				if (LBM_2_INTERRUPTED_raised)
				{ 
					exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle();
					FST_2_ERROR_SORTING_observable.next();
					raiseLocal_FST_2_ERROR_SORTING();
					enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error_default();
					Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
					transitioned_after = 18;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Copy_1_FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent_react(const sc::integer transitioned_before) {
	/* The reactions of state PukPresent. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (18))
		{ 
			if (FST_2_POSITION_SORTING_PUK_EXPECTED_raised)
			{ 
				exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent();
				enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected_default();
				Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
				transitioned_after = 18;
			}  else
			{
				if (LBM_2_INTERRUPTED_raised)
				{ 
					exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent();
					motor2Stop++;
					FST_2_ERROR_SYSTEM_observable.next();
					raiseLocal_FST_2_ERROR_SYSTEM();
					FST_2_ERROR_SORTING_observable.next();
					raiseLocal_FST_2_ERROR_SORTING();
					enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error_default();
					Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
					transitioned_after = 18;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Copy_1_FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected_react(const sc::integer transitioned_before) {
	/* The reactions of state PukExpected. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (18))
		{ 
			if ((LBM_2_INTERRUPTED_raised) && ((FST2isMetal) == (true)))
			{ 
				exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected();
				FST_2_PUK_IS_METAL_observable.next();
				enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate_default();
				Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
				transitioned_after = 18;
			}  else
			{
				if ((LBM_2_INTERRUPTED_raised) && ((FST2isMetal) == (false)))
				{ 
					exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected();
					FST_2_PUK_IS_NOT_METAL_observable.next();
					enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate_default();
					Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
					transitioned_after = 18;
				}  else
				{
					if (FST_2_POSITION_SORTING_PUK_EXPIRED_raised)
					{ 
						exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected();
						setFst_2_ready(true);
						motor2Forward--;
						FST_2_ERROR_SYSTEM_observable.next();
						raiseLocal_FST_2_ERROR_SYSTEM();
						FST_2_ERROR_SORTING_MISSING_PUK_observable.next();
						enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error_default();
						Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
						transitioned_after = 18;
					} 
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Copy_1_FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate_react(const sc::integer transitioned_before) {
	/* The reactions of state Evaluate. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (18))
		{ 
			if ((local_FST_2_PUK_SORTING_PASSTHROUGH_raised) && (FST_2_isEjector))
			{ 
				exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector_default();
				Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
				transitioned_after = 18;
			}  else
			{
				if ((local_FST_2_PUK_SORTING_PASSTHROUGH_raised) && (!(FST_2_isEjector)))
				{ 
					exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
					FST_2_SORTING_MODULE_ACTIVE_observable.next();
					enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider_default();
					Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
					transitioned_after = 18;
				}  else
				{
					if (((FST_1_PUK_SORTING_EJECT_raised) && (!(FST_1_isEjector))) && (!(FST1RampFull)))
					{ 
						exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
						FST1_Sorting_Counter--;
						EVALUATE_observable.next();
						raiseLocal_EVALUATE();
						enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider_default();
						Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
						transitioned_after = 18;
					}  else
					{
						if (((FST_1_PUK_SORTING_EJECT_raised) && (FST_1_isEjector)) && (!(FST1RampFull)))
						{ 
							exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
							FST1_Sorting_Counter--;
							FST_1_SORTING_MODULE_ACTIVE_observable.next();
							FST_1_SORTING_MODULE_RESTING_observable.next();
							enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector_default();
							Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
							transitioned_after = 18;
						}  else
						{
							if (((local_FST_2_PUK_SORTING_EJECT_raised) && (!(FST_2_isEjector))) && (FST2RampFull))
							{ 
								exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
								setFst_2_ready(true);
								FST_1_PUK_ENTRY_EGRESS_observable.next();
								raiseLocal_FST_1_PUK_ENTRY_EGRESS();
								enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider_default();
								Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
								transitioned_after = 18;
							}  else
							{
								if (((local_FST_2_PUK_SORTING_EJECT_raised) && (!(FST_2_isEjector))) && (FST2RampFull))
								{ 
									exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
									enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector_default();
									Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
									transitioned_after = 18;
								}  else
								{
									if (((FST_1_PUK_SORTING_EJECT_raised) && (!(FST_1_isEjector))) && (FST1RampFull))
									{ 
										exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
										FST_1_ERROR_SYSTEM_observable.next();
										raiseLocal_FST_1_ERROR_SYSTEM();
										FST_2_ERROR_SYSTEM_observable.next();
										raiseLocal_FST_2_ERROR_SYSTEM();
										FST_1_ERROR_RAMPFULL_observable.next();
										FST_2_ERROR_RAMPFULL_observable.next();
										raiseLocal_FST_2_ERROR_RAMPFULL();
										enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceDivider_default();
										Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
										transitioned_after = 18;
									}  else
									{
										if (((FST_1_PUK_SORTING_EJECT_raised) && (FST_1_isEjector)) && (FST1RampFull))
										{ 
											exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate();
											FST_2_ERROR_SYSTEM_observable.next();
											raiseLocal_FST_2_ERROR_SYSTEM();
											FST_2_ERROR_RAMPFULL_observable.next();
											raiseLocal_FST_2_ERROR_RAMPFULL();
											enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector_default();
											Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
											transitioned_after = 18;
										} 
									}
								}
							}
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Copy_1_FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider_react(const sc::integer transitioned_before) {
	/* The reactions of state EjectingDivider. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (18))
		{ 
			if (LBM_2_OPEN_raised)
			{ 
				exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider();
				enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter_default();
				Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
				transitioned_after = 18;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Copy_1_FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector_react(const sc::integer transitioned_before) {
	/* The reactions of state TransferEjector. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (18))
		{ 
			if (LBM_2_OPEN_raised)
			{ 
				exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector();
				FST_2_POSITION_SORTING_NEW_PUK_observable.next();
				incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_PUK_ENTRY_EGRESS))
				;
				enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter_default();
				Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
				transitioned_after = 18;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Copy_1_FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider_react(const sc::integer transitioned_before) {
	/* The reactions of state TransferDivider. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (18))
		{ 
			if (LBM_2_OPEN_raised)
			{ 
				exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider();
				FST_2_POSITION_SORTING_NEW_PUK_observable.next();
				incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_PUK_ENTRY_EGRESS))
				;
				enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter_default();
				Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
				transitioned_after = 18;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Copy_1_FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector_react(const sc::integer transitioned_before) {
	/* The reactions of state EjectingEjector. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (18))
		{ 
			if (LBM_2_OPEN_raised)
			{ 
				exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector();
				enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter_default();
				Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
				transitioned_after = 18;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Copy_1_FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter_react(const sc::integer transitioned_before) {
	/* The reactions of state EvaluateCounter. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (18))
		{ 
			if ((fst_2_ready) == (true))
			{ 
				exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter();
				motor1Forward--;
				enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle_default();
				Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
				transitioned_after = 18;
			}  else
			{
				if ((FST1_Sorting_Counter) > (0))
				{ 
					exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter();
					enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent_default();
					Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
					transitioned_after = 18;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Copy_1_FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error_react(const sc::integer transitioned_before) {
	/* The reactions of state Error. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (18))
		{ 
			if ((FST_2_ERROR_SYSTEM_RESOLVED_raised) && ((fst_2_ready) == (true)))
			{ 
				exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error();
				motor2Stop--;
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle_default();
				Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
				transitioned_after = 18;
			}  else
			{
				if ((FST_2_ERROR_SYSTEM_RESOLVED_raised) && ((fst_2_ready) == (false)))
				{ 
					exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error();
					motor2Stop--;
					EVALUATE_observable.next();
					raiseLocal_EVALUATE();
					enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent_default();
					Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
					transitioned_after = 18;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Copy_1_FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceDivider_react(const sc::integer transitioned_before) {
	/* The reactions of state AwaitingRampClearanceDivider. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (18))
		{ 
			if (!(FST1RampFull))
			{ 
				exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceDivider();
				FST1_Sorting_Counter--;
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider_default();
				Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
				transitioned_after = 18;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Copy_1_FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector_react(const sc::integer transitioned_before) {
	/* The reactions of state AwaitingRampClearanceEjector. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (18))
		{ 
			if (local_FST_2_ERROR_RAMPCLEARED_raised)
			{ 
				exseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector();
				FST1_Sorting_Counter--;
				FST_1_SORTING_MODULE_ACTIVE_observable.next();
				FST_1_SORTING_MODULE_RESTING_observable.next();
				enseq_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector_default();
				Copy_1_FSM_Festo1__Sorting_Sorting_react(18);
				transitioned_after = 18;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Copy_1_FSM_Festo1__Sorting_Sorting_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::Copy_1_FSM_Festo1__Sorting_Paused_react(const sc::integer transitioned_before) {
	/* The reactions of state Paused. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (18))
		{ 
			if (SYSTEM_OPERATIONAL_IN_raised)
			{ 
				exseq_Copy_1_FSM_Festo1__Sorting_Paused();
				react_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_History();
				transitioned_after = 18;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_Copy_1_FSM_Festo1__Sorting_Paused();
					enseq_Copy_1_FSM_Festo1__Sorting_E_STOP_default();
					transitioned_after = 18;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::Copy_1_FSM_Festo1__Sorting_E_STOP_react(const sc::integer transitioned_before) {
	/* The reactions of state E_STOP. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (18))
		{ 
			if (local_ESTOP_CLEARED_raised)
			{ 
				exseq_Copy_1_FSM_Festo1__Sorting_E_STOP();
				enseq_Copy_1_FSM_Festo1__Sorting_Start_default();
				transitioned_after = 18;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::Copy_1_FSM_Festo1__Sorting_Start_react(const sc::integer transitioned_before) {
	/* The reactions of state Start. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (18))
		{ 
			if (SYSTEM_OPERATIONAL_IN_raised)
			{ 
				exseq_Copy_1_FSM_Festo1__Sorting_Start();
				enseq_Copy_1_FSM_Festo1__Sorting_Sorting_default();
				transitioned_after = 18;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::Copy_1_FSM_Festo1__Sorting_ErrorFST1_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorFST1. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (18))
		{ 
			if (FST_2_ERROR_SYSTEM_RESOLVED_raised)
			{ 
				exseq_Copy_1_FSM_Festo1__Sorting_ErrorFST1();
				react_Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_History();
				transitioned_after = 18;
			}  else
			{
				if (local_ESTOP_RECEIVED_raised)
				{ 
					exseq_Copy_1_FSM_Festo1__Sorting_ErrorFST1();
					enseq_Copy_1_FSM_Festo1__Sorting_E_STOP_default();
					transitioned_after = 18;
				} 
			}
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_FSM_Errors_react(const sc::integer transitioned_before) {
	/* The reactions of state FSM_Errors. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if (LBF_2_OPEN_raised)
			{ 
				exseq_FSM_Festo2__Errors_FSM_Errors();
				setLbf_2_isOpen(true);
				EVALUATE_observable.next();
				raiseLocal_EVALUATE();
				react_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_History();
				react(0);
				transitioned_after = 19;
			}  else
			{
				if (HS_2_SAMPLING_DONE_raised)
				{ 
					exseq_FSM_Festo2__Errors_FSM_Errors();
					setHs_2_isOpen(true);
					EVALUATE_observable.next();
					raiseLocal_EVALUATE();
					react_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_History();
					react(0);
					transitioned_after = 19;
				}  else
				{
					if (LBE_2_OPEN_raised)
					{ 
						exseq_FSM_Festo2__Errors_FSM_Errors();
						setLbe_2_isOpen(true);
						EVALUATE_observable.next();
						raiseLocal_EVALUATE();
						react_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_History();
						react(0);
						transitioned_after = 19;
					}  else
					{
						if (LBM_2_OPEN_raised)
						{ 
							exseq_FSM_Festo2__Errors_FSM_Errors();
							setLbm_2_isOpen(true);
							react_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_History();
							react(0);
							transitioned_after = 19;
						}  else
						{
							if (LBF_2_INTERRUPTED_raised)
							{ 
								exseq_FSM_Festo2__Errors_FSM_Errors();
								setLbf_2_isOpen(false);
								EVALUATE_observable.next();
								raiseLocal_EVALUATE();
								react_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_History();
								react(0);
								transitioned_after = 19;
							}  else
							{
								if (HS_2_SAMPLE_raised)
								{ 
									exseq_FSM_Festo2__Errors_FSM_Errors();
									setHs_2_isOpen(false);
									EVALUATE_observable.next();
									raiseLocal_EVALUATE();
									react_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_History();
									react(0);
									transitioned_after = 19;
								}  else
								{
									if (LBE_2_INTERRUPTED_raised)
									{ 
										exseq_FSM_Festo2__Errors_FSM_Errors();
										setLbe_2_isOpen(true);
										EVALUATE_observable.next();
										raiseLocal_EVALUATE();
										react_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_History();
										react(0);
										transitioned_after = 19;
									}  else
									{
										if (LBM_2_INTERRUPTED_raised)
										{ 
											exseq_FSM_Festo2__Errors_FSM_Errors();
											setLbm_2_isOpen(false);
											EVALUATE_observable.next();
											raiseLocal_EVALUATE();
											react_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_History();
											react(0);
											transitioned_after = 19;
										}  else
										{
											if (local_ESTOP_RECEIVED_raised)
											{ 
												exseq_FSM_Festo2__Errors_FSM_Errors();
												enseq_FSM_Festo2__Errors_EStop_default();
												react(0);
												transitioned_after = 19;
											}  else
											{
												if (FST_2_ERROR_SYSTEM_RESOLVED_raised)
												{ 
													exseq_FSM_Festo2__Errors_FSM_Errors();
													motor2Stop--;
													EVALUATE_observable.next();
													raiseLocal_EVALUATE();
													enseq_FSM_Festo2__Errors_Start_default();
													react(0);
													transitioned_after = 19;
												}  else
												{
													if (LBR_2_INTERRUPTED_raised)
													{ 
														exseq_FSM_Festo2__Errors_FSM_Errors();
														setLbr_2_isOpen(false);
														EVALUATE_observable.next();
														raiseLocal_EVALUATE();
														react_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_History();
														react(0);
														transitioned_after = 19;
													}  else
													{
														if (LBR_2_OPEN_raised)
														{ 
															exseq_FSM_Festo2__Errors_FSM_Errors();
															setLbr_2_isOpen(true);
															EVALUATE_observable.next();
															raiseLocal_EVALUATE();
															react_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_History();
															react(0);
															transitioned_after = 19;
														} 
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingUnacknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinSortingUnacknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if (BGR_2_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingUnacknowledged();
				FST_2_ERROR_ACKNOWLEDGED_observable.next();
				enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged_default();
				FSM_Festo2__Errors_FSM_Errors_react(19);
				transitioned_after = 19;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinIngressRestart. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if (BGS_2_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart();
				incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_ERROR_SYSTEM_RESOLVED))
				;
				enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
				FSM_Festo2__Errors_FSM_Errors_react(19);
				transitioned_after = 19;
			}  else
			{
				if ((hs_2_isOpenCopy) != (hs_2_isOpen))
				{ 
					exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart();
					setLbf_2_isOpenCopy(lbf_2_isOpen);
					FST_2_ERROR_HM_observable.next();
					raiseLocal_FST_2_ERROR_HM();
					enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
					FSM_Festo2__Errors_FSM_Errors_react(19);
					transitioned_after = 19;
				}  else
				{
					if ((lbm_2_isOpenCopy) != (lbm_2_isOpen))
					{ 
						exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart();
						setLbf_2_isOpenCopy(lbf_2_isOpen);
						FST_2_ERROR_SORTING_observable.next();
						raiseLocal_FST_2_ERROR_SORTING();
						enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
						FSM_Festo2__Errors_FSM_Errors_react(19);
						transitioned_after = 19;
					}  else
					{
						if ((lbr_2_isOpenCopy) != (lbr_2_isOpen))
						{ 
							exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart();
							setLbf_2_isOpenCopy(lbf_2_isOpen);
							FST_2_ERROR_RAMPFULL_observable.next();
							raiseLocal_FST_2_ERROR_RAMPFULL();
							enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
							FSM_Festo2__Errors_FSM_Errors_react(19);
							transitioned_after = 19;
						}  else
						{
							if ((lbe_2_isOpenCopy) != (lbe_2_isOpen))
							{ 
								exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart();
								setLbf_2_isOpenCopy(lbf_2_isOpen);
								FST_2_ERROR_EGRESS_observable.next();
								raiseLocal_FST_2_ERROR_EGRESS();
								enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
								FSM_Festo2__Errors_FSM_Errors_react(19);
								transitioned_after = 19;
							} 
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinSortingPukAcknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if ((lbm_2_isOpen) == (true))
			{ 
				exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged();
				FST_2_ERROR_LAMP_RESOLVED_observable.next();
				Q22_OFF_observable.next();
				enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart_default();
				FSM_Festo2__Errors_FSM_Errors_react(19);
				transitioned_after = 19;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_react(const sc::integer transitioned_before) {
	/* The reactions of state Idle. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if (local_FST_2_ERROR_HM_raised)
			{ 
				exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle();
				FST_2_ERROR_SYSTEM_observable.next();
				raiseLocal_FST_2_ERROR_SYSTEM();
				Q21_ON_observable.next();
				enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMUnacknowledged_default();
				FSM_Festo2__Errors_FSM_Errors_react(19);
				transitioned_after = 19;
			}  else
			{
				if (local_FST_2_ERROR_SORTING_raised)
				{ 
					exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle();
					FST_2_ERROR_SYSTEM_observable.next();
					raiseLocal_FST_2_ERROR_SYSTEM();
					Q22_ON_observable.next();
					enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingUnacknowledged_default();
					FSM_Festo2__Errors_FSM_Errors_react(19);
					transitioned_after = 19;
				}  else
				{
					if (local_FST_2_ERROR_INGRESS_raised)
					{ 
						exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle();
						enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressAcknowledged_default();
						FSM_Festo2__Errors_FSM_Errors_react(19);
						transitioned_after = 19;
					}  else
					{
						if (local_FST_2_ERROR_EGRESS_raised)
						{ 
							exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle();
							Q21_ON_observable.next();
							Q22_ON_observable.next();
							enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUnacknowledged_default();
							FSM_Festo2__Errors_FSM_Errors_react(19);
							transitioned_after = 19;
						}  else
						{
							if (local_FST_2_ERROR_RAMPFULL_raised)
							{ 
								exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle();
								Q22_ON_observable.next();
								enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorRampFullUnacknowledged_default();
								FSM_Festo2__Errors_FSM_Errors_react(19);
								transitioned_after = 19;
							} 
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinEgressUPRestart. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if (BGS_2_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart();
				incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_ERROR_SYSTEM_RESOLVED))
				;
				enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
				FSM_Festo2__Errors_FSM_Errors_react(19);
				transitioned_after = 19;
			}  else
			{
				if ((lbf_2_isOpenCopy) != (lbf_2_isOpen))
				{ 
					exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart();
					setLbe_2_isOpenCopy(lbe_2_isOpen);
					FST_2_ERROR_INGRESS_observable.next();
					raiseLocal_FST_2_ERROR_INGRESS();
					enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
					FSM_Festo2__Errors_FSM_Errors_react(19);
					transitioned_after = 19;
				}  else
				{
					if ((hs_2_isOpenCopy) != (hs_2_isOpen))
					{ 
						exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart();
						setLbe_2_isOpenCopy(lbe_2_isOpen);
						FST_2_ERROR_HM_observable.next();
						raiseLocal_FST_2_ERROR_HM();
						enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
						FSM_Festo2__Errors_FSM_Errors_react(19);
						transitioned_after = 19;
					}  else
					{
						if ((lbm_2_isOpenCopy) != (lbm_2_isOpen))
						{ 
							exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart();
							setLbe_2_isOpenCopy(lbe_2_isOpen);
							FST_2_ERROR_SORTING_observable.next();
							raiseLocal_FST_2_ERROR_SORTING();
							enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
							FSM_Festo2__Errors_FSM_Errors_react(19);
							transitioned_after = 19;
						}  else
						{
							if ((lbr_2_isOpenCopy) != (lbr_2_isOpen))
							{ 
								exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart();
								setLbe_2_isOpenCopy(lbe_2_isOpen);
								FST_2_ERROR_RAMPFULL_observable.next();
								raiseLocal_FST_2_ERROR_RAMPFULL();
								enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
								FSM_Festo2__Errors_FSM_Errors_react(19);
								transitioned_after = 19;
							} 
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUnacknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinEgressUnacknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if (BGR_2_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUnacknowledged();
				FST_2_ERROR_ACKNOWLEDGED_observable.next();
				enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged_default();
				FSM_Festo2__Errors_FSM_Errors_react(19);
				transitioned_after = 19;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinEgressAcknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if ((lbe_2_isOpen) == (true))
			{ 
				exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged();
				FST_2_ERROR_LAMP_RESOLVED_observable.next();
				Q21_OFF_observable.next();
				Q22_OFF_observable.next();
				enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart_default();
				FSM_Festo2__Errors_FSM_Errors_react(19);
				transitioned_after = 19;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinIngressUnacknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if (lbf_2_isOpen)
			{ 
				exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged();
				FST_2_ERROR_LAMP_RESOLVED_observable.next();
				enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart_default();
				FSM_Festo2__Errors_FSM_Errors_react(19);
				transitioned_after = 19;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressAcknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinIngressAcknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if (BGR_2_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressAcknowledged();
				FST_2_ERROR_ACKNOWLEDGED_observable.next();
				enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged_default();
				FSM_Festo2__Errors_FSM_Errors_react(19);
				transitioned_after = 19;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinHMAcknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if (hs_2_isOpen)
			{ 
				exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged();
				FST_2_ERROR_LAMP_RESOLVED_observable.next();
				Q21_OFF_observable.next();
				enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart_default();
				FSM_Festo2__Errors_FSM_Errors_react(19);
				transitioned_after = 19;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMUnacknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinHMUnacknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if (BGR_2_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMUnacknowledged();
				FST_2_ERROR_ACKNOWLEDGED_observable.next();
				enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged_default();
				FSM_Festo2__Errors_FSM_Errors_react(19);
				transitioned_after = 19;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinHMRestart. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if (BGS_2_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart();
				incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_ERROR_SYSTEM_RESOLVED))
				;
				enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
				FSM_Festo2__Errors_FSM_Errors_react(19);
				transitioned_after = 19;
			}  else
			{
				if ((lbf_2_isOpenCopy) != (lbf_2_isOpen))
				{ 
					exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart();
					setHs_2_isOpenCopy(hs_2_isOpen);
					FST_2_ERROR_INGRESS_observable.next();
					raiseLocal_FST_2_ERROR_INGRESS();
					enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
					FSM_Festo2__Errors_FSM_Errors_react(19);
					transitioned_after = 19;
				}  else
				{
					if ((lbr_2_isOpenCopy) != (lbr_2_isOpen))
					{ 
						exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart();
						setHs_2_isOpenCopy(hs_2_isOpen);
						FST_2_ERROR_RAMPFULL_observable.next();
						raiseLocal_FST_2_ERROR_RAMPFULL();
						enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
						FSM_Festo2__Errors_FSM_Errors_react(19);
						transitioned_after = 19;
					}  else
					{
						if ((lbm_2_isOpenCopy) != (lbm_2_isOpen))
						{ 
							exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart();
							setHs_2_isOpenCopy(hs_2_isOpen);
							FST_2_ERROR_SORTING_observable.next();
							raiseLocal_FST_2_ERROR_SORTING();
							enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
							FSM_Festo2__Errors_FSM_Errors_react(19);
							transitioned_after = 19;
						}  else
						{
							if ((lbe_2_isOpenCopy) != (lbe_2_isOpen))
							{ 
								exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart();
								setHs_2_isOpenCopy(hs_2_isOpen);
								FST_2_ERROR_EGRESS_observable.next();
								raiseLocal_FST_2_ERROR_EGRESS();
								enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
								FSM_Festo2__Errors_FSM_Errors_react(19);
								transitioned_after = 19;
							} 
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinSortingRestart. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if (BGS_2_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart();
				incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_ERROR_SYSTEM_RESOLVED))
				;
				enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
				FSM_Festo2__Errors_FSM_Errors_react(19);
				transitioned_after = 19;
			}  else
			{
				if ((lbf_2_isOpenCopy) != (lbf_2_isOpen))
				{ 
					exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart();
					setLbm_2_isOpenCopy(lbm_2_isOpen);
					FST_2_ERROR_INGRESS_observable.next();
					raiseLocal_FST_2_ERROR_INGRESS();
					enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
					FSM_Festo2__Errors_FSM_Errors_react(19);
					transitioned_after = 19;
				}  else
				{
					if ((hs_2_isOpenCopy) != (hs_2_isOpen))
					{ 
						exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart();
						setLbm_2_isOpenCopy(lbm_2_isOpen);
						FST_2_ERROR_HM_observable.next();
						raiseLocal_FST_2_ERROR_HM();
						enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
						FSM_Festo2__Errors_FSM_Errors_react(19);
						transitioned_after = 19;
					}  else
					{
						if ((lbe_2_isOpenCopy) != (lbe_2_isOpen))
						{ 
							exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart();
							setLbm_2_isOpenCopy(lbm_2_isOpen);
							FST_2_ERROR_EGRESS_observable.next();
							raiseLocal_FST_2_ERROR_EGRESS();
							enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
							FSM_Festo2__Errors_FSM_Errors_react(19);
							transitioned_after = 19;
						}  else
						{
							if ((lbr_2_isOpenCopy) != (lbr_2_isOpen))
							{ 
								exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart();
								setLbm_2_isOpenCopy(lbm_2_isOpen);
								FST_2_ERROR_RAMPFULL_observable.next();
								raiseLocal_FST_2_ERROR_RAMPFULL();
								enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
								FSM_Festo2__Errors_FSM_Errors_react(19);
								transitioned_after = 19;
							} 
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorRampFullUnacknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorRampFullUnacknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if (BGR_2_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorRampFullUnacknowledged();
				FST_2_ERROR_ACKNOWLEDGED_observable.next();
				enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged_default();
				FSM_Festo2__Errors_FSM_Errors_react(19);
				transitioned_after = 19;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinRampFullAcknowledged. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if ((lbr_2_isOpen) == (true))
			{ 
				exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged();
				FST_2_ERROR_LAMP_RESOLVED_observable.next();
				Q22_OFF_observable.next();
				enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart_default();
				FSM_Festo2__Errors_FSM_Errors_react(19);
				transitioned_after = 19;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart_react(const sc::integer transitioned_before) {
	/* The reactions of state ErrorinRampFullRestart. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if (BGS_2_INTERRUPTED_raised)
			{ 
				exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart();
				incomingEventQueue.push_back(new FSM::EventInstance(FSM::Event::FST_2_ERROR_SYSTEM_RESOLVED))
				;
				enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
				FSM_Festo2__Errors_FSM_Errors_react(19);
				transitioned_after = 19;
			}  else
			{
				if ((lbf_2_isOpenCopy) != (lbf_2_isOpen))
				{ 
					exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart();
					setLbr_2_isOpenCopy(lbr_2_isOpen);
					FST_2_ERROR_INGRESS_observable.next();
					raiseLocal_FST_2_ERROR_INGRESS();
					enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
					FSM_Festo2__Errors_FSM_Errors_react(19);
					transitioned_after = 19;
				}  else
				{
					if ((hs_2_isOpenCopy) != (hs_2_isOpen))
					{ 
						exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart();
						setLbr_2_isOpenCopy(lbr_2_isOpen);
						FST_2_ERROR_HM_observable.next();
						raiseLocal_FST_2_ERROR_HM();
						enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
						FSM_Festo2__Errors_FSM_Errors_react(19);
						transitioned_after = 19;
					}  else
					{
						if ((lbm_2_isOpenCopy) != (lbm_2_isOpen))
						{ 
							exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart();
							setLbr_2_isOpenCopy(lbr_2_isOpen);
							FST_2_ERROR_SORTING_observable.next();
							raiseLocal_FST_2_ERROR_SORTING();
							enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
							FSM_Festo2__Errors_FSM_Errors_react(19);
							transitioned_after = 19;
						}  else
						{
							if ((lbe_2_isOpenCopy) != (lbe_2_isOpen))
							{ 
								exseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart();
								setLbr_2_isOpenCopy(lbr_2_isOpen);
								FST_2_ERROR_EGRESS_observable.next();
								raiseLocal_FST_2_ERROR_EGRESS();
								enseq_FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_default();
								FSM_Festo2__Errors_FSM_Errors_react(19);
								transitioned_after = 19;
							} 
						}
					}
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = FSM_Festo2__Errors_FSM_Errors_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_EStop_react(const sc::integer transitioned_before) {
	/* The reactions of state EStop. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if (local_ESTOP_CLEARED_raised)
			{ 
				exseq_FSM_Festo2__Errors_EStop();
				enseq_FSM_Festo2__Errors_Start_default();
				react(0);
				transitioned_after = 19;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer FSM::FSM_Festo2__Errors_Start_react(const sc::integer transitioned_before) {
	/* The reactions of state Start. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (19))
		{ 
			if (local_FST_2_ERROR_SYSTEM_raised)
			{ 
				exseq_FSM_Festo2__Errors_Start();
				motor2Stop++;
				setLbf_2_isOpenCopy(lbf_2_isOpen);
				setHs_2_isOpenCopy(hs_2_isOpen);
				setLbm_2_isOpenCopy(lbm_2_isOpen);
				setLbe_2_isOpenCopy(lbe_2_isOpen);
				setLbr_2_isOpenCopy(lbr_2_isOpenCopy);
				enseq_FSM_Festo2__Errors_FSM_Errors_default();
				react(0);
				transitioned_after = 19;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

void FSM::clearInEvents() noexcept {
	SYSTEM_OPERATIONAL_IN_raised = false;
	ESTOP_1_HIGH_raised = false;
	ESTOP_1_LOW_raised = false;
	ESTOP_2_HIGH_raised = false;
	ESTOP_2_LOW_raised = false;
	FST_1_ERROR_SYSTEM_RESOLVED_raised = false;
	FST_1_POSITION_INGRESS_DISTANCE_VALID_raised = false;
	FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED_raised = false;
	FST_1_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED_raised = false;
	FST_1_POSITION_SORTING_PUK_EXPECTED_raised = false;
	FST_1_POSITION_SORTING_PUK_EXPIRED_raised = false;
	FST_1_POSITION_DIVIDER_DISTANCE_VALID_raised = false;
	FST_1_POSITION_EGRESS_PUK_EXPECTED_raised = false;
	FST_1_POSITION_EGRESS_PUK_EXPIRED_raised = false;
	LBF_1_INTERRUPTED_raised = false;
	LBF_1_OPEN_raised = false;
	FST_1_PUK_ENTRY_HeightMeasurement_raised = false;
	HS_1_SAMPLE_raised = false;
	HS_1_SAMPLING_DONE_raised = false;
	LBM_1_INTERRUPTED_raised = false;
	LBM_1_OPEN_raised = false;
	MS_1_HIGH_raised = false;
	MS_1_LOW_raised = false;
	LBR_1_INTERRUPTED_raised = false;
	LBR_1_OPEN_raised = false;
	FST_1_PUK_SORTING_PASSTHROUGH_raised = false;
	FST_1_PUK_SORTING_EJECT_raised = false;
	LBE_1_OPEN_raised = false;
	LBE_1_INTERRUPTED_raised = false;
	BGS_1_LONG_PRESSED_raised = false;
	BGS_1_INTERRUPTED_raised = false;
	BRS_1_INTERRUPTED_raised = false;
	BGR_1_INTERRUPTED_raised = false;
	FST_2_ERROR_SYSTEM_RESOLVED_raised = false;
	FST_2_POSITION_INGRESS_DISTANCE_VALID_raised = false;
	FST_2_POSITION_INGRESS_PUK_EXPECTED_raised = false;
	FST_2_POSITION_INGRESS_PUK_EXPIRED_raised = false;
	FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPECTED_raised = false;
	FST_2_POSITION_HEIGHTMEASUREMENT_PUK_EXPIRED_raised = false;
	FST_2_POSITION_SORTING_PUK_EXPECTED_raised = false;
	FST_2_POSITION_SORTING_PUK_EXPIRED_raised = false;
	FST_2_POSITION_EGRESS_PUK_EXPECTED_raised = false;
	FST_2_POSITION_EGRESS_PUK_EXPIRED_raised = false;
	FST_2_POSITION_DIVIDER_DISTANCE_VALID_raised = false;
	LBF_2_INTERRUPTED_raised = false;
	LBF_2_OPEN_raised = false;
	HS_2_SAMPLE_raised = false;
	HS_2_SAMPLING_DONE_raised = false;
	LBM_2_INTERRUPTED_raised = false;
	LBM_2_OPEN_raised = false;
	MS_2_HIGH_raised = false;
	MS_2_LOW_raised = false;
	LBR_2_INTERRUPTED_raised = false;
	LBR_2_OPEN_raised = false;
	FST_2_PUK_ENTRY_EGRESS_raised = false;
	LBE_2_OPEN_raised = false;
	LBE_2_INTERRUPTED_raised = false;
	BGS_2_LONG_PRESSED_raised = false;
	BGS_2_INTERRUPTED_raised = false;
	BRS_2_INTERRUPTED_raised = false;
	BGR_2_INTERRUPTED_raised = false;
	ESTOP_SIGNAL_raised = false;
	ESTOP_SIGNAL_RESET_raised = false;
	RUNNING_SIGNAL_raised = false;
	RUNNING_SIGNAL_RESET_raised = false;
	WARNING_SIGNAL_raised = false;
	WARNING_SIGNAL_RESET_raised = false;
	READY_SIGNAL_raised = false;
	READY_RESET_raised = false;
	ERROR_SIGNAL_raised = false;
}

void FSM::clearInternalEvents() noexcept {
	local_SYSTEM_OPERATIONAL_OUT_raised = false;
	local_ESTOP_RECEIVED_raised = false;
	local_FST_1_ERROR_SYSTEM_raised = false;
	local_ESTOP_CLEARED_raised = false;
	local_FST_1_PUK_ENTRY_SORTING_raised = false;
	local_FST_1_PUK_ENTRY_EGRESS_raised = false;
	local_SYSTEM_SERVICE_IN_raised = false;
	local_SYSTEM_SERVICE_OUT_raised = false;
	local_FST_1_INGRESS_IN_raised = false;
	local_FST_1_INGRESS_OUT_raised = false;
	local_FST_1_ERROR_ACKNOWLEDGED_raised = false;
	local_FST_2_ERROR_SYSTEM_raised = false;
	local_FST_2_PUK_ENTRY_INGRESS_raised = false;
	local_FST_2_PUK_ENTRY_HeightMeasurement_raised = false;
	local_FST_2_YELLOW_LAMP_ON_raised = false;
	local_FST_2_YELLOW_LAMP_OFF_raised = false;
	local_EVALUATE_raised = false;
	local_FST_1_ERROR_INGRESS_raised = false;
	local_FST_1_ERROR_HM_raised = false;
	local_FST_1_ERROR_SORTING_raised = false;
	local_FST_1_ERROR_EGRESS_MISSING_PUK_raised = false;
	local_FST_2_PUK_ENTRY_SORTING_raised = false;
	local_FST_2_PUK_SORTING_PASSTHROUGH_raised = false;
	local_FST_2_PUK_SORTING_EJECT_raised = false;
	local_FST_2_ERROR_RAMPCLEARED_raised = false;
	local_FST_2_ERROR_HM_raised = false;
	local_FST_2_ERROR_SORTING_raised = false;
	local_FST_2_ERROR_INGRESS_raised = false;
	local_FST_2_ERROR_EGRESS_raised = false;
	local_FST_2_ERROR_RAMPFULL_raised = false;
}

void FSM::microStep() {
	sc::integer transitioned = -1;
	stateConfVectorPosition = 0;
	switch(stateConfVector[ 0 ])
	{
		case FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_Idle :
		{
			transitioned = FSM_Festo1_Ingress_Ingress_Ingress_Idle_react(transitioned);
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_PukPresent :
		{
			transitioned = FSM_Festo1_Ingress_Ingress_Ingress_PukPresent_react(transitioned);
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance :
		{
			transitioned = FSM_Festo1_Ingress_Ingress_Ingress_CreatingDistance_react(transitioned);
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Paused :
		{
			transitioned = FSM_Festo1_Ingress_Paused_react(transitioned);
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_E_STOP :
		{
			transitioned = FSM_Festo1_Ingress_E_STOP_react(transitioned);
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_Start :
		{
			transitioned = FSM_Festo1_Ingress_Start_react(transitioned);
			break;
		}
		case FSM::State::FSM_Festo1_Ingress_ErrorFST1 :
		{
			transitioned = FSM_Festo1_Ingress_ErrorFST1_react(transitioned);
			break;
		}
		default:
			/* do nothing */
			break;
	}
	if ((stateConfVectorPosition) < (1))
	{ 
		switch(stateConfVector[ 1 ])
		{
			case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle :
			{
				transitioned = FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Idle_react(transitioned);
				break;
			}
			case FSM::State::A :
			{
				transitioned = FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_A_react(transitioned);
				break;
			}
			case FSM::State::B :
			{
				transitioned = FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_B_react(transitioned);
				break;
			}
			case FSM::State::C :
			{
				transitioned = FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_C_react(transitioned);
				break;
			}
			case FSM::State::Error :
			{
				transitioned = FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Error_react(transitioned);
				break;
			}
			case FSM::State::Evaluate :
			{
				transitioned = FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM_Evaluate_react(transitioned);
				break;
			}
			case FSM::State::_final_ :
			{
				transitioned = FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_Measuring_FSMHeightInternalFSM__final__react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent :
			{
				transitioned = FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukPresent_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected :
			{
				transitioned = FSM_Festo1_HeightMeasurement_HeightMeasurement_FSM_Festo1__HM_PukExpected_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1_HeightMeasurement_Paused :
			{
				transitioned = FSM_Festo1_HeightMeasurement_Paused_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1_HeightMeasurement_E_STOP :
			{
				transitioned = FSM_Festo1_HeightMeasurement_E_STOP_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1_HeightMeasurement_Start :
			{
				transitioned = FSM_Festo1_HeightMeasurement_Start_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1_HeightMeasurement_ErrorFST1 :
			{
				transitioned = FSM_Festo1_HeightMeasurement_ErrorFST1_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (2))
	{ 
		switch(stateConfVector[ 2 ])
		{
			case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_Idle :
			{
				transitioned = FSM_Festo1__Sorting_Sorting_Sorting_Idle_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_PukPresent :
			{
				transitioned = FSM_Festo1__Sorting_Sorting_Sorting_PukPresent_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_PukExpected :
			{
				transitioned = FSM_Festo1__Sorting_Sorting_Sorting_PukExpected_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_Evaluate :
			{
				transitioned = FSM_Festo1__Sorting_Sorting_Sorting_Evaluate_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider :
			{
				transitioned = FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector :
			{
				transitioned = FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider :
			{
				transitioned = FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector :
			{
				transitioned = FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter :
			{
				transitioned = FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Sorting_Paused :
			{
				transitioned = FSM_Festo1__Sorting_Paused_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Sorting_E_STOP :
			{
				transitioned = FSM_Festo1__Sorting_E_STOP_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Sorting_Start :
			{
				transitioned = FSM_Festo1__Sorting_Start_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Sorting_ErrorFST1 :
			{
				transitioned = FSM_Festo1__Sorting_ErrorFST1_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (3))
	{ 
		switch(stateConfVector[ 3 ])
		{
			case FSM::State::FSM_Festo1__Egress_Paused :
			{
				transitioned = FSM_Festo1__Egress_Paused_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Egress_E_STOP :
			{
				transitioned = FSM_Festo1__Egress_E_STOP_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Egress_Start :
			{
				transitioned = FSM_Festo1__Egress_Start_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Egress_FST1Error :
			{
				transitioned = FSM_Festo1__Egress_FST1Error_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Waiting :
			{
				transitioned = FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Waiting_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer :
			{
				transitioned = FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_Transfer_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected :
			{
				transitioned = FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukExpected_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE :
			{
				transitioned = FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_IDLE_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent :
			{
				transitioned = FSM_Festo1__Egress_Egress_FSM_FST_1_Egress_PukPresent_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (4))
	{ 
		switch(stateConfVector[ 4 ])
		{
			case FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward :
			{
				transitioned = FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_react(transitioned);
				break;
			}
			case FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow :
			{
				transitioned = FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_react(transitioned);
				break;
			}
			case FSM::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop :
			{
				transitioned = FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (5))
	{ 
		switch(stateConfVector[ 5 ])
		{
			case FSM::State::__Operational :
			{
				transitioned = __Operational_react(transitioned);
				break;
			}
			case FSM::State::__Start :
			{
				transitioned = __Start_react(transitioned);
				break;
			}
			case FSM::State::__Ready :
			{
				transitioned = __Ready_react(transitioned);
				break;
			}
			case FSM::State::__ServiceMode :
			{
				transitioned = __ServiceMode_react(transitioned);
				break;
			}
			case FSM::State::__EStopCalibration :
			{
				transitioned = __EStopCalibration_react(transitioned);
				break;
			}
			case FSM::State::__EStopReceived :
			{
				transitioned = __EStopReceived_react(transitioned);
				break;
			}
			case FSM::State::__EStopCleared :
			{
				transitioned = __EStopCleared_react(transitioned);
				break;
			}
			case FSM::State::__ReveivedReset :
			{
				transitioned = __ReveivedReset_react(transitioned);
				break;
			}
			case FSM::State::__Paused :
			{
				transitioned = __Paused_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (6))
	{ 
		switch(stateConfVector[ 6 ])
		{
			case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off :
			{
				transitioned = FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant :
			{
				transitioned = FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz :
			{
				transitioned = FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (7))
	{ 
		switch(stateConfVector[ 7 ])
		{
			case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off :
			{
				transitioned = FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant :
			{
				transitioned = FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz :
			{
				transitioned = FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (8))
	{ 
		switch(stateConfVector[ 8 ])
		{
			case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off :
			{
				transitioned = FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant :
			{
				transitioned = FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Blinking1HZ :
			{
				transitioned = FSM_Festo1_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Blinking1HZ_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (9))
	{ 
		switch(stateConfVector[ 9 ])
		{
			case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_Idle :
			{
				transitioned = FSM_Festo2__Ingress_Ingress_Ingress_Idle_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance :
			{
				transitioned = FSM_Festo2__Ingress_Ingress_Ingress_CreatingDistance_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukPresent :
			{
				transitioned = FSM_Festo2__Ingress_Ingress_Ingress_PukPresent_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukExpected :
			{
				transitioned = FSM_Festo2__Ingress_Ingress_Ingress_PukExpected_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_PukinLBF2 :
			{
				transitioned = FSM_Festo2__Ingress_Ingress_Ingress_PukinLBF2_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Ingress_Ingress_Ingress_ERROR :
			{
				transitioned = FSM_Festo2__Ingress_Ingress_Ingress_ERROR_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Ingress_E_STOP :
			{
				transitioned = FSM_Festo2__Ingress_E_STOP_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Ingress_Paused :
			{
				transitioned = FSM_Festo2__Ingress_Paused_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Ingress_Starting :
			{
				transitioned = FSM_Festo2__Ingress_Starting_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Ingress_ErrorFST2 :
			{
				transitioned = FSM_Festo2__Ingress_ErrorFST2_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (10))
	{ 
		switch(stateConfVector[ 10 ])
		{
			case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle :
			{
				transitioned = FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Idle_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent :
			{
				transitioned = FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukPresent_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected :
			{
				transitioned = FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_PukExpected_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A :
			{
				transitioned = FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_A_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B :
			{
				transitioned = FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_B_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C :
			{
				transitioned = FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_C_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error :
			{
				transitioned = FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Error_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate :
			{
				transitioned = FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL_Evaluate_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final_ :
			{
				transitioned = FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Measuring_FST2FSMINTERNAL__final__react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error :
			{
				transitioned = FSM_Festo2__HeightMeasurement_HeightMeasurement_FSM_FST2__HM_Error_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__HeightMeasurement_Paused :
			{
				transitioned = FSM_Festo2__HeightMeasurement_Paused_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__HeightMeasurement_E_STOP :
			{
				transitioned = FSM_Festo2__HeightMeasurement_E_STOP_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__HeightMeasurement_Start :
			{
				transitioned = FSM_Festo2__HeightMeasurement_Start_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__HeightMeasurement_ErrorFST2 :
			{
				transitioned = FSM_Festo2__HeightMeasurement_ErrorFST2_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (11))
	{ 
		switch(stateConfVector[ 11 ])
		{
			case FSM::State::FSM_Festo2__Egress_Egress_Egress_IDLE :
			{
				transitioned = FSM_Festo2__Egress_Egress_Egress_IDLE_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Egress_Egress_Egress_PukPresent :
			{
				transitioned = FSM_Festo2__Egress_Egress_Egress_PukPresent_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Egress_Egress_Egress_Transfer :
			{
				transitioned = FSM_Festo2__Egress_Egress_Egress_Transfer_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Egress_Egress_Egress_PukExpected :
			{
				transitioned = FSM_Festo2__Egress_Egress_Egress_PukExpected_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Egress_Egress_Egress_Error :
			{
				transitioned = FSM_Festo2__Egress_Egress_Egress_Error_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Egress_Paused :
			{
				transitioned = FSM_Festo2__Egress_Paused_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Egress_E_STOP :
			{
				transitioned = FSM_Festo2__Egress_E_STOP_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Egress_Start :
			{
				transitioned = FSM_Festo2__Egress_Start_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Egress_ErrorFST2 :
			{
				transitioned = FSM_Festo2__Egress_ErrorFST2_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (12))
	{ 
		switch(stateConfVector[ 12 ])
		{
			case FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward :
			{
				transitioned = FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Forward_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow :
			{
				transitioned = FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Slow_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop :
			{
				transitioned = FSM_Festo2__Motor_SystemMotor_FSM_SystemMotor_Stop_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (13))
	{ 
		switch(stateConfVector[ 13 ])
		{
			case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off :
			{
				transitioned = FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant :
			{
				transitioned = FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz :
			{
				transitioned = FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (14))
	{ 
		switch(stateConfVector[ 14 ])
		{
			case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off :
			{
				transitioned = FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant :
			{
				transitioned = FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz :
			{
				transitioned = FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (15))
	{ 
		switch(stateConfVector[ 15 ])
		{
			case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off :
			{
				transitioned = FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant :
			{
				transitioned = FSM_Festo2__Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (16))
	{ 
		switch(stateConfVector[ 16 ])
		{
			case FSM::State::TEST_EvaluateTester :
			{
				transitioned = TEST_EvaluateTester_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (17))
	{ 
		switch(stateConfVector[ 17 ])
		{
			case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart :
			{
				transitioned = FSM_Festo1__Errors_FSM_Errors___ErrorinHMRestart_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukUnacknowledged :
			{
				transitioned = FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukUnacknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart :
			{
				transitioned = FSM_Festo1__Errors_FSM_Errors___ErrorinIngressRestart_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukAcknowledged :
			{
				transitioned = FSM_Festo1__Errors_FSM_Errors___ErrorinSortingPukAcknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Errors_FSM_Errors___Idle :
			{
				transitioned = FSM_Festo1__Errors_FSM_Errors___Idle_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart :
			{
				transitioned = FSM_Festo1__Errors_FSM_Errors___ErrorinSortingRestart_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressMissingPukAcknowledged :
			{
				transitioned = FSM_Festo1__Errors_FSM_Errors___ErrorinEgressMissingPukAcknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressPukUnacknowledged :
			{
				transitioned = FSM_Festo1__Errors_FSM_Errors___ErrorinEgressPukUnacknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMPukAcknowledged :
			{
				transitioned = FSM_Festo1__Errors_FSM_Errors___ErrorinHMPukAcknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinHMUnacknowledged :
			{
				transitioned = FSM_Festo1__Errors_FSM_Errors___ErrorinHMUnacknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged :
			{
				transitioned = FSM_Festo1__Errors_FSM_Errors___ErrorinIngressAcknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinIngressUnacknowledged :
			{
				transitioned = FSM_Festo1__Errors_FSM_Errors___ErrorinIngressUnacknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart :
			{
				transitioned = FSM_Festo1__Errors_FSM_Errors___ErrorinEgressRestart_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Errors_EStop :
			{
				transitioned = FSM_Festo1__Errors_EStop_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo1__Errors_Start :
			{
				transitioned = FSM_Festo1__Errors_Start_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (18))
	{ 
		switch(stateConfVector[ 18 ])
		{
			case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle :
			{
				transitioned = Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Idle_react(transitioned);
				break;
			}
			case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent :
			{
				transitioned = Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukPresent_react(transitioned);
				break;
			}
			case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected :
			{
				transitioned = Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_PukExpected_react(transitioned);
				break;
			}
			case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate :
			{
				transitioned = Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Evaluate_react(transitioned);
				break;
			}
			case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider :
			{
				transitioned = Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingDivider_react(transitioned);
				break;
			}
			case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector :
			{
				transitioned = Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferEjector_react(transitioned);
				break;
			}
			case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider :
			{
				transitioned = Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_TransferDivider_react(transitioned);
				break;
			}
			case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector :
			{
				transitioned = Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EjectingEjector_react(transitioned);
				break;
			}
			case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter :
			{
				transitioned = Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_EvaluateCounter_react(transitioned);
				break;
			}
			case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error :
			{
				transitioned = Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_Error_react(transitioned);
				break;
			}
			case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceDivider :
			{
				transitioned = Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceDivider_react(transitioned);
				break;
			}
			case FSM::State::Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector :
			{
				transitioned = Copy_1_FSM_Festo1__Sorting_Sorting_Sorting_AwaitingRampClearanceEjector_react(transitioned);
				break;
			}
			case FSM::State::Copy_1_FSM_Festo1__Sorting_Paused :
			{
				transitioned = Copy_1_FSM_Festo1__Sorting_Paused_react(transitioned);
				break;
			}
			case FSM::State::Copy_1_FSM_Festo1__Sorting_E_STOP :
			{
				transitioned = Copy_1_FSM_Festo1__Sorting_E_STOP_react(transitioned);
				break;
			}
			case FSM::State::Copy_1_FSM_Festo1__Sorting_Start :
			{
				transitioned = Copy_1_FSM_Festo1__Sorting_Start_react(transitioned);
				break;
			}
			case FSM::State::Copy_1_FSM_Festo1__Sorting_ErrorFST1 :
			{
				transitioned = Copy_1_FSM_Festo1__Sorting_ErrorFST1_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (19))
	{ 
		switch(stateConfVector[ 19 ])
		{
			case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingUnacknowledged :
			{
				FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingUnacknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart :
			{
				FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressRestart_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged :
			{
				FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingPukAcknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle :
			{
				FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_Idle_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart :
			{
				FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUPRestart_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUnacknowledged :
			{
				FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressUnacknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged :
			{
				FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinEgressAcknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged :
			{
				FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressUnacknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressAcknowledged :
			{
				FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinIngressAcknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged :
			{
				FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMAcknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMUnacknowledged :
			{
				FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMUnacknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart :
			{
				FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinHMRestart_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart :
			{
				FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinSortingRestart_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorRampFullUnacknowledged :
			{
				FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorRampFullUnacknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged :
			{
				FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullAcknowledged_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart :
			{
				FSM_Festo2__Errors_FSM_Errors_FST_2__FSM_Errors_ErrorinRampFullRestart_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Errors_EStop :
			{
				FSM_Festo2__Errors_EStop_react(transitioned);
				break;
			}
			case FSM::State::FSM_Festo2__Errors_Start :
			{
				FSM_Festo2__Errors_Start_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
}

void FSM::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	dispatchEvent(getNextEvent());
	do
	{ 
		doCompletion = false;
		do
		{ 
			if (completed)
			{ 
				doCompletion = true;
			} 
			completed = false;
			microStep();
			doCompletion = false;
		} while (completed);
		clearInEvents();
		clearInternalEvents();
	} while (dispatchEvent(getNextEvent()));
	isExecuting = false;
}

void FSM::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart FSM */
	enseq_FSM_Festo1_Ingress_default();
	enseq_FSM_Festo1_HeightMeasurement_default();
	enseq_FSM_Festo1__Sorting_default();
	enseq_FSM_Festo1__Egress_default();
	enseq_FSM_QualityGate__Motor_default();
	enseq___default();
	enseq_FSM_Festo1_Signaling_default();
	enseq_FSM_Festo2__Ingress_default();
	enseq_FSM_Festo2__HeightMeasurement_default();
	enseq_FSM_Festo2__Egress_default();
	enseq_FSM_Festo2__Motor_default();
	enseq_FSM_Festo2__Signaling_default();
	enseq_TEST_default();
	enseq_FSM_Festo1__Errors_default();
	enseq_Copy_1_FSM_Festo1__Sorting_default();
	enseq_FSM_Festo2__Errors_default();
	doCompletion = false;
	do
	{ 
		if (completed)
		{ 
			doCompletion = true;
		} 
		completed = false;
		microStep();
		doCompletion = false;
	} while (completed);
	isExecuting = false;
}

void FSM::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart FSM */
	exseq_FSM_Festo1_Ingress();
	stateConfVector[0] = FSM::State::NO_STATE;
	stateConfVectorPosition = 0;
	exseq_FSM_Festo1_HeightMeasurement();
	stateConfVector[1] = FSM::State::NO_STATE;
	stateConfVectorPosition = 1;
	exseq_FSM_Festo1__Sorting();
	stateConfVector[2] = FSM::State::NO_STATE;
	stateConfVectorPosition = 2;
	exseq_FSM_Festo1__Egress();
	stateConfVector[3] = FSM::State::NO_STATE;
	stateConfVectorPosition = 3;
	exseq_FSM_QualityGate__Motor();
	stateConfVector[4] = FSM::State::NO_STATE;
	stateConfVectorPosition = 4;
	exseq__();
	stateConfVector[5] = FSM::State::NO_STATE;
	stateConfVectorPosition = 5;
	exseq_FSM_Festo1_Signaling();
	stateConfVector[6] = FSM::State::NO_STATE;
	stateConfVector[7] = FSM::State::NO_STATE;
	stateConfVector[8] = FSM::State::NO_STATE;
	stateConfVectorPosition = 8;
	exseq_FSM_Festo2__Ingress();
	stateConfVector[9] = FSM::State::NO_STATE;
	stateConfVectorPosition = 9;
	exseq_FSM_Festo2__HeightMeasurement();
	stateConfVector[10] = FSM::State::NO_STATE;
	stateConfVectorPosition = 10;
	exseq_FSM_Festo2__Egress();
	stateConfVector[11] = FSM::State::NO_STATE;
	stateConfVectorPosition = 11;
	exseq_FSM_Festo2__Motor();
	stateConfVector[12] = FSM::State::NO_STATE;
	stateConfVectorPosition = 12;
	exseq_FSM_Festo2__Signaling();
	stateConfVector[13] = FSM::State::NO_STATE;
	stateConfVector[14] = FSM::State::NO_STATE;
	stateConfVector[15] = FSM::State::NO_STATE;
	stateConfVectorPosition = 15;
	exseq_TEST();
	stateConfVector[16] = FSM::State::NO_STATE;
	stateConfVectorPosition = 16;
	exseq_FSM_Festo1__Errors();
	stateConfVector[17] = FSM::State::NO_STATE;
	stateConfVectorPosition = 17;
	exseq_Copy_1_FSM_Festo1__Sorting();
	stateConfVector[18] = FSM::State::NO_STATE;
	stateConfVectorPosition = 18;
	exseq_FSM_Festo2__Errors();
	stateConfVector[19] = FSM::State::NO_STATE;
	stateConfVectorPosition = 19;
	isExecuting = false;
}

/* Can be used by the client code to trigger a run to completion step without raising an event. */
void FSM::triggerWithoutEvent() {
	runCycle();
}


