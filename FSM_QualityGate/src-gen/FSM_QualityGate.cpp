/** Generated by itemis CREATE code generator. */

#include "FSM_QualityGate.h"

/*! \file
Implementation of the state machine 'FSM_QualityGate'
*/




FSM_QualityGate::FSM_QualityGate() noexcept
{
	for (sc::ushort state_vec_pos = 0; state_vec_pos < maxOrthogonalStates; ++state_vec_pos)
		stateConfVector[state_vec_pos] = FSM_QualityGate::State::NO_STATE;
	
	for (sc::ushort state_vec_pos = 0; state_vec_pos < maxHistoryStates; ++state_vec_pos)
		historyVector[state_vec_pos] = FSM_QualityGate::State::NO_STATE;
	
	clearInEvents();
	clearInternalEvents();
}

FSM_QualityGate::~FSM_QualityGate()
{
	while (!internalEventQueue.empty()) {
		auto nextEvent{internalEventQueue.front()};
		internalEventQueue.pop_front();
		delete nextEvent;
	}
	while (!incomingEventQueue.empty()) {
		auto nextEvent{incomingEventQueue.front()};
		incomingEventQueue.pop_front();
		delete nextEvent;
	}
}



FSM_QualityGate::EventInstance* FSM_QualityGate::getNextEvent() noexcept
{
	FSM_QualityGate::EventInstance* nextEvent = 0;

	if(!internalEventQueue.empty()) {
		nextEvent = internalEventQueue.front();
		internalEventQueue.pop_front();
	}
	else if(!incomingEventQueue.empty()) {
		nextEvent = incomingEventQueue.front();
		incomingEventQueue.pop_front();
	}
	
	return nextEvent;
	
}					


	
bool FSM_QualityGate::dispatchEvent(FSM_QualityGate::EventInstance* event) noexcept
{
	if(event == nullptr) {
		return false;
	}
								
	switch(event->eventId)
	{
		case FSM_QualityGate::Event::ESTOP_TOGGLED:
		{
			ESTOP_TOGGLED_raised = true;
			break;
		}
		case FSM_QualityGate::Event::ESTOP_CLEARED:
		{
			ESTOP_CLEARED_raised = true;
			break;
		}
		case FSM_QualityGate::Event::ESTOP_Received:
		{
			ESTOP_Received_raised = true;
			break;
		}
		case FSM_QualityGate::Event::LBF_1_INTERRUPTED:
		{
			LBF_1_INTERRUPTED_raised = true;
			break;
		}
		case FSM_QualityGate::Event::LBF_1_OPEN:
		{
			LBF_1_OPEN_raised = true;
			break;
		}
		case FSM_QualityGate::Event::PUK_ENTRY_HeightMeasurement:
		{
			PUK_ENTRY_HeightMeasurement_raised = true;
			break;
		}
		case FSM_QualityGate::Event::HS_1_OPEN:
		{
			HS_1_OPEN_raised = true;
			break;
		}
		case FSM_QualityGate::Event::HS_1_INTERRUPTED:
		{
			HS_1_INTERRUPTED_raised = true;
			break;
		}
		case FSM_QualityGate::Event::PUK_ENTRY_SORTING:
		{
			PUK_ENTRY_SORTING_raised = true;
			break;
		}
		case FSM_QualityGate::Event::LBM_1_INTERRUPTED:
		{
			LBM_1_INTERRUPTED_raised = true;
			break;
		}
		case FSM_QualityGate::Event::BGR_1_INTERRUPTED:
		{
			BGR_1_INTERRUPTED_raised = true;
			break;
		}
		case FSM_QualityGate::Event::PUK_DESIRED:
		{
			PUK_DESIRED_raised = true;
			break;
		}
		case FSM_QualityGate::Event::PUK_NOT_DESIRED:
		{
			PUK_NOT_DESIRED_raised = true;
			break;
		}
		case FSM_QualityGate::Event::PUK_EJECTOR_DISTANCE_VALID:
		{
			PUK_EJECTOR_DISTANCE_VALID_raised = true;
			break;
		}
		case FSM_QualityGate::Event::LBE_1_OPEN:
		{
			LBE_1_OPEN_raised = true;
			break;
		}
		case FSM_QualityGate::Event::LBE_1_INTERRUPTED:
		{
			LBE_1_INTERRUPTED_raised = true;
			break;
		}
		case FSM_QualityGate::Event::LBR_1_INTERRUPTED:
		{
			LBR_1_INTERRUPTED_raised = true;
			break;
		}
		case FSM_QualityGate::Event::MOTOR_STOP:
		{
			MOTOR_STOP_raised = true;
			break;
		}
		case FSM_QualityGate::Event::MOTOR_STOP_RESET:
		{
			MOTOR_STOP_RESET_raised = true;
			break;
		}
		case FSM_QualityGate::Event::MOTOR_SLOW:
		{
			MOTOR_SLOW_raised = true;
			break;
		}
		case FSM_QualityGate::Event::MOTOR_SLOW_RESET:
		{
			MOTOR_SLOW_RESET_raised = true;
			break;
		}
		case FSM_QualityGate::Event::MOTOR_FORWARD:
		{
			MOTOR_FORWARD_raised = true;
			break;
		}
		case FSM_QualityGate::Event::MOTOR_FORWARD_RESET:
		{
			MOTOR_FORWARD_RESET_raised = true;
			break;
		}
		case FSM_QualityGate::Event::LampEStop:
		{
			LampEStop_raised = true;
			break;
		}
		case FSM_QualityGate::Event::Lamp:
		{
			Lamp_raised = true;
			break;
		}
		case FSM_QualityGate::Event::BGS_1_INTERRUPTED:
		{
			BGS_1_INTERRUPTED_raised = true;
			break;
		}
		case FSM_QualityGate::Event::BRS_1_INTERRUPTED:
		{
			BRS_1_INTERRUPTED_raised = true;
			break;
		}
		case FSM_QualityGate::Event::ESTOP_SIGNAL:
		{
			ESTOP_SIGNAL_raised = true;
			break;
		}
		case FSM_QualityGate::Event::ESTOP_SIGNAL_RESET:
		{
			ESTOP_SIGNAL_RESET_raised = true;
			break;
		}
		case FSM_QualityGate::Event::RUNNING_SIGNAL:
		{
			RUNNING_SIGNAL_raised = true;
			break;
		}
		case FSM_QualityGate::Event::RUNNING_SIGNAL_RESET:
		{
			RUNNING_SIGNAL_RESET_raised = true;
			break;
		}
		case FSM_QualityGate::Event::WARNING_SIGNAL:
		{
			WARNING_SIGNAL_raised = true;
			break;
		}
		case FSM_QualityGate::Event::WARNING_SIGNAL_RESET:
		{
			WARNING_SIGNAL_RESET_raised = true;
			break;
		}
		case FSM_QualityGate::Event::READY_SIGNAL:
		{
			READY_SIGNAL_raised = true;
			break;
		}
		case FSM_QualityGate::Event::READY_RESET:
		{
			READY_RESET_raised = true;
			break;
		}
		case FSM_QualityGate::Event::ERROR_SIGNAL:
		{
			ERROR_SIGNAL_raised = true;
			break;
		}
		case FSM_QualityGate::Event::Internal_local_SYSTEM_STOPPED:
		{
			local_SYSTEM_STOPPED_raised = true;
			break;
		}
		case FSM_QualityGate::Event::Internal_local_PUK_DISTANCE_VALID:
		{
			local_PUK_DISTANCE_VALID_raised = true;
			break;
		}
		case FSM_QualityGate::Event::Internal_local_SYSTEM_RUNNING:
		{
			local_SYSTEM_RUNNING_raised = true;
			break;
		}
		case FSM_QualityGate::Event::Internal_local_PUK_ENTRY_EGRESS:
		{
			local_PUK_ENTRY_EGRESS_raised = true;
			break;
		}
		case FSM_QualityGate::Event::Internal_local_LAMP_YELLOW_BLINKING_1_HZ:
		{
			local_LAMP_YELLOW_BLINKING_1_HZ_raised = true;
			break;
		}
		case FSM_QualityGate::Event::Internal_local_LAMP_YELLOW_BLINKING_1_HZ_RESET:
		{
			local_LAMP_YELLOW_BLINKING_1_HZ_RESET_raised = true;
			break;
		}
		
		
		default:
			//pointer got out of scope
			delete event;
			return false;
	}
	//pointer got out of scope
	delete event;
	return true;
}


/*! Raises the in event 'ESTOP_TOGGLED' of default interface scope. */
void FSM_QualityGate::raiseESTOP_TOGGLED() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::ESTOP_TOGGLED))
	;
	runCycle();
}


/*! Raises the in event 'ESTOP_CLEARED' of default interface scope. */
void FSM_QualityGate::raiseESTOP_CLEARED() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::ESTOP_CLEARED))
	;
	runCycle();
}


/*! Raises the in event 'ESTOP_Received' of default interface scope. */
void FSM_QualityGate::raiseESTOP_Received() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::ESTOP_Received))
	;
	runCycle();
}


/*! Raises the in event 'LBF_1_INTERRUPTED' of default interface scope. */
void FSM_QualityGate::raiseLBF_1_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::LBF_1_INTERRUPTED))
	;
	runCycle();
}


/*! Raises the in event 'LBF_1_OPEN' of default interface scope. */
void FSM_QualityGate::raiseLBF_1_OPEN() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::LBF_1_OPEN))
	;
	runCycle();
}


/*! Raises the in event 'PUK_ENTRY_HeightMeasurement' of default interface scope. */
void FSM_QualityGate::raisePUK_ENTRY_HeightMeasurement() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::PUK_ENTRY_HeightMeasurement))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM_QualityGate::getLAMP_YELLOW_BLINKING_1_HZ() noexcept {
	return this->LAMP_YELLOW_BLINKING_1_HZ_observable;
}


sc::rx::Observable<void>& FSM_QualityGate::getLAMP_YELLOW_BLINKING_1_HZ_RESET() noexcept {
	return this->LAMP_YELLOW_BLINKING_1_HZ_RESET_observable;
}


/*! Raises the in event 'HS_1_OPEN' of default interface scope. */
void FSM_QualityGate::raiseHS_1_OPEN() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::HS_1_OPEN))
	;
	runCycle();
}


/*! Raises the in event 'HS_1_INTERRUPTED' of default interface scope. */
void FSM_QualityGate::raiseHS_1_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::HS_1_INTERRUPTED))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM_QualityGate::getPUK_DISTANCE_VALID() noexcept {
	return this->PUK_DISTANCE_VALID_observable;
}


/*! Raises the in event 'PUK_ENTRY_SORTING' of default interface scope. */
void FSM_QualityGate::raisePUK_ENTRY_SORTING() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::PUK_ENTRY_SORTING))
	;
	runCycle();
}


/*! Raises the in event 'LBM_1_INTERRUPTED' of default interface scope. */
void FSM_QualityGate::raiseLBM_1_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::LBM_1_INTERRUPTED))
	;
	runCycle();
}


/*! Raises the in event 'BGR_1_INTERRUPTED' of default interface scope. */
void FSM_QualityGate::raiseBGR_1_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::BGR_1_INTERRUPTED))
	;
	runCycle();
}


/*! Raises the in event 'PUK_DESIRED' of default interface scope. */
void FSM_QualityGate::raisePUK_DESIRED() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::PUK_DESIRED))
	;
	runCycle();
}


/*! Raises the in event 'PUK_NOT_DESIRED' of default interface scope. */
void FSM_QualityGate::raisePUK_NOT_DESIRED() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::PUK_NOT_DESIRED))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM_QualityGate::getPUK_ENTRY_EGRESS() noexcept {
	return this->PUK_ENTRY_EGRESS_observable;
}


/*! Raises the in event 'PUK_EJECTOR_DISTANCE_VALID' of default interface scope. */
void FSM_QualityGate::raisePUK_EJECTOR_DISTANCE_VALID() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::PUK_EJECTOR_DISTANCE_VALID))
	;
	runCycle();
}


/*! Raises the in event 'LBE_1_OPEN' of default interface scope. */
void FSM_QualityGate::raiseLBE_1_OPEN() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::LBE_1_OPEN))
	;
	runCycle();
}


/*! Raises the in event 'LBE_1_INTERRUPTED' of default interface scope. */
void FSM_QualityGate::raiseLBE_1_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::LBE_1_INTERRUPTED))
	;
	runCycle();
}


/*! Raises the in event 'LBR_1_INTERRUPTED' of default interface scope. */
void FSM_QualityGate::raiseLBR_1_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::LBR_1_INTERRUPTED))
	;
	runCycle();
}


/*! Raises the in event 'MOTOR_STOP' of default interface scope. */
void FSM_QualityGate::raiseMOTOR_STOP() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_STOP))
	;
	runCycle();
}


/*! Raises the in event 'MOTOR_STOP_RESET' of default interface scope. */
void FSM_QualityGate::raiseMOTOR_STOP_RESET() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_STOP_RESET))
	;
	runCycle();
}


/*! Raises the in event 'MOTOR_SLOW' of default interface scope. */
void FSM_QualityGate::raiseMOTOR_SLOW() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_SLOW))
	;
	runCycle();
}


/*! Raises the in event 'MOTOR_SLOW_RESET' of default interface scope. */
void FSM_QualityGate::raiseMOTOR_SLOW_RESET() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_SLOW_RESET))
	;
	runCycle();
}


/*! Raises the in event 'MOTOR_FORWARD' of default interface scope. */
void FSM_QualityGate::raiseMOTOR_FORWARD() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_FORWARD))
	;
	runCycle();
}


/*! Raises the in event 'MOTOR_FORWARD_RESET' of default interface scope. */
void FSM_QualityGate::raiseMOTOR_FORWARD_RESET() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_FORWARD_RESET))
	;
	runCycle();
}


/*! Raises the in event 'LampEStop' of default interface scope. */
void FSM_QualityGate::raiseLampEStop() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::LampEStop))
	;
	runCycle();
}


/*! Raises the in event 'Lamp' of default interface scope. */
void FSM_QualityGate::raiseLamp() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::Lamp))
	;
	runCycle();
}


/*! Raises the in event 'BGS_1_INTERRUPTED' of default interface scope. */
void FSM_QualityGate::raiseBGS_1_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::BGS_1_INTERRUPTED))
	;
	runCycle();
}


/*! Raises the in event 'BRS_1_INTERRUPTED' of default interface scope. */
void FSM_QualityGate::raiseBRS_1_INTERRUPTED() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::BRS_1_INTERRUPTED))
	;
	runCycle();
}


sc::rx::Observable<void>& FSM_QualityGate::getSYSTEM_RUNNING() noexcept {
	return this->SYSTEM_RUNNING_observable;
}


sc::rx::Observable<void>& FSM_QualityGate::getSYSTEM_STOPPED() noexcept {
	return this->SYSTEM_STOPPED_observable;
}


/*! Raises the in event 'ESTOP_SIGNAL' of default interface scope. */
void FSM_QualityGate::raiseESTOP_SIGNAL() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::ESTOP_SIGNAL))
	;
	runCycle();
}


/*! Raises the in event 'ESTOP_SIGNAL_RESET' of default interface scope. */
void FSM_QualityGate::raiseESTOP_SIGNAL_RESET() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::ESTOP_SIGNAL_RESET))
	;
	runCycle();
}


/*! Raises the in event 'RUNNING_SIGNAL' of default interface scope. */
void FSM_QualityGate::raiseRUNNING_SIGNAL() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::RUNNING_SIGNAL))
	;
	runCycle();
}


/*! Raises the in event 'RUNNING_SIGNAL_RESET' of default interface scope. */
void FSM_QualityGate::raiseRUNNING_SIGNAL_RESET() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::RUNNING_SIGNAL_RESET))
	;
	runCycle();
}


/*! Raises the in event 'WARNING_SIGNAL' of default interface scope. */
void FSM_QualityGate::raiseWARNING_SIGNAL() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::WARNING_SIGNAL))
	;
	runCycle();
}


/*! Raises the in event 'WARNING_SIGNAL_RESET' of default interface scope. */
void FSM_QualityGate::raiseWARNING_SIGNAL_RESET() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::WARNING_SIGNAL_RESET))
	;
	runCycle();
}


/*! Raises the in event 'READY_SIGNAL' of default interface scope. */
void FSM_QualityGate::raiseREADY_SIGNAL() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::READY_SIGNAL))
	;
	runCycle();
}


/*! Raises the in event 'READY_RESET' of default interface scope. */
void FSM_QualityGate::raiseREADY_RESET() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::READY_RESET))
	;
	runCycle();
}


/*! Raises the in event 'ERROR_SIGNAL' of default interface scope. */
void FSM_QualityGate::raiseERROR_SIGNAL() {
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::ERROR_SIGNAL))
	;
	runCycle();
}


void FSM_QualityGate::raiseLocal_SYSTEM_STOPPED() {
	internalEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::Internal_local_SYSTEM_STOPPED))
	;
}


void FSM_QualityGate::raiseLocal_PUK_DISTANCE_VALID() {
	internalEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::Internal_local_PUK_DISTANCE_VALID))
	;
}


void FSM_QualityGate::raiseLocal_SYSTEM_RUNNING() {
	internalEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::Internal_local_SYSTEM_RUNNING))
	;
}


void FSM_QualityGate::raiseLocal_PUK_ENTRY_EGRESS() {
	internalEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::Internal_local_PUK_ENTRY_EGRESS))
	;
}


void FSM_QualityGate::raiseLocal_LAMP_YELLOW_BLINKING_1_HZ() {
	internalEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::Internal_local_LAMP_YELLOW_BLINKING_1_HZ))
	;
}


void FSM_QualityGate::raiseLocal_LAMP_YELLOW_BLINKING_1_HZ_RESET() {
	internalEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::Internal_local_LAMP_YELLOW_BLINKING_1_HZ_RESET))
	;
}



bool FSM_QualityGate::isActive() const noexcept
{
	return stateConfVector[0] != FSM_QualityGate::State::NO_STATE||stateConfVector[1] != FSM_QualityGate::State::NO_STATE||stateConfVector[2] != FSM_QualityGate::State::NO_STATE||stateConfVector[3] != FSM_QualityGate::State::NO_STATE||stateConfVector[4] != FSM_QualityGate::State::NO_STATE||stateConfVector[5] != FSM_QualityGate::State::NO_STATE||stateConfVector[6] != FSM_QualityGate::State::NO_STATE||stateConfVector[7] != FSM_QualityGate::State::NO_STATE||stateConfVector[8] != FSM_QualityGate::State::NO_STATE;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
bool FSM_QualityGate::isFinal() const noexcept
{
	   return false;
}

bool FSM_QualityGate::check() const noexcept{
	return true;
}


bool FSM_QualityGate::isStateActive(State state) const noexcept
{
	switch (state)
	{
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress :
		{
			return  (stateConfVector[scvi_FSM_QualityGate_Ingress_Ingress] >= FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress && stateConfVector[scvi_FSM_QualityGate_Ingress_Ingress] <= FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_Idle :
		{
			return  (stateConfVector[scvi_FSM_QualityGate_Ingress_Ingress_Ingress_Idle] == FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_Idle);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent :
		{
			return  (stateConfVector[scvi_FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent] == FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance :
		{
			return  (stateConfVector[scvi_FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance] == FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_EStop :
		{
			return  (stateConfVector[scvi_FSM_QualityGate_Ingress_EStop] == FSM_QualityGate::State::FSM_QualityGate_Ingress_EStop);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_SystemStopped :
		{
			return  (stateConfVector[scvi_FSM_QualityGate_Ingress_SystemStopped] == FSM_QualityGate::State::FSM_QualityGate_Ingress_SystemStopped);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_SystemIdle :
		{
			return  (stateConfVector[scvi_FSM_QualityGate_Ingress_SystemIdle] == FSM_QualityGate::State::FSM_QualityGate_Ingress_SystemIdle);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__HeightMeasurement_HeightMeasurement] >= FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement && stateConfVector[scvi_FSM_QualityGate__HeightMeasurement_HeightMeasurement] <= FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle] == FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring] == FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent] == FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_EStop :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__HeightMeasurement_EStop] == FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_EStop);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_SystemStopped :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__HeightMeasurement_SystemStopped] == FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_SystemStopped);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_SystemIdle :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__HeightMeasurement_SystemIdle] == FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_SystemIdle);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Sorting_Sorting] >= FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting && stateConfVector[scvi_FSM_QualityGate__Sorting_Sorting] <= FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Idle :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Sorting_Sorting_Sorting_Idle] == FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Idle);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement] == FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting] == FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough] == FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent] == FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_RampFull :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Sorting_RampFull] == FSM_QualityGate::State::FSM_QualityGate__Sorting_RampFull);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_EStop :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Sorting_EStop] == FSM_QualityGate::State::FSM_QualityGate__Sorting_EStop);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_SystemIdle :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Sorting_SystemIdle] == FSM_QualityGate::State::FSM_QualityGate__Sorting_SystemIdle);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_SystemStopped :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Sorting_SystemStopped] == FSM_QualityGate::State::FSM_QualityGate__Sorting_SystemStopped);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Egress_Egress :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Egress_Egress] >= FSM_QualityGate::State::FSM_QualityGate__Egress_Egress && stateConfVector[scvi_FSM_QualityGate__Egress_Egress] <= FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_Transfer);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_IDLE :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Egress_Egress_Egress_IDLE] == FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_IDLE);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_PukPresent :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Egress_Egress_Egress_PukPresent] == FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_PukPresent);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_Transfer :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Egress_Egress_Egress_Transfer] == FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_Transfer);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Egress_SystemStopped :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Egress_SystemStopped] == FSM_QualityGate::State::FSM_QualityGate__Egress_SystemStopped);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Egress_EStop :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Egress_EStop] == FSM_QualityGate::State::FSM_QualityGate__Egress_EStop);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Egress_SystemIdle :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Egress_SystemIdle] == FSM_QualityGate::State::FSM_QualityGate__Egress_SystemIdle);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Motor_SystemMotor] >= FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor && stateConfVector[scvi_FSM_QualityGate__Motor_SystemMotor] <= FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle] == FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward] == FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow] == FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop :
		{
			return  (stateConfVector[scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop] == FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop);
			break;
		}
		case FSM_QualityGate::State::FSM_System_Operational :
		{
			return  (stateConfVector[scvi_FSM_System_Operational] >= FSM_QualityGate::State::FSM_System_Operational && stateConfVector[scvi_FSM_System_Operational] <= FSM_QualityGate::State::FSM_System_Operational_FSM_Operational_Running);
			break;
		}
		case FSM_QualityGate::State::FSM_System_Operational_FSM_Operational_Ready :
		{
			return  (stateConfVector[scvi_FSM_System_Operational_FSM_Operational_Ready] == FSM_QualityGate::State::FSM_System_Operational_FSM_Operational_Ready);
			break;
		}
		case FSM_QualityGate::State::FSM_System_Operational_FSM_Operational_Running :
		{
			return  (stateConfVector[scvi_FSM_System_Operational_FSM_Operational_Running] == FSM_QualityGate::State::FSM_System_Operational_FSM_Operational_Running);
			break;
		}
		case FSM_QualityGate::State::FSM_System_EStop :
		{
			return  (stateConfVector[scvi_FSM_System_EStop] == FSM_QualityGate::State::FSM_System_EStop);
			break;
		}
		case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP :
		{
			return  (stateConfVector[scvi_FSM_Signaling_FSM_LAMP] >= FSM_QualityGate::State::FSM_Signaling_FSM_LAMP && stateConfVector[scvi_FSM_Signaling_FSM_LAMP] <= FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant);
			break;
		}
		case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp :
		{
			return  (stateConfVector[scvi_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp] >= FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp && stateConfVector[scvi_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp] <= FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant);
			break;
		}
		case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off :
		{
			return  (stateConfVector[scvi_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off] == FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off);
			break;
		}
		case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant :
		{
			return  (stateConfVector[scvi_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant] == FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant);
			break;
		}
		case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off :
		{
			return  (stateConfVector[scvi_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off] == FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off);
			break;
		}
		case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant :
		{
			return  (stateConfVector[scvi_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant] == FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant);
			break;
		}
		case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz :
		{
			return  (stateConfVector[scvi_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz] == FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz);
			break;
		}
		case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off :
		{
			return  (stateConfVector[scvi_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off] == FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off);
			break;
		}
		case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant :
		{
			return  (stateConfVector[scvi_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant] == FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant);
			break;
		}
		default:
		{
			/* State is not active*/
			return false;
			break;
		}
	}
}

bool FSM_QualityGate::getEStopFST_1_Toggle() const noexcept
{
	return EStopFST_1_Toggle
	;
}

void FSM_QualityGate::setEStopFST_1_Toggle(bool EStopFST_1_Toggle_) noexcept
{
	this->EStopFST_1_Toggle = EStopFST_1_Toggle_;
}
bool FSM_QualityGate::getFST1RampFull() const noexcept
{
	return FST1RampFull
	;
}

void FSM_QualityGate::setFST1RampFull(bool FST1RampFull_) noexcept
{
	this->FST1RampFull = FST1RampFull_;
}
sc::integer FSM_QualityGate::getTimePassed() const noexcept
{
	return timePassed
	;
}

void FSM_QualityGate::setTimePassed(sc::integer timePassed_) noexcept
{
	this->timePassed = timePassed_;
}
sc::integer FSM_QualityGate::getMotorStop() const noexcept
{
	return motorStop
	;
}

void FSM_QualityGate::setMotorStop(sc::integer motorStop_) noexcept
{
	this->motorStop = motorStop_;
}
sc::integer FSM_QualityGate::getMotorSlow() const noexcept
{
	return motorSlow
	;
}

void FSM_QualityGate::setMotorSlow(sc::integer motorSlow_) noexcept
{
	this->motorSlow = motorSlow_;
}
sc::integer FSM_QualityGate::getMotorForward() const noexcept
{
	return motorForward
	;
}

void FSM_QualityGate::setMotorForward(sc::integer motorForward_) noexcept
{
	this->motorForward = motorForward_;
}
bool FSM_QualityGate::getEStop_lamp_active() const noexcept
{
	return eStop_lamp_active
	;
}

void FSM_QualityGate::setEStop_lamp_active(bool eStop_lamp_active_) noexcept
{
	this->eStop_lamp_active = eStop_lamp_active_;
}
bool FSM_QualityGate::getRunning_lamp_active() const noexcept
{
	return running_lamp_active
	;
}

void FSM_QualityGate::setRunning_lamp_active(bool running_lamp_active_) noexcept
{
	this->running_lamp_active = running_lamp_active_;
}
bool FSM_QualityGate::getWarning_lamp_active() const noexcept
{
	return warning_lamp_active
	;
}

void FSM_QualityGate::setWarning_lamp_active(bool warning_lamp_active_) noexcept
{
	this->warning_lamp_active = warning_lamp_active_;
}

// implementations of all internal functions
/* Entry action for state 'Idle'. */
void FSM_QualityGate::enact_FSM_QualityGate_Ingress_Ingress_Ingress_Idle()
{
	/* Entry action for state 'Idle'. */
	LAMP_YELLOW_BLINKING_1_HZ_RESET_observable.next();
	raiseLocal_LAMP_YELLOW_BLINKING_1_HZ_RESET();
}

/* Entry action for state 'PukPresent'. */
void FSM_QualityGate::enact_FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent()
{
	/* Entry action for state 'PukPresent'. */
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_FORWARD))
	;
}

/* Entry action for state 'Measuring'. */
void FSM_QualityGate::enact_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring()
{
	/* Entry action for state 'Measuring'. */
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_SLOW))
	;
}

/* Entry action for state 'PukPresent'. */
void FSM_QualityGate::enact_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent()
{
	/* Entry action for state 'PukPresent'. */
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_FORWARD))
	;
}

/* Entry action for state 'PUkPresent'. */
void FSM_QualityGate::enact_FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent()
{
	/* Entry action for state 'PUkPresent'. */
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_FORWARD))
	;
}

/* Entry action for state 'RampFull'. */
void FSM_QualityGate::enact_FSM_QualityGate__Sorting_RampFull()
{
	/* Entry action for state 'RampFull'. */
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_STOP))
	;
}

/* Entry action for state 'PukPresent'. */
void FSM_QualityGate::enact_FSM_QualityGate__Egress_Egress_Egress_PukPresent()
{
	/* Entry action for state 'PukPresent'. */
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_FORWARD))
	;
}

/* Entry action for state 'Transfer'. */
void FSM_QualityGate::enact_FSM_QualityGate__Egress_Egress_Egress_Transfer()
{
	/* Entry action for state 'Transfer'. */
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_STOP))
	;
}

/* Entry action for state 'Running'. */
void FSM_QualityGate::enact_FSM_System_Operational_FSM_Operational_Running()
{
	/* Entry action for state 'Running'. */
	SYSTEM_RUNNING_observable.next();
	raiseLocal_SYSTEM_RUNNING();
}

/* Entry action for state 'EStop'. */
void FSM_QualityGate::enact_FSM_System_EStop()
{
	/* Entry action for state 'EStop'. */
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_STOP))
	;
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::ESTOP_Received))
	;
}

/* Exit action for state 'Idle'. */
void FSM_QualityGate::exact_FSM_QualityGate_Ingress_Ingress_Ingress_Idle()
{
	/* Exit action for state 'Idle'. */
	LAMP_YELLOW_BLINKING_1_HZ_observable.next();
	raiseLocal_LAMP_YELLOW_BLINKING_1_HZ();
}

/* Exit action for state 'CreatingDistance'. */
void FSM_QualityGate::exact_FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance()
{
	/* Exit action for state 'CreatingDistance'. */
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_FORWARD_RESET))
	;
}

/* Exit action for state 'Measuring'. */
void FSM_QualityGate::exact_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring()
{
	/* Exit action for state 'Measuring'. */
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_SLOW_RESET))
	;
}

/* Exit action for state 'PukPresent'. */
void FSM_QualityGate::exact_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent()
{
	/* Exit action for state 'PukPresent'. */
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_FORWARD_RESET))
	;
}

/* Exit action for state 'RampFull'. */
void FSM_QualityGate::exact_FSM_QualityGate__Sorting_RampFull()
{
	/* Exit action for state 'RampFull'. */
	setFST1RampFull(false);
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_STOP_RESET))
	;
}

/* Exit action for state 'PukPresent'. */
void FSM_QualityGate::exact_FSM_QualityGate__Egress_Egress_Egress_PukPresent()
{
	/* Exit action for state 'PukPresent'. */
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_FORWARD_RESET))
	;
}

/* Exit action for state 'Transfer'. */
void FSM_QualityGate::exact_FSM_QualityGate__Egress_Egress_Egress_Transfer()
{
	/* Exit action for state 'Transfer'. */
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_STOP_RESET))
	;
}

/* Exit action for state 'Running'. */
void FSM_QualityGate::exact_FSM_System_Operational_FSM_Operational_Running()
{
	/* Exit action for state 'Running'. */
	SYSTEM_STOPPED_observable.next();
	raiseLocal_SYSTEM_STOPPED();
}

/* Exit action for state 'EStop'. */
void FSM_QualityGate::exact_FSM_System_EStop()
{
	/* Exit action for state 'EStop'. */
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::MOTOR_STOP_RESET))
	;
	incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::ESTOP_CLEARED))
	;
}

/* 'default' enter sequence for state Ingress */
void FSM_QualityGate::enseq_FSM_QualityGate_Ingress_Ingress_default()
{
	/* 'default' enter sequence for state Ingress */
	enseq_FSM_QualityGate_Ingress_Ingress_Ingress_default();
}

/* 'default' enter sequence for state Idle */
void FSM_QualityGate::enseq_FSM_QualityGate_Ingress_Ingress_Ingress_Idle_default()
{
	/* 'default' enter sequence for state Idle */
	enact_FSM_QualityGate_Ingress_Ingress_Ingress_Idle();
	stateConfVector[0] = FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_Idle;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state PukPresent */
void FSM_QualityGate::enseq_FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent_default()
{
	/* 'default' enter sequence for state PukPresent */
	enact_FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent();
	stateConfVector[0] = FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state CreatingDistance */
void FSM_QualityGate::enseq_FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance_default()
{
	/* 'default' enter sequence for state CreatingDistance */
	stateConfVector[0] = FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state EStop */
void FSM_QualityGate::enseq_FSM_QualityGate_Ingress_EStop_default()
{
	/* 'default' enter sequence for state EStop */
	stateConfVector[0] = FSM_QualityGate::State::FSM_QualityGate_Ingress_EStop;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state SystemStopped */
void FSM_QualityGate::enseq_FSM_QualityGate_Ingress_SystemStopped_default()
{
	/* 'default' enter sequence for state SystemStopped */
	stateConfVector[0] = FSM_QualityGate::State::FSM_QualityGate_Ingress_SystemStopped;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state SystemIdle */
void FSM_QualityGate::enseq_FSM_QualityGate_Ingress_SystemIdle_default()
{
	/* 'default' enter sequence for state SystemIdle */
	stateConfVector[0] = FSM_QualityGate::State::FSM_QualityGate_Ingress_SystemIdle;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state HeightMeasurement */
void FSM_QualityGate::enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_default()
{
	/* 'default' enter sequence for state HeightMeasurement */
	enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_default();
}

/* 'default' enter sequence for state Idle */
void FSM_QualityGate::enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle_default()
{
	/* 'default' enter sequence for state Idle */
	stateConfVector[1] = FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state Measuring */
void FSM_QualityGate::enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring_default()
{
	/* 'default' enter sequence for state Measuring */
	enact_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring();
	stateConfVector[1] = FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state PukPresent */
void FSM_QualityGate::enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent_default()
{
	/* 'default' enter sequence for state PukPresent */
	enact_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent();
	stateConfVector[1] = FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state EStop */
void FSM_QualityGate::enseq_FSM_QualityGate__HeightMeasurement_EStop_default()
{
	/* 'default' enter sequence for state EStop */
	stateConfVector[1] = FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_EStop;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state SystemStopped */
void FSM_QualityGate::enseq_FSM_QualityGate__HeightMeasurement_SystemStopped_default()
{
	/* 'default' enter sequence for state SystemStopped */
	stateConfVector[1] = FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_SystemStopped;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state SystemIdle */
void FSM_QualityGate::enseq_FSM_QualityGate__HeightMeasurement_SystemIdle_default()
{
	/* 'default' enter sequence for state SystemIdle */
	stateConfVector[1] = FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_SystemIdle;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state Sorting */
void FSM_QualityGate::enseq_FSM_QualityGate__Sorting_Sorting_default()
{
	/* 'default' enter sequence for state Sorting */
	enseq_FSM_QualityGate__Sorting_Sorting_Sorting_default();
}

/* 'default' enter sequence for state Idle */
void FSM_QualityGate::enseq_FSM_QualityGate__Sorting_Sorting_Sorting_Idle_default()
{
	/* 'default' enter sequence for state Idle */
	stateConfVector[2] = FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Idle;
	stateConfVectorPosition = 2;
}

/* 'default' enter sequence for state MetalMeasurement */
void FSM_QualityGate::enseq_FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement_default()
{
	/* 'default' enter sequence for state MetalMeasurement */
	stateConfVector[2] = FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement;
	stateConfVectorPosition = 2;
}

/* 'default' enter sequence for state Ejecting */
void FSM_QualityGate::enseq_FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting_default()
{
	/* 'default' enter sequence for state Ejecting */
	stateConfVector[2] = FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting;
	stateConfVectorPosition = 2;
}

/* 'default' enter sequence for state Passthrough */
void FSM_QualityGate::enseq_FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough_default()
{
	/* 'default' enter sequence for state Passthrough */
	stateConfVector[2] = FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough;
	stateConfVectorPosition = 2;
}

/* 'default' enter sequence for state PUkPresent */
void FSM_QualityGate::enseq_FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent_default()
{
	/* 'default' enter sequence for state PUkPresent */
	enact_FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent();
	stateConfVector[2] = FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent;
	stateConfVectorPosition = 2;
}

/* 'default' enter sequence for state RampFull */
void FSM_QualityGate::enseq_FSM_QualityGate__Sorting_RampFull_default()
{
	/* 'default' enter sequence for state RampFull */
	enact_FSM_QualityGate__Sorting_RampFull();
	stateConfVector[2] = FSM_QualityGate::State::FSM_QualityGate__Sorting_RampFull;
	stateConfVectorPosition = 2;
}

/* 'default' enter sequence for state EStop */
void FSM_QualityGate::enseq_FSM_QualityGate__Sorting_EStop_default()
{
	/* 'default' enter sequence for state EStop */
	stateConfVector[2] = FSM_QualityGate::State::FSM_QualityGate__Sorting_EStop;
	stateConfVectorPosition = 2;
}

/* 'default' enter sequence for state SystemIdle */
void FSM_QualityGate::enseq_FSM_QualityGate__Sorting_SystemIdle_default()
{
	/* 'default' enter sequence for state SystemIdle */
	stateConfVector[2] = FSM_QualityGate::State::FSM_QualityGate__Sorting_SystemIdle;
	stateConfVectorPosition = 2;
}

/* 'default' enter sequence for state SystemStopped */
void FSM_QualityGate::enseq_FSM_QualityGate__Sorting_SystemStopped_default()
{
	/* 'default' enter sequence for state SystemStopped */
	stateConfVector[2] = FSM_QualityGate::State::FSM_QualityGate__Sorting_SystemStopped;
	stateConfVectorPosition = 2;
}

/* 'default' enter sequence for state Egress */
void FSM_QualityGate::enseq_FSM_QualityGate__Egress_Egress_default()
{
	/* 'default' enter sequence for state Egress */
	enseq_FSM_QualityGate__Egress_Egress_Egress_default();
}

/* 'default' enter sequence for state IDLE */
void FSM_QualityGate::enseq_FSM_QualityGate__Egress_Egress_Egress_IDLE_default()
{
	/* 'default' enter sequence for state IDLE */
	stateConfVector[3] = FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_IDLE;
	stateConfVectorPosition = 3;
}

/* 'default' enter sequence for state PukPresent */
void FSM_QualityGate::enseq_FSM_QualityGate__Egress_Egress_Egress_PukPresent_default()
{
	/* 'default' enter sequence for state PukPresent */
	enact_FSM_QualityGate__Egress_Egress_Egress_PukPresent();
	stateConfVector[3] = FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_PukPresent;
	stateConfVectorPosition = 3;
}

/* 'default' enter sequence for state Transfer */
void FSM_QualityGate::enseq_FSM_QualityGate__Egress_Egress_Egress_Transfer_default()
{
	/* 'default' enter sequence for state Transfer */
	enact_FSM_QualityGate__Egress_Egress_Egress_Transfer();
	stateConfVector[3] = FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_Transfer;
	stateConfVectorPosition = 3;
}

/* 'default' enter sequence for state SystemStopped */
void FSM_QualityGate::enseq_FSM_QualityGate__Egress_SystemStopped_default()
{
	/* 'default' enter sequence for state SystemStopped */
	stateConfVector[3] = FSM_QualityGate::State::FSM_QualityGate__Egress_SystemStopped;
	stateConfVectorPosition = 3;
}

/* 'default' enter sequence for state EStop */
void FSM_QualityGate::enseq_FSM_QualityGate__Egress_EStop_default()
{
	/* 'default' enter sequence for state EStop */
	stateConfVector[3] = FSM_QualityGate::State::FSM_QualityGate__Egress_EStop;
	stateConfVectorPosition = 3;
}

/* 'default' enter sequence for state SystemIdle */
void FSM_QualityGate::enseq_FSM_QualityGate__Egress_SystemIdle_default()
{
	/* 'default' enter sequence for state SystemIdle */
	stateConfVector[3] = FSM_QualityGate::State::FSM_QualityGate__Egress_SystemIdle;
	stateConfVectorPosition = 3;
}

/* 'default' enter sequence for state SystemMotor */
void FSM_QualityGate::enseq_FSM_QualityGate__Motor_SystemMotor_default()
{
	/* 'default' enter sequence for state SystemMotor */
	enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_default();
}

/* 'default' enter sequence for state Idle */
void FSM_QualityGate::enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle_default()
{
	/* 'default' enter sequence for state Idle */
	stateConfVector[4] = FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle;
	stateConfVectorPosition = 4;
	historyVector[0] = stateConfVector[4];
}

/* 'default' enter sequence for state Forward */
void FSM_QualityGate::enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_default()
{
	/* 'default' enter sequence for state Forward */
	stateConfVector[4] = FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward;
	stateConfVectorPosition = 4;
	historyVector[0] = stateConfVector[4];
}

/* 'default' enter sequence for state Slow */
void FSM_QualityGate::enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_default()
{
	/* 'default' enter sequence for state Slow */
	stateConfVector[4] = FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow;
	stateConfVectorPosition = 4;
	historyVector[0] = stateConfVector[4];
}

/* 'default' enter sequence for state Stop */
void FSM_QualityGate::enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_default()
{
	/* 'default' enter sequence for state Stop */
	stateConfVector[4] = FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop;
	stateConfVectorPosition = 4;
	historyVector[0] = stateConfVector[4];
}

/* 'default' enter sequence for state Operational */
void FSM_QualityGate::enseq_FSM_System_Operational_default()
{
	/* 'default' enter sequence for state Operational */
	enseq_FSM_System_Operational_FSM_Operational_default();
}

/* 'default' enter sequence for state Ready */
void FSM_QualityGate::enseq_FSM_System_Operational_FSM_Operational_Ready_default()
{
	/* 'default' enter sequence for state Ready */
	stateConfVector[5] = FSM_QualityGate::State::FSM_System_Operational_FSM_Operational_Ready;
	stateConfVectorPosition = 5;
}

/* 'default' enter sequence for state Running */
void FSM_QualityGate::enseq_FSM_System_Operational_FSM_Operational_Running_default()
{
	/* 'default' enter sequence for state Running */
	enact_FSM_System_Operational_FSM_Operational_Running();
	stateConfVector[5] = FSM_QualityGate::State::FSM_System_Operational_FSM_Operational_Running;
	stateConfVectorPosition = 5;
}

/* 'default' enter sequence for state EStop */
void FSM_QualityGate::enseq_FSM_System_EStop_default()
{
	/* 'default' enter sequence for state EStop */
	enact_FSM_System_EStop();
	stateConfVector[5] = FSM_QualityGate::State::FSM_System_EStop;
	stateConfVectorPosition = 5;
}

/* 'default' enter sequence for state FSM_LAMP */
void FSM_QualityGate::enseq_FSM_Signaling_FSM_LAMP_default()
{
	/* 'default' enter sequence for state FSM_LAMP */
	enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_default();
}

/* 'default' enter sequence for state FSM_Lamp */
void FSM_QualityGate::enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_default()
{
	/* 'default' enter sequence for state FSM_Lamp */
	enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_default();
	enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_default();
	enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_default();
}

/* 'default' enter sequence for state Off */
void FSM_QualityGate::enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_default()
{
	/* 'default' enter sequence for state Off */
	stateConfVector[6] = FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off;
	stateConfVectorPosition = 6;
}

/* 'default' enter sequence for state Constant */
void FSM_QualityGate::enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_default()
{
	/* 'default' enter sequence for state Constant */
	stateConfVector[6] = FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant;
	stateConfVectorPosition = 6;
}

/* 'default' enter sequence for state Off */
void FSM_QualityGate::enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_default()
{
	/* 'default' enter sequence for state Off */
	stateConfVector[7] = FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off;
	stateConfVectorPosition = 7;
}

/* 'default' enter sequence for state Constant */
void FSM_QualityGate::enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_default()
{
	/* 'default' enter sequence for state Constant */
	stateConfVector[7] = FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant;
	stateConfVectorPosition = 7;
}

/* 'default' enter sequence for state Blinking 1 Hz */
void FSM_QualityGate::enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz_default()
{
	/* 'default' enter sequence for state Blinking 1 Hz */
	stateConfVector[7] = FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz;
	stateConfVectorPosition = 7;
}

/* 'default' enter sequence for state Off */
void FSM_QualityGate::enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_default()
{
	/* 'default' enter sequence for state Off */
	stateConfVector[8] = FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off;
	stateConfVectorPosition = 8;
}

/* 'default' enter sequence for state Constant */
void FSM_QualityGate::enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_default()
{
	/* 'default' enter sequence for state Constant */
	stateConfVector[8] = FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant;
	stateConfVectorPosition = 8;
}

/* 'default' enter sequence for region FSM_QualityGate:Ingress */
void FSM_QualityGate::enseq_FSM_QualityGate_Ingress_default()
{
	/* 'default' enter sequence for region FSM_QualityGate:Ingress */
	react_FSM_QualityGate_Ingress__entry_Default();
}

/* 'default' enter sequence for region Ingress */
void FSM_QualityGate::enseq_FSM_QualityGate_Ingress_Ingress_Ingress_default()
{
	/* 'default' enter sequence for region Ingress */
	react_FSM_QualityGate_Ingress_Ingress_Ingress__entry_Default();
}

/* 'default' enter sequence for region FSM_QualityGate: HeightMeasurement */
void FSM_QualityGate::enseq_FSM_QualityGate__HeightMeasurement_default()
{
	/* 'default' enter sequence for region FSM_QualityGate: HeightMeasurement */
	react_FSM_QualityGate__HeightMeasurement__entry_Default();
}

/* 'default' enter sequence for region HeightMeasurement */
void FSM_QualityGate::enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_default()
{
	/* 'default' enter sequence for region HeightMeasurement */
	react_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement__entry_Default();
}

/* 'default' enter sequence for region FSM_QualityGate: Sorting */
void FSM_QualityGate::enseq_FSM_QualityGate__Sorting_default()
{
	/* 'default' enter sequence for region FSM_QualityGate: Sorting */
	react_FSM_QualityGate__Sorting__entry_Default();
}

/* 'default' enter sequence for region Sorting */
void FSM_QualityGate::enseq_FSM_QualityGate__Sorting_Sorting_Sorting_default()
{
	/* 'default' enter sequence for region Sorting */
	react_FSM_QualityGate__Sorting_Sorting_Sorting__entry_Default();
}

/* 'default' enter sequence for region FSM_QualityGate: Egress */
void FSM_QualityGate::enseq_FSM_QualityGate__Egress_default()
{
	/* 'default' enter sequence for region FSM_QualityGate: Egress */
	react_FSM_QualityGate__Egress__entry_Default();
}

/* 'default' enter sequence for region Egress */
void FSM_QualityGate::enseq_FSM_QualityGate__Egress_Egress_Egress_default()
{
	/* 'default' enter sequence for region Egress */
	react_FSM_QualityGate__Egress_Egress_Egress__entry_Default();
}

/* 'default' enter sequence for region FSM_QualityGate: Motor */
void FSM_QualityGate::enseq_FSM_QualityGate__Motor_default()
{
	/* 'default' enter sequence for region FSM_QualityGate: Motor */
	react_FSM_QualityGate__Motor__entry_Default();
}

/* 'default' enter sequence for region FSM:SystemMotor */
void FSM_QualityGate::enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_default()
{
	/* 'default' enter sequence for region FSM:SystemMotor */
	react_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor__entry_Default();
}

/* shallow enterSequence with history in child FSM:SystemMotor */
void FSM_QualityGate::shenseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor()
{
	/* shallow enterSequence with history in child FSM:SystemMotor */
	/* Handle shallow history entry of FSM:SystemMotor */
	switch(historyVector[ 0 ])
	{
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle :
		{
			enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle_default();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward :
		{
			enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_default();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow :
		{
			enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_default();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop :
		{
			enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_default();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* 'default' enter sequence for region FSM_System */
void FSM_QualityGate::enseq_FSM_System_default()
{
	/* 'default' enter sequence for region FSM_System */
	react_FSM_System__entry_Default();
}

/* 'default' enter sequence for region FSM_Operational */
void FSM_QualityGate::enseq_FSM_System_Operational_FSM_Operational_default()
{
	/* 'default' enter sequence for region FSM_Operational */
	react_FSM_System_Operational_FSM_Operational__entry_Default();
}

/* 'default' enter sequence for region FSM_Signaling */
void FSM_QualityGate::enseq_FSM_Signaling_default()
{
	/* 'default' enter sequence for region FSM_Signaling */
	react_FSM_Signaling__entry_Default();
}

/* 'default' enter sequence for region FSM_LAMP */
void FSM_QualityGate::enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_default()
{
	/* 'default' enter sequence for region FSM_LAMP */
	react_FSM_Signaling_FSM_LAMP_FSM_LAMP__entry_Default();
}

/* 'default' enter sequence for region FSM_Lamp_Green */
void FSM_QualityGate::enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_default()
{
	/* 'default' enter sequence for region FSM_Lamp_Green */
	react_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green__entry_Default();
}

/* 'default' enter sequence for region FSM_Lamp_Yellow */
void FSM_QualityGate::enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_default()
{
	/* 'default' enter sequence for region FSM_Lamp_Yellow */
	react_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow__entry_Default();
}

/* 'default' enter sequence for region FSM_Lamp_Red */
void FSM_QualityGate::enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_default()
{
	/* 'default' enter sequence for region FSM_Lamp_Red */
	react_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red__entry_Default();
}

/* Default exit sequence for state Ingress */
void FSM_QualityGate::exseq_FSM_QualityGate_Ingress_Ingress()
{
	/* Default exit sequence for state Ingress */
	exseq_FSM_QualityGate_Ingress_Ingress_Ingress();
	stateConfVector[0] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Idle */
void FSM_QualityGate::exseq_FSM_QualityGate_Ingress_Ingress_Ingress_Idle()
{
	/* Default exit sequence for state Idle */
	stateConfVector[0] = FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress;
	stateConfVectorPosition = 0;
	exact_FSM_QualityGate_Ingress_Ingress_Ingress_Idle();
}

/* Default exit sequence for state PukPresent */
void FSM_QualityGate::exseq_FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent()
{
	/* Default exit sequence for state PukPresent */
	stateConfVector[0] = FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state CreatingDistance */
void FSM_QualityGate::exseq_FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance()
{
	/* Default exit sequence for state CreatingDistance */
	stateConfVector[0] = FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress;
	stateConfVectorPosition = 0;
	exact_FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance();
}

/* Default exit sequence for state EStop */
void FSM_QualityGate::exseq_FSM_QualityGate_Ingress_EStop()
{
	/* Default exit sequence for state EStop */
	stateConfVector[0] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state SystemStopped */
void FSM_QualityGate::exseq_FSM_QualityGate_Ingress_SystemStopped()
{
	/* Default exit sequence for state SystemStopped */
	stateConfVector[0] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state SystemIdle */
void FSM_QualityGate::exseq_FSM_QualityGate_Ingress_SystemIdle()
{
	/* Default exit sequence for state SystemIdle */
	stateConfVector[0] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state HeightMeasurement */
void FSM_QualityGate::exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement()
{
	/* Default exit sequence for state HeightMeasurement */
	exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement();
	stateConfVector[1] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state Idle */
void FSM_QualityGate::exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle()
{
	/* Default exit sequence for state Idle */
	stateConfVector[1] = FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state Measuring */
void FSM_QualityGate::exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring()
{
	/* Default exit sequence for state Measuring */
	stateConfVector[1] = FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement;
	stateConfVectorPosition = 1;
	exact_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring();
}

/* Default exit sequence for state PukPresent */
void FSM_QualityGate::exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent()
{
	/* Default exit sequence for state PukPresent */
	stateConfVector[1] = FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement;
	stateConfVectorPosition = 1;
	exact_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent();
}

/* Default exit sequence for state EStop */
void FSM_QualityGate::exseq_FSM_QualityGate__HeightMeasurement_EStop()
{
	/* Default exit sequence for state EStop */
	stateConfVector[1] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state SystemStopped */
void FSM_QualityGate::exseq_FSM_QualityGate__HeightMeasurement_SystemStopped()
{
	/* Default exit sequence for state SystemStopped */
	stateConfVector[1] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state SystemIdle */
void FSM_QualityGate::exseq_FSM_QualityGate__HeightMeasurement_SystemIdle()
{
	/* Default exit sequence for state SystemIdle */
	stateConfVector[1] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state Sorting */
void FSM_QualityGate::exseq_FSM_QualityGate__Sorting_Sorting()
{
	/* Default exit sequence for state Sorting */
	exseq_FSM_QualityGate__Sorting_Sorting_Sorting();
	stateConfVector[2] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state Idle */
void FSM_QualityGate::exseq_FSM_QualityGate__Sorting_Sorting_Sorting_Idle()
{
	/* Default exit sequence for state Idle */
	stateConfVector[2] = FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state MetalMeasurement */
void FSM_QualityGate::exseq_FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement()
{
	/* Default exit sequence for state MetalMeasurement */
	stateConfVector[2] = FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state Ejecting */
void FSM_QualityGate::exseq_FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting()
{
	/* Default exit sequence for state Ejecting */
	stateConfVector[2] = FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state Passthrough */
void FSM_QualityGate::exseq_FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough()
{
	/* Default exit sequence for state Passthrough */
	stateConfVector[2] = FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state PUkPresent */
void FSM_QualityGate::exseq_FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent()
{
	/* Default exit sequence for state PUkPresent */
	stateConfVector[2] = FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state RampFull */
void FSM_QualityGate::exseq_FSM_QualityGate__Sorting_RampFull()
{
	/* Default exit sequence for state RampFull */
	stateConfVector[2] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 2;
	exact_FSM_QualityGate__Sorting_RampFull();
}

/* Default exit sequence for state EStop */
void FSM_QualityGate::exseq_FSM_QualityGate__Sorting_EStop()
{
	/* Default exit sequence for state EStop */
	stateConfVector[2] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state SystemIdle */
void FSM_QualityGate::exseq_FSM_QualityGate__Sorting_SystemIdle()
{
	/* Default exit sequence for state SystemIdle */
	stateConfVector[2] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state SystemStopped */
void FSM_QualityGate::exseq_FSM_QualityGate__Sorting_SystemStopped()
{
	/* Default exit sequence for state SystemStopped */
	stateConfVector[2] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state Egress */
void FSM_QualityGate::exseq_FSM_QualityGate__Egress_Egress()
{
	/* Default exit sequence for state Egress */
	exseq_FSM_QualityGate__Egress_Egress_Egress();
	stateConfVector[3] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 3;
}

/* Default exit sequence for state IDLE */
void FSM_QualityGate::exseq_FSM_QualityGate__Egress_Egress_Egress_IDLE()
{
	/* Default exit sequence for state IDLE */
	stateConfVector[3] = FSM_QualityGate::State::FSM_QualityGate__Egress_Egress;
	stateConfVectorPosition = 3;
}

/* Default exit sequence for state PukPresent */
void FSM_QualityGate::exseq_FSM_QualityGate__Egress_Egress_Egress_PukPresent()
{
	/* Default exit sequence for state PukPresent */
	stateConfVector[3] = FSM_QualityGate::State::FSM_QualityGate__Egress_Egress;
	stateConfVectorPosition = 3;
	exact_FSM_QualityGate__Egress_Egress_Egress_PukPresent();
}

/* Default exit sequence for state Transfer */
void FSM_QualityGate::exseq_FSM_QualityGate__Egress_Egress_Egress_Transfer()
{
	/* Default exit sequence for state Transfer */
	stateConfVector[3] = FSM_QualityGate::State::FSM_QualityGate__Egress_Egress;
	stateConfVectorPosition = 3;
	exact_FSM_QualityGate__Egress_Egress_Egress_Transfer();
}

/* Default exit sequence for state SystemStopped */
void FSM_QualityGate::exseq_FSM_QualityGate__Egress_SystemStopped()
{
	/* Default exit sequence for state SystemStopped */
	stateConfVector[3] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 3;
}

/* Default exit sequence for state EStop */
void FSM_QualityGate::exseq_FSM_QualityGate__Egress_EStop()
{
	/* Default exit sequence for state EStop */
	stateConfVector[3] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 3;
}

/* Default exit sequence for state SystemIdle */
void FSM_QualityGate::exseq_FSM_QualityGate__Egress_SystemIdle()
{
	/* Default exit sequence for state SystemIdle */
	stateConfVector[3] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 3;
}

/* Default exit sequence for state SystemMotor */
void FSM_QualityGate::exseq_FSM_QualityGate__Motor_SystemMotor()
{
	/* Default exit sequence for state SystemMotor */
	exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor();
	stateConfVector[4] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 4;
}

/* Default exit sequence for state Idle */
void FSM_QualityGate::exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle()
{
	/* Default exit sequence for state Idle */
	stateConfVector[4] = FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor;
	stateConfVectorPosition = 4;
}

/* Default exit sequence for state Forward */
void FSM_QualityGate::exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward()
{
	/* Default exit sequence for state Forward */
	stateConfVector[4] = FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor;
	stateConfVectorPosition = 4;
}

/* Default exit sequence for state Slow */
void FSM_QualityGate::exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow()
{
	/* Default exit sequence for state Slow */
	stateConfVector[4] = FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor;
	stateConfVectorPosition = 4;
}

/* Default exit sequence for state Stop */
void FSM_QualityGate::exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop()
{
	/* Default exit sequence for state Stop */
	stateConfVector[4] = FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor;
	stateConfVectorPosition = 4;
}

/* Default exit sequence for state Operational */
void FSM_QualityGate::exseq_FSM_System_Operational()
{
	/* Default exit sequence for state Operational */
	exseq_FSM_System_Operational_FSM_Operational();
	stateConfVector[5] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 5;
}

/* Default exit sequence for state Ready */
void FSM_QualityGate::exseq_FSM_System_Operational_FSM_Operational_Ready()
{
	/* Default exit sequence for state Ready */
	stateConfVector[5] = FSM_QualityGate::State::FSM_System_Operational;
	stateConfVectorPosition = 5;
}

/* Default exit sequence for state Running */
void FSM_QualityGate::exseq_FSM_System_Operational_FSM_Operational_Running()
{
	/* Default exit sequence for state Running */
	stateConfVector[5] = FSM_QualityGate::State::FSM_System_Operational;
	stateConfVectorPosition = 5;
	exact_FSM_System_Operational_FSM_Operational_Running();
}

/* Default exit sequence for state EStop */
void FSM_QualityGate::exseq_FSM_System_EStop()
{
	/* Default exit sequence for state EStop */
	stateConfVector[5] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 5;
	exact_FSM_System_EStop();
}

/* Default exit sequence for state Off */
void FSM_QualityGate::exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off()
{
	/* Default exit sequence for state Off */
	stateConfVector[6] = FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 6;
}

/* Default exit sequence for state Constant */
void FSM_QualityGate::exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant()
{
	/* Default exit sequence for state Constant */
	stateConfVector[6] = FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 6;
}

/* Default exit sequence for state Off */
void FSM_QualityGate::exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off()
{
	/* Default exit sequence for state Off */
	stateConfVector[7] = FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 7;
}

/* Default exit sequence for state Constant */
void FSM_QualityGate::exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant()
{
	/* Default exit sequence for state Constant */
	stateConfVector[7] = FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 7;
}

/* Default exit sequence for state Blinking 1 Hz */
void FSM_QualityGate::exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz()
{
	/* Default exit sequence for state Blinking 1 Hz */
	stateConfVector[7] = FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 7;
}

/* Default exit sequence for state Off */
void FSM_QualityGate::exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off()
{
	/* Default exit sequence for state Off */
	stateConfVector[8] = FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 8;
}

/* Default exit sequence for state Constant */
void FSM_QualityGate::exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant()
{
	/* Default exit sequence for state Constant */
	stateConfVector[8] = FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp;
	stateConfVectorPosition = 8;
}

/* Default exit sequence for region FSM_QualityGate:Ingress */
void FSM_QualityGate::exseq_FSM_QualityGate_Ingress()
{
	/* Default exit sequence for region FSM_QualityGate:Ingress */
	/* Handle exit of all possible states (of FSM_QualityGate.FSM_QualityGate_Ingress) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress :
		{
			exseq_FSM_QualityGate_Ingress_Ingress();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_Idle :
		{
			exseq_FSM_QualityGate_Ingress_Ingress_Ingress_Idle();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent :
		{
			exseq_FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance :
		{
			exseq_FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_EStop :
		{
			exseq_FSM_QualityGate_Ingress_EStop();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_SystemStopped :
		{
			exseq_FSM_QualityGate_Ingress_SystemStopped();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_SystemIdle :
		{
			exseq_FSM_QualityGate_Ingress_SystemIdle();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region Ingress */
void FSM_QualityGate::exseq_FSM_QualityGate_Ingress_Ingress_Ingress()
{
	/* Default exit sequence for region Ingress */
	/* Handle exit of all possible states (of FSM_QualityGate.FSM_QualityGate_Ingress.Ingress.Ingress) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_Idle :
		{
			exseq_FSM_QualityGate_Ingress_Ingress_Ingress_Idle();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent :
		{
			exseq_FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance :
		{
			exseq_FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_QualityGate: HeightMeasurement */
void FSM_QualityGate::exseq_FSM_QualityGate__HeightMeasurement()
{
	/* Default exit sequence for region FSM_QualityGate: HeightMeasurement */
	/* Handle exit of all possible states (of FSM_QualityGate.FSM_QualityGate__HeightMeasurement) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement :
		{
			exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle :
		{
			exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring :
		{
			exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent :
		{
			exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_EStop :
		{
			exseq_FSM_QualityGate__HeightMeasurement_EStop();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_SystemStopped :
		{
			exseq_FSM_QualityGate__HeightMeasurement_SystemStopped();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_SystemIdle :
		{
			exseq_FSM_QualityGate__HeightMeasurement_SystemIdle();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region HeightMeasurement */
void FSM_QualityGate::exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement()
{
	/* Default exit sequence for region HeightMeasurement */
	/* Handle exit of all possible states (of FSM_QualityGate.FSM_QualityGate__HeightMeasurement.HeightMeasurement.HeightMeasurement) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle :
		{
			exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring :
		{
			exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent :
		{
			exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_QualityGate: Sorting */
void FSM_QualityGate::exseq_FSM_QualityGate__Sorting()
{
	/* Default exit sequence for region FSM_QualityGate: Sorting */
	/* Handle exit of all possible states (of FSM_QualityGate.FSM_QualityGate__Sorting) at position 2... */
	switch(stateConfVector[ 2 ])
	{
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting :
		{
			exseq_FSM_QualityGate__Sorting_Sorting();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Idle :
		{
			exseq_FSM_QualityGate__Sorting_Sorting_Sorting_Idle();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement :
		{
			exseq_FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting :
		{
			exseq_FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough :
		{
			exseq_FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent :
		{
			exseq_FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_RampFull :
		{
			exseq_FSM_QualityGate__Sorting_RampFull();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_EStop :
		{
			exseq_FSM_QualityGate__Sorting_EStop();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_SystemIdle :
		{
			exseq_FSM_QualityGate__Sorting_SystemIdle();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_SystemStopped :
		{
			exseq_FSM_QualityGate__Sorting_SystemStopped();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region Sorting */
void FSM_QualityGate::exseq_FSM_QualityGate__Sorting_Sorting_Sorting()
{
	/* Default exit sequence for region Sorting */
	/* Handle exit of all possible states (of FSM_QualityGate.FSM_QualityGate__Sorting.Sorting.Sorting) at position 2... */
	switch(stateConfVector[ 2 ])
	{
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Idle :
		{
			exseq_FSM_QualityGate__Sorting_Sorting_Sorting_Idle();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement :
		{
			exseq_FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting :
		{
			exseq_FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough :
		{
			exseq_FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent :
		{
			exseq_FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_QualityGate: Egress */
void FSM_QualityGate::exseq_FSM_QualityGate__Egress()
{
	/* Default exit sequence for region FSM_QualityGate: Egress */
	/* Handle exit of all possible states (of FSM_QualityGate.FSM_QualityGate__Egress) at position 3... */
	switch(stateConfVector[ 3 ])
	{
		case FSM_QualityGate::State::FSM_QualityGate__Egress_Egress :
		{
			exseq_FSM_QualityGate__Egress_Egress();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_IDLE :
		{
			exseq_FSM_QualityGate__Egress_Egress_Egress_IDLE();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_PukPresent :
		{
			exseq_FSM_QualityGate__Egress_Egress_Egress_PukPresent();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_Transfer :
		{
			exseq_FSM_QualityGate__Egress_Egress_Egress_Transfer();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Egress_SystemStopped :
		{
			exseq_FSM_QualityGate__Egress_SystemStopped();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Egress_EStop :
		{
			exseq_FSM_QualityGate__Egress_EStop();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Egress_SystemIdle :
		{
			exseq_FSM_QualityGate__Egress_SystemIdle();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region Egress */
void FSM_QualityGate::exseq_FSM_QualityGate__Egress_Egress_Egress()
{
	/* Default exit sequence for region Egress */
	/* Handle exit of all possible states (of FSM_QualityGate.FSM_QualityGate__Egress.Egress.Egress) at position 3... */
	switch(stateConfVector[ 3 ])
	{
		case FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_IDLE :
		{
			exseq_FSM_QualityGate__Egress_Egress_Egress_IDLE();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_PukPresent :
		{
			exseq_FSM_QualityGate__Egress_Egress_Egress_PukPresent();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_Transfer :
		{
			exseq_FSM_QualityGate__Egress_Egress_Egress_Transfer();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_QualityGate: Motor */
void FSM_QualityGate::exseq_FSM_QualityGate__Motor()
{
	/* Default exit sequence for region FSM_QualityGate: Motor */
	/* Handle exit of all possible states (of FSM_QualityGate.FSM_QualityGate__Motor) at position 4... */
	switch(stateConfVector[ 4 ])
	{
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor :
		{
			exseq_FSM_QualityGate__Motor_SystemMotor();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle :
		{
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward :
		{
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow :
		{
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop :
		{
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM:SystemMotor */
void FSM_QualityGate::exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor()
{
	/* Default exit sequence for region FSM:SystemMotor */
	/* Handle exit of all possible states (of FSM_QualityGate.FSM_QualityGate__Motor.SystemMotor.FSM_SystemMotor) at position 4... */
	switch(stateConfVector[ 4 ])
	{
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle :
		{
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward :
		{
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow :
		{
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow();
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop :
		{
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_System */
void FSM_QualityGate::exseq_FSM_System()
{
	/* Default exit sequence for region FSM_System */
	/* Handle exit of all possible states (of FSM_QualityGate.FSM_System) at position 5... */
	switch(stateConfVector[ 5 ])
	{
		case FSM_QualityGate::State::FSM_System_Operational :
		{
			exseq_FSM_System_Operational();
			break;
		}
		case FSM_QualityGate::State::FSM_System_Operational_FSM_Operational_Ready :
		{
			exseq_FSM_System_Operational_FSM_Operational_Ready();
			break;
		}
		case FSM_QualityGate::State::FSM_System_Operational_FSM_Operational_Running :
		{
			exseq_FSM_System_Operational_FSM_Operational_Running();
			break;
		}
		case FSM_QualityGate::State::FSM_System_EStop :
		{
			exseq_FSM_System_EStop();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_Operational */
void FSM_QualityGate::exseq_FSM_System_Operational_FSM_Operational()
{
	/* Default exit sequence for region FSM_Operational */
	/* Handle exit of all possible states (of FSM_QualityGate.FSM_System.Operational.FSM_Operational) at position 5... */
	switch(stateConfVector[ 5 ])
	{
		case FSM_QualityGate::State::FSM_System_Operational_FSM_Operational_Ready :
		{
			exseq_FSM_System_Operational_FSM_Operational_Ready();
			break;
		}
		case FSM_QualityGate::State::FSM_System_Operational_FSM_Operational_Running :
		{
			exseq_FSM_System_Operational_FSM_Operational_Running();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region FSM_Signaling */
void FSM_QualityGate::exseq_FSM_Signaling()
{
	/* Default exit sequence for region FSM_Signaling */
	/* Handle exit of all possible states (of FSM_QualityGate.FSM_Signaling) at position 6... */
	switch(stateConfVector[ 6 ])
	{
		case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off :
		{
			exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
			break;
		}
		case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant :
		{
			exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant();
			break;
		}
		default:
			/* do nothing */
			break;
	}
	/* Handle exit of all possible states (of FSM_QualityGate.FSM_Signaling) at position 7... */
	switch(stateConfVector[ 7 ])
	{
		case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off :
		{
			exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off();
			break;
		}
		case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant :
		{
			exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant();
			break;
		}
		case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz :
		{
			exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz();
			break;
		}
		default:
			/* do nothing */
			break;
	}
	/* Handle exit of all possible states (of FSM_QualityGate.FSM_Signaling) at position 8... */
	switch(stateConfVector[ 8 ])
	{
		case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off :
		{
			exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off();
			break;
		}
		case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant :
		{
			exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default react sequence for initial entry  */
void FSM_QualityGate::react_FSM_QualityGate_Ingress_Ingress_Ingress__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_QualityGate_Ingress_Ingress_Ingress_Idle_default();
}

/* Default react sequence for initial entry  */
void FSM_QualityGate::react_FSM_QualityGate_Ingress__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_QualityGate_Ingress_SystemIdle_default();
}

/* Default react sequence for initial entry  */
void FSM_QualityGate::react_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle_default();
}

/* Default react sequence for initial entry  */
void FSM_QualityGate::react_FSM_QualityGate__HeightMeasurement__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_QualityGate__HeightMeasurement_SystemIdle_default();
}

/* Default react sequence for initial entry  */
void FSM_QualityGate::react_FSM_QualityGate__Sorting_Sorting_Sorting__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_QualityGate__Sorting_Sorting_Sorting_Idle_default();
}

/* Default react sequence for initial entry  */
void FSM_QualityGate::react_FSM_QualityGate__Sorting__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_QualityGate__Sorting_SystemIdle_default();
}

/* Default react sequence for initial entry  */
void FSM_QualityGate::react_FSM_QualityGate__Egress_Egress_Egress__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_QualityGate__Egress_Egress_Egress_IDLE_default();
}

/* Default react sequence for initial entry  */
void FSM_QualityGate::react_FSM_QualityGate__Egress__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_QualityGate__Egress_SystemIdle_default();
}

/* Default react sequence for initial entry  */
void FSM_QualityGate::react_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle_default();
}

/* Default react sequence for shallow history entry history */
void FSM_QualityGate::react_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_history()
{
	/* Default react sequence for shallow history entry history */
	/* Enter the region with shallow history */
	if (historyVector[0] != FSM_QualityGate::State::NO_STATE)
	{
		shenseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor();
	} else
	{
		enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle_default();
	} 
}

/* Default react sequence for initial entry  */
void FSM_QualityGate::react_FSM_QualityGate__Motor__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_QualityGate__Motor_SystemMotor_default();
}

/* Default react sequence for initial entry  */
void FSM_QualityGate::react_FSM_System__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_System_Operational_default();
}

/* Default react sequence for initial entry  */
void FSM_QualityGate::react_FSM_System_Operational_FSM_Operational__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_System_Operational_FSM_Operational_Ready_default();
}

/* Default react sequence for initial entry  */
void FSM_QualityGate::react_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_default();
}

/* Default react sequence for initial entry  */
void FSM_QualityGate::react_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_default();
}

/* Default react sequence for initial entry  */
void FSM_QualityGate::react_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_default();
}

/* Default react sequence for initial entry  */
void FSM_QualityGate::react_FSM_Signaling_FSM_LAMP_FSM_LAMP__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_default();
}

/* Default react sequence for initial entry  */
void FSM_QualityGate::react_FSM_Signaling__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FSM_Signaling_FSM_LAMP_default();
}

sc::integer FSM_QualityGate::react(const sc::integer transitioned_before) {
	/* State machine reactions. */
	return transitioned_before;
}

sc::integer FSM_QualityGate::FSM_QualityGate_Ingress_Ingress_react(const sc::integer transitioned_before) {
	/* The reactions of state Ingress. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (ESTOP_Received_raised)
		{ 
			exseq_FSM_QualityGate_Ingress_Ingress();
			enseq_FSM_QualityGate_Ingress_EStop_default();
			transitioned_after = 0;
		}  else
		{
			if (local_SYSTEM_STOPPED_raised)
			{ 
				exseq_FSM_QualityGate_Ingress_Ingress();
				enseq_FSM_QualityGate_Ingress_SystemStopped_default();
				transitioned_after = 0;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate_Ingress_Ingress_Ingress_Idle_react(const sc::integer transitioned_before) {
	/* The reactions of state Idle. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (LBF_1_INTERRUPTED_raised)
		{ 
			exseq_FSM_QualityGate_Ingress_Ingress_Ingress_Idle();
			enseq_FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent_default();
			FSM_QualityGate_Ingress_Ingress_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate_Ingress_Ingress_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent_react(const sc::integer transitioned_before) {
	/* The reactions of state PukPresent. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (LBF_1_OPEN_raised)
		{ 
			exseq_FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent();
			incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::PUK_ENTRY_HeightMeasurement))
			;
			enseq_FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance_default();
			FSM_QualityGate_Ingress_Ingress_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate_Ingress_Ingress_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance_react(const sc::integer transitioned_before) {
	/* The reactions of state CreatingDistance. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (local_PUK_DISTANCE_VALID_raised)
		{ 
			exseq_FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance();
			enseq_FSM_QualityGate_Ingress_Ingress_Ingress_Idle_default();
			FSM_QualityGate_Ingress_Ingress_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate_Ingress_Ingress_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate_Ingress_EStop_react(const sc::integer transitioned_before) {
	/* The reactions of state EStop. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (ESTOP_CLEARED_raised)
		{ 
			exseq_FSM_QualityGate_Ingress_EStop();
			enseq_FSM_QualityGate_Ingress_SystemIdle_default();
			transitioned_after = 0;
		} 
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate_Ingress_SystemStopped_react(const sc::integer transitioned_before) {
	/* The reactions of state SystemStopped. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (local_SYSTEM_RUNNING_raised)
		{ 
			exseq_FSM_QualityGate_Ingress_SystemStopped();
			enseq_FSM_QualityGate_Ingress_Ingress_default();
			transitioned_after = 0;
		}  else
		{
			if (ESTOP_Received_raised)
			{ 
				exseq_FSM_QualityGate_Ingress_SystemStopped();
				enseq_FSM_QualityGate_Ingress_EStop_default();
				transitioned_after = 0;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate_Ingress_SystemIdle_react(const sc::integer transitioned_before) {
	/* The reactions of state SystemIdle. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (local_SYSTEM_RUNNING_raised)
		{ 
			exseq_FSM_QualityGate_Ingress_SystemIdle();
			enseq_FSM_QualityGate_Ingress_Ingress_default();
			transitioned_after = 0;
		}  else
		{
			if (ESTOP_Received_raised)
			{ 
				exseq_FSM_QualityGate_Ingress_SystemIdle();
				enseq_FSM_QualityGate_Ingress_EStop_default();
				transitioned_after = 0;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__HeightMeasurement_HeightMeasurement_react(const sc::integer transitioned_before) {
	/* The reactions of state HeightMeasurement. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (1))
	{ 
		if (ESTOP_Received_raised)
		{ 
			exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement();
			enseq_FSM_QualityGate__HeightMeasurement_EStop_default();
			transitioned_after = 1;
		}  else
		{
			if (local_SYSTEM_STOPPED_raised)
			{ 
				exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement();
				enseq_FSM_QualityGate__HeightMeasurement_SystemStopped_default();
				transitioned_after = 1;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle_react(const sc::integer transitioned_before) {
	/* The reactions of state Idle. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (1))
	{ 
		if (PUK_ENTRY_HeightMeasurement_raised)
		{ 
			exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle();
			enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent_default();
			FSM_QualityGate__HeightMeasurement_HeightMeasurement_react(1);
			transitioned_after = 1;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate__HeightMeasurement_HeightMeasurement_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring_react(const sc::integer transitioned_before) {
	/* The reactions of state Measuring. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (1))
	{ 
		if (HS_1_OPEN_raised)
		{ 
			exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring();
			PUK_DISTANCE_VALID_observable.next();
			raiseLocal_PUK_DISTANCE_VALID();
			incomingEventQueue.push_back(new FSM_QualityGate::EventInstance(FSM_QualityGate::Event::PUK_ENTRY_SORTING))
			;
			enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle_default();
			FSM_QualityGate__HeightMeasurement_HeightMeasurement_react(1);
			transitioned_after = 1;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate__HeightMeasurement_HeightMeasurement_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent_react(const sc::integer transitioned_before) {
	/* The reactions of state PukPresent. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (1))
	{ 
		if (HS_1_INTERRUPTED_raised)
		{ 
			exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent();
			enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring_default();
			FSM_QualityGate__HeightMeasurement_HeightMeasurement_react(1);
			transitioned_after = 1;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate__HeightMeasurement_HeightMeasurement_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__HeightMeasurement_EStop_react(const sc::integer transitioned_before) {
	/* The reactions of state EStop. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (1))
	{ 
		if (ESTOP_CLEARED_raised)
		{ 
			exseq_FSM_QualityGate__HeightMeasurement_EStop();
			enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_default();
			transitioned_after = 1;
		}  else
		{
			if (ESTOP_CLEARED_raised)
			{ 
				exseq_FSM_QualityGate__HeightMeasurement_EStop();
				enseq_FSM_QualityGate__HeightMeasurement_SystemIdle_default();
				transitioned_after = 1;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__HeightMeasurement_SystemStopped_react(const sc::integer transitioned_before) {
	/* The reactions of state SystemStopped. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (1))
	{ 
		if (local_SYSTEM_RUNNING_raised)
		{ 
			exseq_FSM_QualityGate__HeightMeasurement_SystemStopped();
			enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_default();
			transitioned_after = 1;
		}  else
		{
			if (ESTOP_TOGGLED_raised)
			{ 
				exseq_FSM_QualityGate__HeightMeasurement_SystemStopped();
				enseq_FSM_QualityGate__HeightMeasurement_EStop_default();
				transitioned_after = 1;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__HeightMeasurement_SystemIdle_react(const sc::integer transitioned_before) {
	/* The reactions of state SystemIdle. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (1))
	{ 
		if (local_SYSTEM_RUNNING_raised)
		{ 
			exseq_FSM_QualityGate__HeightMeasurement_SystemIdle();
			enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_default();
			transitioned_after = 1;
		}  else
		{
			if (ESTOP_TOGGLED_raised)
			{ 
				exseq_FSM_QualityGate__HeightMeasurement_SystemIdle();
				enseq_FSM_QualityGate__HeightMeasurement_EStop_default();
				transitioned_after = 1;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Sorting_Sorting_react(const sc::integer transitioned_before) {
	/* The reactions of state Sorting. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (2))
	{ 
		if (ESTOP_Received_raised)
		{ 
			exseq_FSM_QualityGate__Sorting_Sorting();
			enseq_FSM_QualityGate__Sorting_EStop_default();
			transitioned_after = 2;
		}  else
		{
			if (local_SYSTEM_STOPPED_raised)
			{ 
				exseq_FSM_QualityGate__Sorting_Sorting();
				enseq_FSM_QualityGate__Sorting_SystemStopped_default();
				transitioned_after = 2;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Sorting_Sorting_Sorting_Idle_react(const sc::integer transitioned_before) {
	/* The reactions of state Idle. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (2))
	{ 
		if (PUK_ENTRY_SORTING_raised)
		{ 
			exseq_FSM_QualityGate__Sorting_Sorting_Sorting_Idle();
			enseq_FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent_default();
			FSM_QualityGate__Sorting_Sorting_react(2);
			transitioned_after = 2;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate__Sorting_Sorting_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement_react(const sc::integer transitioned_before) {
	/* The reactions of state MetalMeasurement. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (2))
	{ 
		if (PUK_NOT_DESIRED_raised)
		{ 
			exseq_FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement();
			enseq_FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting_default();
			FSM_QualityGate__Sorting_Sorting_react(2);
			transitioned_after = 2;
		}  else
		{
			if (PUK_DESIRED_raised)
			{ 
				exseq_FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement();
				enseq_FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough_default();
				FSM_QualityGate__Sorting_Sorting_react(2);
				transitioned_after = 2;
			} 
		}
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate__Sorting_Sorting_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting_react(const sc::integer transitioned_before) {
	/* The reactions of state Ejecting. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (2))
	{ 
		if (FST1RampFull)
		{ 
			exseq_FSM_QualityGate__Sorting_Sorting();
			enseq_FSM_QualityGate__Sorting_RampFull_default();
			transitioned_after = 2;
		}  else
		{
			if (LBR_1_INTERRUPTED_raised)
			{ 
				exseq_FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting();
				enseq_FSM_QualityGate__Sorting_Sorting_Sorting_Idle_default();
				FSM_QualityGate__Sorting_Sorting_react(2);
				transitioned_after = 2;
			} 
		}
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate__Sorting_Sorting_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough_react(const sc::integer transitioned_before) {
	/* The reactions of state Passthrough. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (2))
	{ 
		if (PUK_EJECTOR_DISTANCE_VALID_raised)
		{ 
			exseq_FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough();
			PUK_ENTRY_EGRESS_observable.next();
			raiseLocal_PUK_ENTRY_EGRESS();
			enseq_FSM_QualityGate__Sorting_Sorting_Sorting_Idle_default();
			FSM_QualityGate__Sorting_Sorting_react(2);
			transitioned_after = 2;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate__Sorting_Sorting_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent_react(const sc::integer transitioned_before) {
	/* The reactions of state PUkPresent. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (2))
	{ 
		if (LBM_1_INTERRUPTED_raised)
		{ 
			exseq_FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent();
			enseq_FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement_default();
			FSM_QualityGate__Sorting_Sorting_react(2);
			transitioned_after = 2;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate__Sorting_Sorting_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Sorting_RampFull_react(const sc::integer transitioned_before) {
	/* The reactions of state RampFull. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (2))
	{ 
		if (BGR_1_INTERRUPTED_raised)
		{ 
			exseq_FSM_QualityGate__Sorting_RampFull();
			enseq_FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting_default();
			transitioned_after = 2;
		} 
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Sorting_EStop_react(const sc::integer transitioned_before) {
	/* The reactions of state EStop. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (2))
	{ 
		if (ESTOP_CLEARED_raised)
		{ 
			exseq_FSM_QualityGate__Sorting_EStop();
			enseq_FSM_QualityGate__Sorting_Sorting_default();
			transitioned_after = 2;
		}  else
		{
			if (ESTOP_CLEARED_raised)
			{ 
				exseq_FSM_QualityGate__Sorting_EStop();
				enseq_FSM_QualityGate__Sorting_SystemIdle_default();
				transitioned_after = 2;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Sorting_SystemIdle_react(const sc::integer transitioned_before) {
	/* The reactions of state SystemIdle. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (2))
	{ 
		if (local_SYSTEM_RUNNING_raised)
		{ 
			exseq_FSM_QualityGate__Sorting_SystemIdle();
			enseq_FSM_QualityGate__Sorting_Sorting_default();
			transitioned_after = 2;
		}  else
		{
			if (ESTOP_Received_raised)
			{ 
				exseq_FSM_QualityGate__Sorting_SystemIdle();
				enseq_FSM_QualityGate__Sorting_EStop_default();
				transitioned_after = 2;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Sorting_SystemStopped_react(const sc::integer transitioned_before) {
	/* The reactions of state SystemStopped. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (2))
	{ 
		if (local_SYSTEM_RUNNING_raised)
		{ 
			exseq_FSM_QualityGate__Sorting_SystemStopped();
			enseq_FSM_QualityGate__Sorting_Sorting_default();
			transitioned_after = 2;
		} 
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Egress_Egress_react(const sc::integer transitioned_before) {
	/* The reactions of state Egress. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (3))
	{ 
		if (local_SYSTEM_STOPPED_raised)
		{ 
			exseq_FSM_QualityGate__Egress_Egress();
			enseq_FSM_QualityGate__Egress_SystemStopped_default();
			transitioned_after = 3;
		}  else
		{
			if (ESTOP_Received_raised)
			{ 
				exseq_FSM_QualityGate__Egress_Egress();
				enseq_FSM_QualityGate__Egress_EStop_default();
				transitioned_after = 3;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Egress_Egress_Egress_IDLE_react(const sc::integer transitioned_before) {
	/* The reactions of state IDLE. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (3))
	{ 
		if (local_PUK_ENTRY_EGRESS_raised)
		{ 
			exseq_FSM_QualityGate__Egress_Egress_Egress_IDLE();
			enseq_FSM_QualityGate__Egress_Egress_Egress_PukPresent_default();
			FSM_QualityGate__Egress_Egress_react(3);
			transitioned_after = 3;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate__Egress_Egress_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Egress_Egress_Egress_PukPresent_react(const sc::integer transitioned_before) {
	/* The reactions of state PukPresent. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (3))
	{ 
		if (LBE_1_INTERRUPTED_raised)
		{ 
			exseq_FSM_QualityGate__Egress_Egress_Egress_PukPresent();
			enseq_FSM_QualityGate__Egress_Egress_Egress_Transfer_default();
			FSM_QualityGate__Egress_Egress_react(3);
			transitioned_after = 3;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate__Egress_Egress_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Egress_Egress_Egress_Transfer_react(const sc::integer transitioned_before) {
	/* The reactions of state Transfer. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (3))
	{ 
		if (LBE_1_OPEN_raised)
		{ 
			exseq_FSM_QualityGate__Egress_Egress_Egress_Transfer();
			enseq_FSM_QualityGate__Egress_Egress_Egress_IDLE_default();
			FSM_QualityGate__Egress_Egress_react(3);
			transitioned_after = 3;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate__Egress_Egress_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Egress_SystemStopped_react(const sc::integer transitioned_before) {
	/* The reactions of state SystemStopped. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (3))
	{ 
		if (local_SYSTEM_RUNNING_raised)
		{ 
			exseq_FSM_QualityGate__Egress_SystemStopped();
			enseq_FSM_QualityGate__Egress_Egress_default();
			transitioned_after = 3;
		}  else
		{
			if (ESTOP_TOGGLED_raised)
			{ 
				exseq_FSM_QualityGate__Egress_SystemStopped();
				enseq_FSM_QualityGate__Egress_EStop_default();
				transitioned_after = 3;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Egress_EStop_react(const sc::integer transitioned_before) {
	/* The reactions of state EStop. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (3))
	{ 
		if (ESTOP_CLEARED_raised)
		{ 
			exseq_FSM_QualityGate__Egress_EStop();
			enseq_FSM_QualityGate__Egress_Egress_default();
			transitioned_after = 3;
		}  else
		{
			if (ESTOP_CLEARED_raised)
			{ 
				exseq_FSM_QualityGate__Egress_EStop();
				enseq_FSM_QualityGate__Egress_SystemIdle_default();
				transitioned_after = 3;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Egress_SystemIdle_react(const sc::integer transitioned_before) {
	/* The reactions of state SystemIdle. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (3))
	{ 
		if (local_SYSTEM_RUNNING_raised)
		{ 
			exseq_FSM_QualityGate__Egress_SystemIdle();
			enseq_FSM_QualityGate__Egress_Egress_default();
			transitioned_after = 3;
		}  else
		{
			if (ESTOP_TOGGLED_raised)
			{ 
				exseq_FSM_QualityGate__Egress_SystemIdle();
				enseq_FSM_QualityGate__Egress_EStop_default();
				transitioned_after = 3;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Motor_SystemMotor_react(const sc::integer transitioned_before) {
	/* The reactions of state SystemMotor. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (4))
	{ 
		if (MOTOR_FORWARD_raised)
		{ 
			exseq_FSM_QualityGate__Motor_SystemMotor();
			motorForward++;
			react_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_history();
			transitioned_after = 4;
		}  else
		{
			if (MOTOR_FORWARD_RESET_raised)
			{ 
				exseq_FSM_QualityGate__Motor_SystemMotor();
				motorForward--;
				react_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_history();
				transitioned_after = 4;
			}  else
			{
				if (MOTOR_SLOW_raised)
				{ 
					exseq_FSM_QualityGate__Motor_SystemMotor();
					motorSlow++;
					react_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_history();
					transitioned_after = 4;
				}  else
				{
					if (MOTOR_SLOW_RESET_raised)
					{ 
						exseq_FSM_QualityGate__Motor_SystemMotor();
						motorSlow--;
						react_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_history();
						transitioned_after = 4;
					}  else
					{
						if (MOTOR_STOP_raised)
						{ 
							exseq_FSM_QualityGate__Motor_SystemMotor();
							motorStop++;
							react_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_history();
							transitioned_after = 4;
						}  else
						{
							if (MOTOR_STOP_RESET_raised)
							{ 
								exseq_FSM_QualityGate__Motor_SystemMotor();
								motorStop--;
								react_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_history();
								transitioned_after = 4;
							} 
						}
					}
				}
			}
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle_react(const sc::integer transitioned_before) {
	/* The reactions of state Idle. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (4))
	{ 
		if ((motorStop) > (0))
		{ 
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle();
			enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_default();
			FSM_QualityGate__Motor_SystemMotor_react(4);
			transitioned_after = 4;
		}  else
		{
			if ((((motorStop) == (0)) && ((motorSlow) == (0))) && ((motorForward) > (0)))
			{ 
				exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle();
				enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_default();
				FSM_QualityGate__Motor_SystemMotor_react(4);
				transitioned_after = 4;
			}  else
			{
				if (((motorStop) == (0)) && ((motorSlow) > (0)))
				{ 
					exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle();
					enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_default();
					FSM_QualityGate__Motor_SystemMotor_react(4);
					transitioned_after = 4;
				} 
			}
		}
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate__Motor_SystemMotor_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_react(const sc::integer transitioned_before) {
	/* The reactions of state Forward. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (4))
	{ 
		if ((motorStop) > (0))
		{ 
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward();
			enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_default();
			FSM_QualityGate__Motor_SystemMotor_react(4);
			transitioned_after = 4;
		}  else
		{
			if (((motorStop) == (0)) && ((motorSlow) > (0)))
			{ 
				exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward();
				enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_default();
				FSM_QualityGate__Motor_SystemMotor_react(4);
				transitioned_after = 4;
			}  else
			{
				if ((((motorStop) == (0)) && ((motorSlow) == (0))) && ((motorForward) == (0)))
				{ 
					exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward();
					enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle_default();
					FSM_QualityGate__Motor_SystemMotor_react(4);
					transitioned_after = 4;
				} 
			}
		}
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate__Motor_SystemMotor_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_react(const sc::integer transitioned_before) {
	/* The reactions of state Slow. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (4))
	{ 
		if ((motorStop) > (0))
		{ 
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow();
			enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_default();
			FSM_QualityGate__Motor_SystemMotor_react(4);
			transitioned_after = 4;
		}  else
		{
			if ((((motorStop) == (0)) && ((motorSlow) == (0))) && ((motorForward) > (0)))
			{ 
				exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow();
				enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_default();
				FSM_QualityGate__Motor_SystemMotor_react(4);
				transitioned_after = 4;
			}  else
			{
				if ((((motorStop) == (0)) && ((motorSlow) == (0))) && ((motorForward) == (0)))
				{ 
					exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow();
					enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle_default();
					FSM_QualityGate__Motor_SystemMotor_react(4);
					transitioned_after = 4;
				} 
			}
		}
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate__Motor_SystemMotor_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_react(const sc::integer transitioned_before) {
	/* The reactions of state Stop. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (4))
	{ 
		if ((((motorStop) == (0)) && ((motorSlow) == (0))) && ((motorForward) == (0)))
		{ 
			exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop();
			enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle_default();
			FSM_QualityGate__Motor_SystemMotor_react(4);
			transitioned_after = 4;
		}  else
		{
			if (((motorStop) == (0)) && ((motorSlow) > (0)))
			{ 
				exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop();
				enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_default();
				FSM_QualityGate__Motor_SystemMotor_react(4);
				transitioned_after = 4;
			}  else
			{
				if ((((motorStop) == (0)) && ((motorSlow) == (0))) && ((motorForward) > (0)))
				{ 
					exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop();
					enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_default();
					FSM_QualityGate__Motor_SystemMotor_react(4);
					transitioned_after = 4;
				} 
			}
		}
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_QualityGate__Motor_SystemMotor_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_System_Operational_react(const sc::integer transitioned_before) {
	/* The reactions of state Operational. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (5))
	{ 
		if (ESTOP_TOGGLED_raised)
		{ 
			exseq_FSM_System_Operational();
			enseq_FSM_System_EStop_default();
			transitioned_after = 5;
		} 
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_System_Operational_FSM_Operational_Ready_react(const sc::integer transitioned_before) {
	/* The reactions of state Ready. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (5))
	{ 
		if (BGS_1_INTERRUPTED_raised)
		{ 
			exseq_FSM_System_Operational_FSM_Operational_Ready();
			enseq_FSM_System_Operational_FSM_Operational_Running_default();
			FSM_System_Operational_react(5);
			transitioned_after = 5;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_System_Operational_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_System_Operational_FSM_Operational_Running_react(const sc::integer transitioned_before) {
	/* The reactions of state Running. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (5))
	{ 
		if (BRS_1_INTERRUPTED_raised)
		{ 
			exseq_FSM_System_Operational_FSM_Operational_Running();
			enseq_FSM_System_Operational_FSM_Operational_Ready_default();
			FSM_System_Operational_react(5);
			transitioned_after = 5;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_System_Operational_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_System_EStop_react(const sc::integer transitioned_before) {
	/* The reactions of state EStop. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (5))
	{ 
		if (!(EStopFST_1_Toggle))
		{ 
			exseq_FSM_System_EStop();
			enseq_FSM_System_Operational_FSM_Operational_Ready_default();
			transitioned_after = 5;
		} 
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_Signaling_FSM_LAMP_react(const sc::integer transitioned_before) {
	/* The reactions of state FSM_LAMP. */
	sc::integer transitioned_after = transitioned_before;
	/* Always execute local reactions. */
	transitioned_after = react(transitioned_before);
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(const sc::integer transitioned_before) {
	/* The reactions of state FSM_Lamp. */
	sc::integer transitioned_after = transitioned_before;
	/* Always execute local reactions. */
	transitioned_after = FSM_Signaling_FSM_LAMP_react(transitioned_before);
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_react(const sc::integer transitioned_before) {
	/* The reactions of state Off. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (6))
	{ 
		if (local_SYSTEM_RUNNING_raised)
		{ 
			exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
			enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_default();
			transitioned_after = 6;
		}  else
		{
			if (ESTOP_TOGGLED_raised)
			{ 
				exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
				enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_default();
				transitioned_after = 6;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_react(const sc::integer transitioned_before) {
	/* The reactions of state Constant. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (6))
	{ 
		if (local_SYSTEM_STOPPED_raised)
		{ 
			exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant();
			enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_default();
			transitioned_after = 6;
		}  else
		{
			if (ESTOP_CLEARED_raised)
			{ 
				exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant();
				enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_default();
				transitioned_after = 6;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_react(const sc::integer transitioned_before) {
	/* The reactions of state Off. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (7))
	{ 
		if (ESTOP_TOGGLED_raised)
		{ 
			exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off();
			enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_default();
			transitioned_after = 7;
		}  else
		{
			if (local_LAMP_YELLOW_BLINKING_1_HZ_raised)
			{ 
				exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off();
				enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz_default();
				transitioned_after = 7;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_react(const sc::integer transitioned_before) {
	/* The reactions of state Constant. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (7))
	{ 
		if (ESTOP_CLEARED_raised)
		{ 
			exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant();
			enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_default();
			transitioned_after = 7;
		} 
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz_react(const sc::integer transitioned_before) {
	/* The reactions of state Blinking 1 Hz. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (7))
	{ 
		if (local_LAMP_YELLOW_BLINKING_1_HZ_RESET_raised)
		{ 
			exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz();
			enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_default();
			transitioned_after = 7;
		}  else
		{
			if (ESTOP_TOGGLED_raised)
			{ 
				exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz();
				enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_default();
				transitioned_after = 7;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_react(const sc::integer transitioned_before) {
	/* The reactions of state Off. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (8))
	{ 
		if (ESTOP_TOGGLED_raised)
		{ 
			exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off();
			enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_default();
			FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(6);
			transitioned_after = 8;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer FSM_QualityGate::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_react(const sc::integer transitioned_before) {
	/* The reactions of state Constant. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (8))
	{ 
		if (ESTOP_CLEARED_raised)
		{ 
			exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant();
			enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_default();
			FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(6);
			transitioned_after = 8;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(transitioned_before);
	} 
	return transitioned_after;
}

void FSM_QualityGate::clearInEvents() noexcept {
	ESTOP_TOGGLED_raised = false;
	ESTOP_CLEARED_raised = false;
	ESTOP_Received_raised = false;
	LBF_1_INTERRUPTED_raised = false;
	LBF_1_OPEN_raised = false;
	PUK_ENTRY_HeightMeasurement_raised = false;
	HS_1_OPEN_raised = false;
	HS_1_INTERRUPTED_raised = false;
	PUK_ENTRY_SORTING_raised = false;
	LBM_1_INTERRUPTED_raised = false;
	BGR_1_INTERRUPTED_raised = false;
	PUK_DESIRED_raised = false;
	PUK_NOT_DESIRED_raised = false;
	PUK_EJECTOR_DISTANCE_VALID_raised = false;
	LBE_1_OPEN_raised = false;
	LBE_1_INTERRUPTED_raised = false;
	LBR_1_INTERRUPTED_raised = false;
	MOTOR_STOP_raised = false;
	MOTOR_STOP_RESET_raised = false;
	MOTOR_SLOW_raised = false;
	MOTOR_SLOW_RESET_raised = false;
	MOTOR_FORWARD_raised = false;
	MOTOR_FORWARD_RESET_raised = false;
	LampEStop_raised = false;
	Lamp_raised = false;
	BGS_1_INTERRUPTED_raised = false;
	BRS_1_INTERRUPTED_raised = false;
	ESTOP_SIGNAL_raised = false;
	ESTOP_SIGNAL_RESET_raised = false;
	RUNNING_SIGNAL_raised = false;
	RUNNING_SIGNAL_RESET_raised = false;
	WARNING_SIGNAL_raised = false;
	WARNING_SIGNAL_RESET_raised = false;
	READY_SIGNAL_raised = false;
	READY_RESET_raised = false;
	ERROR_SIGNAL_raised = false;
}

void FSM_QualityGate::clearInternalEvents() noexcept {
	local_SYSTEM_STOPPED_raised = false;
	local_PUK_DISTANCE_VALID_raised = false;
	local_SYSTEM_RUNNING_raised = false;
	local_PUK_ENTRY_EGRESS_raised = false;
	local_LAMP_YELLOW_BLINKING_1_HZ_raised = false;
	local_LAMP_YELLOW_BLINKING_1_HZ_RESET_raised = false;
}

void FSM_QualityGate::microStep() {
	sc::integer transitioned = -1;
	stateConfVectorPosition = 0;
	switch(stateConfVector[ 0 ])
	{
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_Idle :
		{
			transitioned = FSM_QualityGate_Ingress_Ingress_Ingress_Idle_react(transitioned);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent :
		{
			transitioned = FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent_react(transitioned);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance :
		{
			transitioned = FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance_react(transitioned);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_EStop :
		{
			transitioned = FSM_QualityGate_Ingress_EStop_react(transitioned);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_SystemStopped :
		{
			transitioned = FSM_QualityGate_Ingress_SystemStopped_react(transitioned);
			break;
		}
		case FSM_QualityGate::State::FSM_QualityGate_Ingress_SystemIdle :
		{
			transitioned = FSM_QualityGate_Ingress_SystemIdle_react(transitioned);
			break;
		}
		default:
			/* do nothing */
			break;
	}
	if ((stateConfVectorPosition) < (1))
	{ 
		switch(stateConfVector[ 1 ])
		{
			case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle :
			{
				transitioned = FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring :
			{
				transitioned = FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent :
			{
				transitioned = FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_EStop :
			{
				transitioned = FSM_QualityGate__HeightMeasurement_EStop_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_SystemStopped :
			{
				transitioned = FSM_QualityGate__HeightMeasurement_SystemStopped_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__HeightMeasurement_SystemIdle :
			{
				transitioned = FSM_QualityGate__HeightMeasurement_SystemIdle_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (2))
	{ 
		switch(stateConfVector[ 2 ])
		{
			case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Idle :
			{
				transitioned = FSM_QualityGate__Sorting_Sorting_Sorting_Idle_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement :
			{
				transitioned = FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting :
			{
				transitioned = FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough :
			{
				transitioned = FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent :
			{
				transitioned = FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__Sorting_RampFull :
			{
				transitioned = FSM_QualityGate__Sorting_RampFull_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__Sorting_EStop :
			{
				transitioned = FSM_QualityGate__Sorting_EStop_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__Sorting_SystemIdle :
			{
				transitioned = FSM_QualityGate__Sorting_SystemIdle_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__Sorting_SystemStopped :
			{
				transitioned = FSM_QualityGate__Sorting_SystemStopped_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (3))
	{ 
		switch(stateConfVector[ 3 ])
		{
			case FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_IDLE :
			{
				transitioned = FSM_QualityGate__Egress_Egress_Egress_IDLE_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_PukPresent :
			{
				transitioned = FSM_QualityGate__Egress_Egress_Egress_PukPresent_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__Egress_Egress_Egress_Transfer :
			{
				transitioned = FSM_QualityGate__Egress_Egress_Egress_Transfer_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__Egress_SystemStopped :
			{
				transitioned = FSM_QualityGate__Egress_SystemStopped_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__Egress_EStop :
			{
				transitioned = FSM_QualityGate__Egress_EStop_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__Egress_SystemIdle :
			{
				transitioned = FSM_QualityGate__Egress_SystemIdle_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (4))
	{ 
		switch(stateConfVector[ 4 ])
		{
			case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle :
			{
				transitioned = FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward :
			{
				transitioned = FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow :
			{
				transitioned = FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop :
			{
				transitioned = FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (5))
	{ 
		switch(stateConfVector[ 5 ])
		{
			case FSM_QualityGate::State::FSM_System_Operational_FSM_Operational_Ready :
			{
				transitioned = FSM_System_Operational_FSM_Operational_Ready_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_System_Operational_FSM_Operational_Running :
			{
				transitioned = FSM_System_Operational_FSM_Operational_Running_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_System_EStop :
			{
				transitioned = FSM_System_EStop_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (6))
	{ 
		switch(stateConfVector[ 6 ])
		{
			case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off :
			{
				transitioned = FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant :
			{
				transitioned = FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (7))
	{ 
		switch(stateConfVector[ 7 ])
		{
			case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off :
			{
				transitioned = FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant :
			{
				transitioned = FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz :
			{
				transitioned = FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
	if ((stateConfVectorPosition) < (8))
	{ 
		switch(stateConfVector[ 8 ])
		{
			case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off :
			{
				FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_react(transitioned);
				break;
			}
			case FSM_QualityGate::State::FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant :
			{
				FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
}

void FSM_QualityGate::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	dispatchEvent(getNextEvent());
	do
	{ 
		microStep();
		clearInEvents();
		clearInternalEvents();
	} while (dispatchEvent(getNextEvent()));
	isExecuting = false;
}

void FSM_QualityGate::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart FSM_QualityGate */
	enseq_FSM_QualityGate_Ingress_default();
	enseq_FSM_QualityGate__HeightMeasurement_default();
	enseq_FSM_QualityGate__Sorting_default();
	enseq_FSM_QualityGate__Egress_default();
	enseq_FSM_QualityGate__Motor_default();
	enseq_FSM_System_default();
	enseq_FSM_Signaling_default();
	isExecuting = false;
}

void FSM_QualityGate::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart FSM_QualityGate */
	exseq_FSM_QualityGate_Ingress();
	stateConfVector[0] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 0;
	exseq_FSM_QualityGate__HeightMeasurement();
	stateConfVector[1] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 1;
	exseq_FSM_QualityGate__Sorting();
	stateConfVector[2] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 2;
	exseq_FSM_QualityGate__Egress();
	stateConfVector[3] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 3;
	exseq_FSM_QualityGate__Motor();
	stateConfVector[4] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 4;
	exseq_FSM_System();
	stateConfVector[5] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 5;
	exseq_FSM_Signaling();
	stateConfVector[6] = FSM_QualityGate::State::NO_STATE;
	stateConfVector[7] = FSM_QualityGate::State::NO_STATE;
	stateConfVector[8] = FSM_QualityGate::State::NO_STATE;
	stateConfVectorPosition = 8;
	isExecuting = false;
}

/* Can be used by the client code to trigger a run to completion step without raising an event. */
void FSM_QualityGate::triggerWithoutEvent() {
	runCycle();
}


