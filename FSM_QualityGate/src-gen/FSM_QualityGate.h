/** Generated by itemis CREATE code generator. */

#ifndef FSM_QUALITYGATE_H_
#define FSM_QUALITYGATE_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the FSM_QualityGate state machine.
*/
typedef struct FSM_QualityGate FSM_QualityGate;

/*!
* Forward declaration of the data structure for the FSM_QualityGateIface interface scope.
*/
typedef struct FSM_QualityGateIface FSM_QualityGateIface;

/*!
* Forward declaration of the data structure for the FSM_QualityGateInternal interface scope.
*/
typedef struct FSM_QualityGateInternal FSM_QualityGateInternal;

#ifdef __cplusplus
}
#endif

#include "../src/sc_types.h"
#include "../src/sc_rxc.h"
#include <string.h>

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file
Header of the state machine 'FSM_QualityGate'.
*/

#ifndef FSM_QUALITYGATE_EVENTQUEUE_BUFFERSIZE
#define FSM_QUALITYGATE_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef FSM_QUALITYGATE_IN_EVENTQUEUE_BUFFERSIZE
#define FSM_QUALITYGATE_IN_EVENTQUEUE_BUFFERSIZE FSM_QUALITYGATE_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef FSM_QUALITYGATE_INTERNAL_EVENTQUEUE_BUFFERSIZE
#define FSM_QUALITYGATE_INTERNAL_EVENTQUEUE_BUFFERSIZE FSM_QUALITYGATE_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define FSM_QUALITYGATE_STATE_COUNT 45

/*! Define dimension of the state configuration vector for orthogonal states. */
#define FSM_QUALITYGATE_MAX_ORTHOGONAL_STATES 9
/*! Define dimension of the state configuration vector for history states. */
#define FSM_QUALITYGATE_MAX_HISTORY_STATES 1

/*! Define indices of states in the StateConfVector */
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE_INGRESS_INGRESS 0
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE_INGRESS_INGRESS_INGRESS_IDLE 0
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE_INGRESS_INGRESS_INGRESS_PUKPRESENT 0
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE_INGRESS_INGRESS_INGRESS_CREATINGDISTANCE 0
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE_INGRESS_PAUSED 0
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__HEIGHTMEASUREMENT_HEIGHTMEASUREMENT 1
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__HEIGHTMEASUREMENT_HEIGHTMEASUREMENT_HEIGHTMEASUREMENT_IDLE 1
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__HEIGHTMEASUREMENT_HEIGHTMEASUREMENT_HEIGHTMEASUREMENT_MEASURING 1
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__HEIGHTMEASUREMENT_HEIGHTMEASUREMENT_HEIGHTMEASUREMENT_PUKPRESENT 1
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__HEIGHTMEASUREMENT_PAUSED 1
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__SORTING_SORTING 2
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__SORTING_SORTING_SORTING_IDLE 2
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__SORTING_SORTING_SORTING_METALMEASUREMENT 2
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__SORTING_SORTING_SORTING_PASSTHROUGH 2
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__SORTING_SORTING_SORTING_PUKPRESENT 2
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__SORTING_SORTING_SORTING_EJECTING 2
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__SORTING_RAMPFULL 2
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__SORTING_PAUSED 2
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__EGRESS_EGRESS 3
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__EGRESS_EGRESS_EGRESS_IDLE 3
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__EGRESS_EGRESS_EGRESS_PUKPRESENT 3
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__EGRESS_EGRESS_EGRESS_TRANSFER 3
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__EGRESS_PAUSED 3
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__MOTOR_SYSTEMMOTOR 4
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__MOTOR_SYSTEMMOTOR_FSM_SYSTEMMOTOR_IDLE 4
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__MOTOR_SYSTEMMOTOR_FSM_SYSTEMMOTOR_FORWARD 4
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__MOTOR_SYSTEMMOTOR_FSM_SYSTEMMOTOR_SLOW 4
#define SCVI_FSM_QUALITYGATE_FSM_QUALITYGATE__MOTOR_SYSTEMMOTOR_FSM_SYSTEMMOTOR_STOP 4
#define SCVI_FSM_QUALITYGATE_FSM_SYSTEM_OPERATIONAL 5
#define SCVI_FSM_QUALITYGATE_FSM_SYSTEM_ESTOP 5
#define SCVI_FSM_QUALITYGATE_FSM_SYSTEM_ESTOP_ESTOP_AWAITINGESTOPBUTTON 5
#define SCVI_FSM_QUALITYGATE_FSM_SYSTEM_ESTOP_ESTOP__FINAL_ 5
#define SCVI_FSM_QUALITYGATE_FSM_SYSTEM_START 5
#define SCVI_FSM_QUALITYGATE_FSM_SYSTEM_READY 5
#define SCVI_FSM_QUALITYGATE_FSM_SYSTEM_SERVICEMODE 5
#define SCVI_FSM_QUALITYGATE_FSM_SIGNALING_FSM_LAMP 6
#define SCVI_FSM_QUALITYGATE_FSM_SIGNALING_FSM_LAMP_FSM_LAMP_FSM_LAMP 6
#define SCVI_FSM_QUALITYGATE_FSM_SIGNALING_FSM_LAMP_FSM_LAMP_FSM_LAMP_FSM_LAMP_GREEN_OFF 6
#define SCVI_FSM_QUALITYGATE_FSM_SIGNALING_FSM_LAMP_FSM_LAMP_FSM_LAMP_FSM_LAMP_GREEN_CONSTANT 6
#define SCVI_FSM_QUALITYGATE_FSM_SIGNALING_FSM_LAMP_FSM_LAMP_FSM_LAMP_FSM_LAMP_GREEN_BLINKING_1HZ 6
#define SCVI_FSM_QUALITYGATE_FSM_SIGNALING_FSM_LAMP_FSM_LAMP_FSM_LAMP_FSM_LAMP_YELLOW_OFF 7
#define SCVI_FSM_QUALITYGATE_FSM_SIGNALING_FSM_LAMP_FSM_LAMP_FSM_LAMP_FSM_LAMP_YELLOW_CONSTANT 7
#define SCVI_FSM_QUALITYGATE_FSM_SIGNALING_FSM_LAMP_FSM_LAMP_FSM_LAMP_FSM_LAMP_YELLOW_BLINKING_1HZ 7
#define SCVI_FSM_QUALITYGATE_FSM_SIGNALING_FSM_LAMP_FSM_LAMP_FSM_LAMP_FSM_LAMP_RED_OFF 8
#define SCVI_FSM_QUALITYGATE_FSM_SIGNALING_FSM_LAMP_FSM_LAMP_FSM_LAMP_FSM_LAMP_RED_CONSTANT 8


/* 
 * Enum of event names in the statechart.
 */
typedef enum  {
	FSM_QualityGate_invalid_event = SC_INVALID_EVENT_VALUE,
	FSM_QualityGate_ESTOP_1_HIGH,
	FSM_QualityGate_ESTOP_1_LOW,
	FSM_QualityGate_LBF_1_INTERRUPTED,
	FSM_QualityGate_LBF_1_OPEN,
	FSM_QualityGate_PUK_ENTRY_HeightMeasurement,
	FSM_QualityGate_HS_1_SAMPLE,
	FSM_QualityGate_HS_1_SAMPLING_DONE,
	FSM_QualityGate_PUK_ENTRY_SORTING,
	FSM_QualityGate_TIMEOUT_200,
	FSM_QualityGate_LBM_1_INTERRUPTED,
	FSM_QualityGate_PUK_DESIRED,
	FSM_QualityGate_PUK_NOT_DESIRED,
	FSM_QualityGate_PUK_EJECTOR_DISTANCE_VALID,
	FSM_QualityGate_LBR_1_INTERRUPTED,
	FSM_QualityGate_LBR_1_OPEN,
	FSM_QualityGate_LBE_1_OPEN,
	FSM_QualityGate_LBE_1_INTERRUPTED,
	FSM_QualityGate_MOTOR_STOP,
	FSM_QualityGate_MOTOR_STOP_RESET,
	FSM_QualityGate_MOTOR_SLOW_RESET,
	FSM_QualityGate_MOTOR_FORWARD_RESET,
	FSM_QualityGate_BGS_1_LONG_PRESSED,
	FSM_QualityGate_BGS_1_INTERRUPTED,
	FSM_QualityGate_BRS_1_INTERRUPTED,
	FSM_QualityGate_BGR_1_INTERRUPTED,
	FSM_QualityGate_LampEStop,
	FSM_QualityGate_Lamp,
	FSM_QualityGate_ESTOP_SIGNAL,
	FSM_QualityGate_ESTOP_SIGNAL_RESET,
	FSM_QualityGate_RUNNING_SIGNAL,
	FSM_QualityGate_RUNNING_SIGNAL_RESET,
	FSM_QualityGate_WARNING_SIGNAL,
	FSM_QualityGate_WARNING_SIGNAL_RESET,
	FSM_QualityGate_READY_SIGNAL,
	FSM_QualityGate_READY_RESET,
	FSM_QualityGate_ERROR_SIGNAL,
	FSM_QualityGate_internal_local_SYSTEM_OPERATIONAL_OUT,
	FSM_QualityGate_internal_local_PUK_DISTANCE_VALID,
	FSM_QualityGate_internal_local_SYSTEM_OPERATIONAL_IN,
	FSM_QualityGate_internal_local_PUK_ENTRY_EGRESS,
	FSM_QualityGate_internal_local_ESTOP_RECEIVED,
	FSM_QualityGate_internal_local_SYSTEM_SERVICE_IN,
	FSM_QualityGate_internal_local_ESTOP_CLEARED,
	FSM_QualityGate_internal_local_SYSTEM_SERVICE_OUT,
	FSM_QualityGate_internal_local_LAMP_YELLOW_BLINKING_1_HZ,
	FSM_QualityGate_internal_local_LAMP_YELLOW_BLINKING_1_HZ_RESET
} FSM_QualityGateEventID;

/*
 * Struct that represents a single event.
 */
typedef struct {
	FSM_QualityGateEventID name;
} fsm_qualitygate_event;

/*
 * Queue that holds the raised events.
 */
typedef struct fsm_qualitygate_eventqueue_s {
	fsm_qualitygate_event *events;
	sc_integer capacity;
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} fsm_qualitygate_eventqueue;

/*! Enumeration of all states */ 
typedef enum
{
	FSM_QualityGate_last_state,
	FSM_QualityGate_FSM_QualityGate_Ingress_Ingress,
	FSM_QualityGate_FSM_QualityGate_Ingress_Ingress_Ingress_Idle,
	FSM_QualityGate_FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent,
	FSM_QualityGate_FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance,
	FSM_QualityGate_FSM_QualityGate_Ingress_Paused,
	FSM_QualityGate_FSM_QualityGate__HeightMeasurement_HeightMeasurement,
	FSM_QualityGate_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle,
	FSM_QualityGate_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring,
	FSM_QualityGate_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent,
	FSM_QualityGate_FSM_QualityGate__HeightMeasurement_Paused,
	FSM_QualityGate_FSM_QualityGate__Sorting_Sorting,
	FSM_QualityGate_FSM_QualityGate__Sorting_Sorting_Sorting_Idle,
	FSM_QualityGate_FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement,
	FSM_QualityGate_FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough,
	FSM_QualityGate_FSM_QualityGate__Sorting_Sorting_Sorting_PukPresent,
	FSM_QualityGate_FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting,
	FSM_QualityGate_FSM_QualityGate__Sorting_RampFull,
	FSM_QualityGate_FSM_QualityGate__Sorting_Paused,
	FSM_QualityGate_FSM_QualityGate__Egress_Egress,
	FSM_QualityGate_FSM_QualityGate__Egress_Egress_Egress_IDLE,
	FSM_QualityGate_FSM_QualityGate__Egress_Egress_Egress_PukPresent,
	FSM_QualityGate_FSM_QualityGate__Egress_Egress_Egress_Transfer,
	FSM_QualityGate_FSM_QualityGate__Egress_Paused,
	FSM_QualityGate_FSM_QualityGate__Motor_SystemMotor,
	FSM_QualityGate_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle,
	FSM_QualityGate_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward,
	FSM_QualityGate_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow,
	FSM_QualityGate_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop,
	FSM_QualityGate_FSM_System_Operational,
	FSM_QualityGate_FSM_System_EStop,
	FSM_QualityGate_FSM_System_EStop_EStop_AwaitingEStopButton,
	FSM_QualityGate_FSM_System_EStop_EStop__final_,
	FSM_QualityGate_FSM_System_Start,
	FSM_QualityGate_FSM_System_Ready,
	FSM_QualityGate_FSM_System_ServiceMode,
	FSM_QualityGate_FSM_Signaling_FSM_LAMP,
	FSM_QualityGate_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp,
	FSM_QualityGate_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off,
	FSM_QualityGate_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant,
	FSM_QualityGate_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Blinking_1Hz,
	FSM_QualityGate_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off,
	FSM_QualityGate_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant,
	FSM_QualityGate_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1Hz,
	FSM_QualityGate_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off,
	FSM_QualityGate_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant
} FSM_QualityGateStates;


/*! Type declaration of the data structure for the FSM_QualityGateIface interface scope. */
struct FSM_QualityGateIface
{
	sc_boolean calibrated;
	sc_observable SYSTEM_OPERATIONAL_IN;
	sc_observable SYSTEM_OPERATIONAL_OUT;
	sc_observable SYSTEM_SERVICE_IN;
	sc_observable SYSTEM_SERVICE_OUT;
	sc_boolean ESTOP_1_HIGH_raised;
	sc_boolean ESTOP_1_LOW_raised;
	sc_observable ESTOP_RECEIVED;
	sc_observable ESTOP_CLEARED;
	sc_boolean eStopActive;
	sc_boolean LBF_1_INTERRUPTED_raised;
	sc_boolean LBF_1_OPEN_raised;
	sc_boolean PUK_ENTRY_HeightMeasurement_raised;
	sc_observable LAMP_YELLOW_BLINKING_1_HZ;
	sc_observable LAMP_YELLOW_BLINKING_1_HZ_RESET;
	sc_boolean HS_1_SAMPLE_raised;
	sc_boolean HS_1_SAMPLING_DONE_raised;
	sc_observable PUK_DISTANCE_VALID;
	sc_boolean PUK_ENTRY_SORTING_raised;
	sc_boolean TIMEOUT_200_raised;
	sc_boolean FST1RampFull;
	sc_boolean LBM_1_INTERRUPTED_raised;
	sc_integer timePassed;
	sc_boolean PUK_DESIRED_raised;
	sc_boolean PUK_NOT_DESIRED_raised;
	sc_observable PUK_ENTRY_EGRESS;
	sc_boolean PUK_EJECTOR_DISTANCE_VALID_raised;
	sc_boolean LBR_1_INTERRUPTED_raised;
	sc_boolean LBR_1_OPEN_raised;
	sc_boolean ramp1Full;
	sc_boolean LBE_1_OPEN_raised;
	sc_boolean LBE_1_INTERRUPTED_raised;
	sc_boolean MOTOR_STOP_raised;
	sc_boolean MOTOR_STOP_RESET_raised;
	sc_boolean MOTOR_SLOW_RESET_raised;
	sc_boolean MOTOR_FORWARD_RESET_raised;
	sc_integer motorStop;
	sc_integer motorSlow;
	sc_integer motorForward;
	sc_boolean BGS_1_LONG_PRESSED_raised;
	sc_boolean BGS_1_INTERRUPTED_raised;
	sc_boolean BRS_1_INTERRUPTED_raised;
	sc_boolean BGR_1_INTERRUPTED_raised;
	sc_boolean LampEStop_raised;
	sc_boolean Lamp_raised;
	sc_observable SYSTEM_RUNNING;
	sc_observable SYSTEM_STOPPED;
	sc_boolean ESTOP_SIGNAL_raised;
	sc_boolean ESTOP_SIGNAL_RESET_raised;
	sc_boolean eStop_lamp_active;
	sc_boolean RUNNING_SIGNAL_raised;
	sc_boolean RUNNING_SIGNAL_RESET_raised;
	sc_boolean running_lamp_active;
	sc_boolean WARNING_SIGNAL_raised;
	sc_boolean WARNING_SIGNAL_RESET_raised;
	sc_boolean warning_lamp_active;
	sc_boolean READY_SIGNAL_raised;
	sc_boolean READY_RESET_raised;
	sc_boolean ERROR_SIGNAL_raised;
};



/*! Type declaration of the data structure for the FSM_QualityGateInternal interface scope. */
struct FSM_QualityGateInternal
{
	sc_boolean local_SYSTEM_OPERATIONAL_OUT_raised;
	sc_boolean local_PUK_DISTANCE_VALID_raised;
	sc_boolean local_SYSTEM_OPERATIONAL_IN_raised;
	sc_boolean local_PUK_ENTRY_EGRESS_raised;
	sc_boolean local_ESTOP_RECEIVED_raised;
	sc_boolean local_SYSTEM_SERVICE_IN_raised;
	sc_boolean local_ESTOP_CLEARED_raised;
	sc_boolean local_SYSTEM_SERVICE_OUT_raised;
	sc_boolean local_LAMP_YELLOW_BLINKING_1_HZ_raised;
	sc_boolean local_LAMP_YELLOW_BLINKING_1_HZ_RESET_raised;
};






/*! 
 * Type declaration of the data structure for the FSM_QualityGate state machine.
 * This data structure has to be allocated by the client code. 
 */
struct FSM_QualityGate
{
	FSM_QualityGateStates stateConfVector[FSM_QUALITYGATE_MAX_ORTHOGONAL_STATES];
	FSM_QualityGateStates historyVector[FSM_QUALITYGATE_MAX_HISTORY_STATES];
	FSM_QualityGateIface iface;
	FSM_QualityGateInternal internal;
	sc_boolean isExecuting;
	sc_integer stateConfVectorPosition;
	fsm_qualitygate_eventqueue internal_event_queue;
	fsm_qualitygate_event internal_buffer[FSM_QUALITYGATE_INTERNAL_EVENTQUEUE_BUFFERSIZE];
	fsm_qualitygate_eventqueue in_event_queue;
	fsm_qualitygate_event in_buffer[FSM_QUALITYGATE_IN_EVENTQUEUE_BUFFERSIZE];
};



/*! Initializes the FSM_QualityGate state machine data structures. Must be called before first usage.*/
extern void fSM_QualityGate_init(FSM_QualityGate* handle);


/*! Activates the state machine. */
extern void fSM_QualityGate_enter(FSM_QualityGate* handle);

/*! Deactivates the state machine. */
extern void fSM_QualityGate_exit(FSM_QualityGate* handle);

/*! 
Can be used by the client code to trigger a run to completion step without raising an event.
*/
extern void fSM_QualityGate_trigger_without_event(FSM_QualityGate* handle);



/*! Gets the value of the variable 'calibrated' that is defined in the default interface scope. */ 
extern sc_boolean fSM_QualityGate_get_calibrated(const FSM_QualityGate* handle);
/*! Sets the value of the variable 'calibrated' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_set_calibrated(FSM_QualityGate* handle, sc_boolean value);
/*! Returns the observable for the out event 'SYSTEM_OPERATIONAL_IN' that is defined in the default interface scope. */ 
extern sc_observable* fSM_QualityGate_get_sYSTEM_OPERATIONAL_IN(FSM_QualityGate* handle);

/*! Returns the observable for the out event 'SYSTEM_OPERATIONAL_OUT' that is defined in the default interface scope. */ 
extern sc_observable* fSM_QualityGate_get_sYSTEM_OPERATIONAL_OUT(FSM_QualityGate* handle);

/*! Returns the observable for the out event 'SYSTEM_SERVICE_IN' that is defined in the default interface scope. */ 
extern sc_observable* fSM_QualityGate_get_sYSTEM_SERVICE_IN(FSM_QualityGate* handle);

/*! Returns the observable for the out event 'SYSTEM_SERVICE_OUT' that is defined in the default interface scope. */ 
extern sc_observable* fSM_QualityGate_get_sYSTEM_SERVICE_OUT(FSM_QualityGate* handle);

/*! Raises the in event 'ESTOP_1_HIGH' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_eSTOP_1_HIGH(FSM_QualityGate* handle);
/*! Raises the in event 'ESTOP_1_LOW' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_eSTOP_1_LOW(FSM_QualityGate* handle);
/*! Returns the observable for the out event 'ESTOP_RECEIVED' that is defined in the default interface scope. */ 
extern sc_observable* fSM_QualityGate_get_eSTOP_RECEIVED(FSM_QualityGate* handle);

/*! Returns the observable for the out event 'ESTOP_CLEARED' that is defined in the default interface scope. */ 
extern sc_observable* fSM_QualityGate_get_eSTOP_CLEARED(FSM_QualityGate* handle);

/*! Gets the value of the variable 'eStopActive' that is defined in the default interface scope. */ 
extern sc_boolean fSM_QualityGate_get_eStopActive(const FSM_QualityGate* handle);
/*! Sets the value of the variable 'eStopActive' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_set_eStopActive(FSM_QualityGate* handle, sc_boolean value);
/*! Raises the in event 'LBF_1_INTERRUPTED' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_lBF_1_INTERRUPTED(FSM_QualityGate* handle);
/*! Raises the in event 'LBF_1_OPEN' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_lBF_1_OPEN(FSM_QualityGate* handle);
/*! Raises the in event 'PUK_ENTRY_HeightMeasurement' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_pUK_ENTRY_HeightMeasurement(FSM_QualityGate* handle);
/*! Returns the observable for the out event 'LAMP_YELLOW_BLINKING_1_HZ' that is defined in the default interface scope. */ 
extern sc_observable* fSM_QualityGate_get_lAMP_YELLOW_BLINKING_1_HZ(FSM_QualityGate* handle);

/*! Returns the observable for the out event 'LAMP_YELLOW_BLINKING_1_HZ_RESET' that is defined in the default interface scope. */ 
extern sc_observable* fSM_QualityGate_get_lAMP_YELLOW_BLINKING_1_HZ_RESET(FSM_QualityGate* handle);

/*! Raises the in event 'HS_1_SAMPLE' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_hS_1_SAMPLE(FSM_QualityGate* handle);
/*! Raises the in event 'HS_1_SAMPLING_DONE' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_hS_1_SAMPLING_DONE(FSM_QualityGate* handle);
/*! Returns the observable for the out event 'PUK_DISTANCE_VALID' that is defined in the default interface scope. */ 
extern sc_observable* fSM_QualityGate_get_pUK_DISTANCE_VALID(FSM_QualityGate* handle);

/*! Raises the in event 'PUK_ENTRY_SORTING' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_pUK_ENTRY_SORTING(FSM_QualityGate* handle);
/*! Raises the in event 'TIMEOUT_200' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_tIMEOUT_200(FSM_QualityGate* handle);
/*! Gets the value of the variable 'FST1RampFull' that is defined in the default interface scope. */ 
extern sc_boolean fSM_QualityGate_get_fST1RampFull(const FSM_QualityGate* handle);
/*! Sets the value of the variable 'FST1RampFull' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_set_fST1RampFull(FSM_QualityGate* handle, sc_boolean value);
/*! Raises the in event 'LBM_1_INTERRUPTED' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_lBM_1_INTERRUPTED(FSM_QualityGate* handle);
/*! Gets the value of the variable 'timePassed' that is defined in the default interface scope. */ 
extern sc_integer fSM_QualityGate_get_timePassed(const FSM_QualityGate* handle);
/*! Sets the value of the variable 'timePassed' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_set_timePassed(FSM_QualityGate* handle, sc_integer value);
/*! Raises the in event 'PUK_DESIRED' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_pUK_DESIRED(FSM_QualityGate* handle);
/*! Raises the in event 'PUK_NOT_DESIRED' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_pUK_NOT_DESIRED(FSM_QualityGate* handle);
/*! Returns the observable for the out event 'PUK_ENTRY_EGRESS' that is defined in the default interface scope. */ 
extern sc_observable* fSM_QualityGate_get_pUK_ENTRY_EGRESS(FSM_QualityGate* handle);

/*! Raises the in event 'PUK_EJECTOR_DISTANCE_VALID' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_pUK_EJECTOR_DISTANCE_VALID(FSM_QualityGate* handle);
/*! Raises the in event 'LBR_1_INTERRUPTED' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_lBR_1_INTERRUPTED(FSM_QualityGate* handle);
/*! Raises the in event 'LBR_1_OPEN' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_lBR_1_OPEN(FSM_QualityGate* handle);
/*! Gets the value of the variable 'ramp1Full' that is defined in the default interface scope. */ 
extern sc_boolean fSM_QualityGate_get_ramp1Full(const FSM_QualityGate* handle);
/*! Sets the value of the variable 'ramp1Full' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_set_ramp1Full(FSM_QualityGate* handle, sc_boolean value);
/*! Raises the in event 'LBE_1_OPEN' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_lBE_1_OPEN(FSM_QualityGate* handle);
/*! Raises the in event 'LBE_1_INTERRUPTED' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_lBE_1_INTERRUPTED(FSM_QualityGate* handle);
/*! Raises the in event 'MOTOR_STOP' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_mOTOR_STOP(FSM_QualityGate* handle);
/*! Raises the in event 'MOTOR_STOP_RESET' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_mOTOR_STOP_RESET(FSM_QualityGate* handle);
/*! Raises the in event 'MOTOR_SLOW_RESET' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_mOTOR_SLOW_RESET(FSM_QualityGate* handle);
/*! Raises the in event 'MOTOR_FORWARD_RESET' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_mOTOR_FORWARD_RESET(FSM_QualityGate* handle);
/*! Gets the value of the variable 'motorStop' that is defined in the default interface scope. */ 
extern sc_integer fSM_QualityGate_get_motorStop(const FSM_QualityGate* handle);
/*! Sets the value of the variable 'motorStop' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_set_motorStop(FSM_QualityGate* handle, sc_integer value);
/*! Gets the value of the variable 'motorSlow' that is defined in the default interface scope. */ 
extern sc_integer fSM_QualityGate_get_motorSlow(const FSM_QualityGate* handle);
/*! Sets the value of the variable 'motorSlow' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_set_motorSlow(FSM_QualityGate* handle, sc_integer value);
/*! Gets the value of the variable 'motorForward' that is defined in the default interface scope. */ 
extern sc_integer fSM_QualityGate_get_motorForward(const FSM_QualityGate* handle);
/*! Sets the value of the variable 'motorForward' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_set_motorForward(FSM_QualityGate* handle, sc_integer value);
/*! Raises the in event 'BGS_1_LONG_PRESSED' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_bGS_1_LONG_PRESSED(FSM_QualityGate* handle);
/*! Raises the in event 'BGS_1_INTERRUPTED' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_bGS_1_INTERRUPTED(FSM_QualityGate* handle);
/*! Raises the in event 'BRS_1_INTERRUPTED' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_bRS_1_INTERRUPTED(FSM_QualityGate* handle);
/*! Raises the in event 'BGR_1_INTERRUPTED' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_bGR_1_INTERRUPTED(FSM_QualityGate* handle);
/*! Raises the in event 'LampEStop' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_lampEStop(FSM_QualityGate* handle);
/*! Raises the in event 'Lamp' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_lamp(FSM_QualityGate* handle);
/*! Returns the observable for the out event 'SYSTEM_RUNNING' that is defined in the default interface scope. */ 
extern sc_observable* fSM_QualityGate_get_sYSTEM_RUNNING(FSM_QualityGate* handle);

/*! Returns the observable for the out event 'SYSTEM_STOPPED' that is defined in the default interface scope. */ 
extern sc_observable* fSM_QualityGate_get_sYSTEM_STOPPED(FSM_QualityGate* handle);

/*! Raises the in event 'ESTOP_SIGNAL' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_eSTOP_SIGNAL(FSM_QualityGate* handle);
/*! Raises the in event 'ESTOP_SIGNAL_RESET' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_eSTOP_SIGNAL_RESET(FSM_QualityGate* handle);
/*! Gets the value of the variable 'eStop_lamp_active' that is defined in the default interface scope. */ 
extern sc_boolean fSM_QualityGate_get_eStop_lamp_active(const FSM_QualityGate* handle);
/*! Sets the value of the variable 'eStop_lamp_active' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_set_eStop_lamp_active(FSM_QualityGate* handle, sc_boolean value);
/*! Raises the in event 'RUNNING_SIGNAL' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_rUNNING_SIGNAL(FSM_QualityGate* handle);
/*! Raises the in event 'RUNNING_SIGNAL_RESET' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_rUNNING_SIGNAL_RESET(FSM_QualityGate* handle);
/*! Gets the value of the variable 'running_lamp_active' that is defined in the default interface scope. */ 
extern sc_boolean fSM_QualityGate_get_running_lamp_active(const FSM_QualityGate* handle);
/*! Sets the value of the variable 'running_lamp_active' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_set_running_lamp_active(FSM_QualityGate* handle, sc_boolean value);
/*! Raises the in event 'WARNING_SIGNAL' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_wARNING_SIGNAL(FSM_QualityGate* handle);
/*! Raises the in event 'WARNING_SIGNAL_RESET' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_wARNING_SIGNAL_RESET(FSM_QualityGate* handle);
/*! Gets the value of the variable 'warning_lamp_active' that is defined in the default interface scope. */ 
extern sc_boolean fSM_QualityGate_get_warning_lamp_active(const FSM_QualityGate* handle);
/*! Sets the value of the variable 'warning_lamp_active' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_set_warning_lamp_active(FSM_QualityGate* handle, sc_boolean value);
/*! Raises the in event 'READY_SIGNAL' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_rEADY_SIGNAL(FSM_QualityGate* handle);
/*! Raises the in event 'READY_RESET' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_rEADY_RESET(FSM_QualityGate* handle);
/*! Raises the in event 'ERROR_SIGNAL' that is defined in the default interface scope. */ 
extern void fSM_QualityGate_raise_eRROR_SIGNAL(FSM_QualityGate* handle);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean fSM_QualityGate_is_active(const FSM_QualityGate* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean fSM_QualityGate_is_final(const FSM_QualityGate* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean fSM_QualityGate_is_state_active(const FSM_QualityGate* handle, FSM_QualityGateStates state);


#ifdef __cplusplus
}
#endif 

#endif /* FSM_QUALITYGATE_H_ */
