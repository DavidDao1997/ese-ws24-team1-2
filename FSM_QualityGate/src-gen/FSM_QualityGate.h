/** Generated by itemis CREATE code generator. */

#ifndef FSM_QUALITYGATE_H_
#define FSM_QUALITYGATE_H_

/*!
Forward declaration for the FSM_QualityGate state machine.
*/
class FSM_QualityGate;


#include <deque>
#include "../src/sc_types.h"
#include "../src/sc_rxcpp.h"
#include "../src/sc_statemachine.h"
#include "../src/sc_eventdriven.h"
#include <string.h>

/*! \file
Header of the state machine 'FSM_QualityGate'.
*/


class FSM_QualityGate : public sc::EventDrivenInterface
{
	public:
		FSM_QualityGate() noexcept;
		
		virtual ~FSM_QualityGate();
		
		
		
		/*! Enumeration of all states. */
		enum class State
		{
			NO_STATE,
			FSM_QualityGate_Ingress_Ingress,
			FSM_QualityGate_Ingress_Ingress_Ingress_Idle,
			FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent,
			FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance,
			FSM_QualityGate_Ingress_EStop,
			FSM_QualityGate_Ingress_SystemStopped,
			FSM_QualityGate_Ingress_SystemIdle,
			FSM_QualityGate__HeightMeasurement_HeightMeasurement,
			FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle,
			FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring,
			FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent,
			FSM_QualityGate__HeightMeasurement_EStop,
			FSM_QualityGate__HeightMeasurement_SystemStopped,
			FSM_QualityGate__HeightMeasurement_SystemIdle,
			FSM_QualityGate__Sorting_Sorting,
			FSM_QualityGate__Sorting_Sorting_Sorting_Idle,
			FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement,
			FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting,
			FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough,
			FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent,
			FSM_QualityGate__Sorting_RampFull,
			FSM_QualityGate__Sorting_EStop,
			FSM_QualityGate__Sorting_SystemIdle,
			FSM_QualityGate__Sorting_SystemStopped,
			FSM_QualityGate__Egress_Egress,
			FSM_QualityGate__Egress_Egress_Egress_IDLE,
			FSM_QualityGate__Egress_Egress_Egress_PukPresent,
			FSM_QualityGate__Egress_Egress_Egress_Transfer,
			FSM_QualityGate__Egress_SystemStopped,
			FSM_QualityGate__Egress_EStop,
			FSM_QualityGate__Egress_SystemIdle,
			FSM_QualityGate__Motor_SystemMotor,
			FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle,
			FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward,
			FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow,
			FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop,
			FSM_System_Operational,
			FSM_System_Operational_FSM_Operational_Ready,
			FSM_System_Operational_FSM_Operational_Running,
			FSM_System_EStop,
			FSM_Signaling_FSM_LAMP,
			FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp,
			FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off,
			FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant,
			FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off,
			FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant,
			FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz,
			FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off,
			FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant
		};
		
		/*! The number of states. */
		static constexpr const sc::integer numStates {49};
		static constexpr const sc::integer scvi_FSM_QualityGate_Ingress_Ingress {0};
		static constexpr const sc::integer scvi_FSM_QualityGate_Ingress_Ingress_Ingress_Idle {0};
		static constexpr const sc::integer scvi_FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent {0};
		static constexpr const sc::integer scvi_FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance {0};
		static constexpr const sc::integer scvi_FSM_QualityGate_Ingress_EStop {0};
		static constexpr const sc::integer scvi_FSM_QualityGate_Ingress_SystemStopped {0};
		static constexpr const sc::integer scvi_FSM_QualityGate_Ingress_SystemIdle {0};
		static constexpr const sc::integer scvi_FSM_QualityGate__HeightMeasurement_HeightMeasurement {1};
		static constexpr const sc::integer scvi_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle {1};
		static constexpr const sc::integer scvi_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring {1};
		static constexpr const sc::integer scvi_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent {1};
		static constexpr const sc::integer scvi_FSM_QualityGate__HeightMeasurement_EStop {1};
		static constexpr const sc::integer scvi_FSM_QualityGate__HeightMeasurement_SystemStopped {1};
		static constexpr const sc::integer scvi_FSM_QualityGate__HeightMeasurement_SystemIdle {1};
		static constexpr const sc::integer scvi_FSM_QualityGate__Sorting_Sorting {2};
		static constexpr const sc::integer scvi_FSM_QualityGate__Sorting_Sorting_Sorting_Idle {2};
		static constexpr const sc::integer scvi_FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement {2};
		static constexpr const sc::integer scvi_FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting {2};
		static constexpr const sc::integer scvi_FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough {2};
		static constexpr const sc::integer scvi_FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent {2};
		static constexpr const sc::integer scvi_FSM_QualityGate__Sorting_RampFull {2};
		static constexpr const sc::integer scvi_FSM_QualityGate__Sorting_EStop {2};
		static constexpr const sc::integer scvi_FSM_QualityGate__Sorting_SystemIdle {2};
		static constexpr const sc::integer scvi_FSM_QualityGate__Sorting_SystemStopped {2};
		static constexpr const sc::integer scvi_FSM_QualityGate__Egress_Egress {3};
		static constexpr const sc::integer scvi_FSM_QualityGate__Egress_Egress_Egress_IDLE {3};
		static constexpr const sc::integer scvi_FSM_QualityGate__Egress_Egress_Egress_PukPresent {3};
		static constexpr const sc::integer scvi_FSM_QualityGate__Egress_Egress_Egress_Transfer {3};
		static constexpr const sc::integer scvi_FSM_QualityGate__Egress_SystemStopped {3};
		static constexpr const sc::integer scvi_FSM_QualityGate__Egress_EStop {3};
		static constexpr const sc::integer scvi_FSM_QualityGate__Egress_SystemIdle {3};
		static constexpr const sc::integer scvi_FSM_QualityGate__Motor_SystemMotor {4};
		static constexpr const sc::integer scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle {4};
		static constexpr const sc::integer scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward {4};
		static constexpr const sc::integer scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow {4};
		static constexpr const sc::integer scvi_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop {4};
		static constexpr const sc::integer scvi_FSM_System_Operational {5};
		static constexpr const sc::integer scvi_FSM_System_Operational_FSM_Operational_Ready {5};
		static constexpr const sc::integer scvi_FSM_System_Operational_FSM_Operational_Running {5};
		static constexpr const sc::integer scvi_FSM_System_EStop {5};
		static constexpr const sc::integer scvi_FSM_Signaling_FSM_LAMP {6};
		static constexpr const sc::integer scvi_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp {6};
		static constexpr const sc::integer scvi_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off {6};
		static constexpr const sc::integer scvi_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant {6};
		static constexpr const sc::integer scvi_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off {7};
		static constexpr const sc::integer scvi_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant {7};
		static constexpr const sc::integer scvi_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz {7};
		static constexpr const sc::integer scvi_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off {8};
		static constexpr const sc::integer scvi_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant {8};
		
		/*! Enumeration of all events which are consumed. */
		enum class Event
		{
			NO_EVENT,
			ESTOP_TOGGLED,
			ESTOP_CLEARED,
			ESTOP_Received,
			LBF_1_INTERRUPTED,
			LBF_1_OPEN,
			PUK_ENTRY_HeightMeasurement,
			HS_1_OPEN,
			HS_1_INTERRUPTED,
			PUK_ENTRY_SORTING,
			LBM_1_INTERRUPTED,
			BGR_1_INTERRUPTED,
			PUK_DESIRED,
			PUK_NOT_DESIRED,
			PUK_EJECTOR_DISTANCE_VALID,
			LBE_1_OPEN,
			LBE_1_INTERRUPTED,
			LBR_1_INTERRUPTED,
			MOTOR_STOP,
			MOTOR_STOP_RESET,
			MOTOR_SLOW,
			MOTOR_SLOW_RESET,
			MOTOR_FORWARD,
			MOTOR_FORWARD_RESET,
			LampEStop,
			Lamp,
			BGS_1_INTERRUPTED,
			BRS_1_INTERRUPTED,
			ESTOP_SIGNAL,
			ESTOP_SIGNAL_RESET,
			RUNNING_SIGNAL,
			RUNNING_SIGNAL_RESET,
			WARNING_SIGNAL,
			WARNING_SIGNAL_RESET,
			READY_SIGNAL,
			READY_RESET,
			ERROR_SIGNAL,
			Internal_local_SYSTEM_STOPPED,
			Internal_local_PUK_DISTANCE_VALID,
			Internal_local_SYSTEM_RUNNING,
			Internal_local_PUK_ENTRY_EGRESS,
			Internal_local_LAMP_YELLOW_BLINKING_1_HZ,
			Internal_local_LAMP_YELLOW_BLINKING_1_HZ_RESET
		};
		
		class EventInstance
		{
			public:
				explicit  EventInstance(Event id) noexcept : eventId(id){}
				virtual ~EventInstance() = default;
				const Event eventId;
		};
		/*! Raises the in event 'ESTOP_TOGGLED' of default interface scope. */
		void raiseESTOP_TOGGLED();
		/*! Raises the in event 'ESTOP_CLEARED' of default interface scope. */
		void raiseESTOP_CLEARED();
		/*! Raises the in event 'ESTOP_Received' of default interface scope. */
		void raiseESTOP_Received();
		/*! Raises the in event 'LBF_1_INTERRUPTED' of default interface scope. */
		void raiseLBF_1_INTERRUPTED();
		/*! Raises the in event 'LBF_1_OPEN' of default interface scope. */
		void raiseLBF_1_OPEN();
		/*! Raises the in event 'PUK_ENTRY_HeightMeasurement' of default interface scope. */
		void raisePUK_ENTRY_HeightMeasurement();
		/*! Get observable for event 'LAMP_YELLOW_BLINKING_1_HZ' of default interface scope. */
		sc::rx::Observable<void>& getLAMP_YELLOW_BLINKING_1_HZ() noexcept;
		/*! Get observable for event 'LAMP_YELLOW_BLINKING_1_HZ_RESET' of default interface scope. */
		sc::rx::Observable<void>& getLAMP_YELLOW_BLINKING_1_HZ_RESET() noexcept;
		/*! Raises the in event 'HS_1_OPEN' of default interface scope. */
		void raiseHS_1_OPEN();
		/*! Raises the in event 'HS_1_INTERRUPTED' of default interface scope. */
		void raiseHS_1_INTERRUPTED();
		/*! Get observable for event 'PUK_DISTANCE_VALID' of default interface scope. */
		sc::rx::Observable<void>& getPUK_DISTANCE_VALID() noexcept;
		/*! Raises the in event 'PUK_ENTRY_SORTING' of default interface scope. */
		void raisePUK_ENTRY_SORTING();
		/*! Raises the in event 'LBM_1_INTERRUPTED' of default interface scope. */
		void raiseLBM_1_INTERRUPTED();
		/*! Raises the in event 'BGR_1_INTERRUPTED' of default interface scope. */
		void raiseBGR_1_INTERRUPTED();
		/*! Raises the in event 'PUK_DESIRED' of default interface scope. */
		void raisePUK_DESIRED();
		/*! Raises the in event 'PUK_NOT_DESIRED' of default interface scope. */
		void raisePUK_NOT_DESIRED();
		/*! Get observable for event 'PUK_ENTRY_EGRESS' of default interface scope. */
		sc::rx::Observable<void>& getPUK_ENTRY_EGRESS() noexcept;
		/*! Raises the in event 'PUK_EJECTOR_DISTANCE_VALID' of default interface scope. */
		void raisePUK_EJECTOR_DISTANCE_VALID();
		/*! Raises the in event 'LBE_1_OPEN' of default interface scope. */
		void raiseLBE_1_OPEN();
		/*! Raises the in event 'LBE_1_INTERRUPTED' of default interface scope. */
		void raiseLBE_1_INTERRUPTED();
		/*! Raises the in event 'LBR_1_INTERRUPTED' of default interface scope. */
		void raiseLBR_1_INTERRUPTED();
		/*! Raises the in event 'MOTOR_STOP' of default interface scope. */
		void raiseMOTOR_STOP();
		/*! Raises the in event 'MOTOR_STOP_RESET' of default interface scope. */
		void raiseMOTOR_STOP_RESET();
		/*! Raises the in event 'MOTOR_SLOW' of default interface scope. */
		void raiseMOTOR_SLOW();
		/*! Raises the in event 'MOTOR_SLOW_RESET' of default interface scope. */
		void raiseMOTOR_SLOW_RESET();
		/*! Raises the in event 'MOTOR_FORWARD' of default interface scope. */
		void raiseMOTOR_FORWARD();
		/*! Raises the in event 'MOTOR_FORWARD_RESET' of default interface scope. */
		void raiseMOTOR_FORWARD_RESET();
		/*! Raises the in event 'LampEStop' of default interface scope. */
		void raiseLampEStop();
		/*! Raises the in event 'Lamp' of default interface scope. */
		void raiseLamp();
		/*! Raises the in event 'BGS_1_INTERRUPTED' of default interface scope. */
		void raiseBGS_1_INTERRUPTED();
		/*! Raises the in event 'BRS_1_INTERRUPTED' of default interface scope. */
		void raiseBRS_1_INTERRUPTED();
		/*! Get observable for event 'SYSTEM_RUNNING' of default interface scope. */
		sc::rx::Observable<void>& getSYSTEM_RUNNING() noexcept;
		/*! Get observable for event 'SYSTEM_STOPPED' of default interface scope. */
		sc::rx::Observable<void>& getSYSTEM_STOPPED() noexcept;
		/*! Raises the in event 'ESTOP_SIGNAL' of default interface scope. */
		void raiseESTOP_SIGNAL();
		/*! Raises the in event 'ESTOP_SIGNAL_RESET' of default interface scope. */
		void raiseESTOP_SIGNAL_RESET();
		/*! Raises the in event 'RUNNING_SIGNAL' of default interface scope. */
		void raiseRUNNING_SIGNAL();
		/*! Raises the in event 'RUNNING_SIGNAL_RESET' of default interface scope. */
		void raiseRUNNING_SIGNAL_RESET();
		/*! Raises the in event 'WARNING_SIGNAL' of default interface scope. */
		void raiseWARNING_SIGNAL();
		/*! Raises the in event 'WARNING_SIGNAL_RESET' of default interface scope. */
		void raiseWARNING_SIGNAL_RESET();
		/*! Raises the in event 'READY_SIGNAL' of default interface scope. */
		void raiseREADY_SIGNAL();
		/*! Raises the in event 'READY_RESET' of default interface scope. */
		void raiseREADY_RESET();
		/*! Raises the in event 'ERROR_SIGNAL' of default interface scope. */
		void raiseERROR_SIGNAL();
		
		
		/*! Gets the value of the variable 'EStopFST_1_Toggle' that is defined in the default interface scope. */
		bool getEStopFST_1_Toggle() const noexcept;
		/*! Sets the value of the variable 'EStopFST_1_Toggle' that is defined in the default interface scope. */
		void setEStopFST_1_Toggle(bool EStopFST_1_Toggle) noexcept;
		/*! Gets the value of the variable 'FST1RampFull' that is defined in the default interface scope. */
		bool getFST1RampFull() const noexcept;
		/*! Sets the value of the variable 'FST1RampFull' that is defined in the default interface scope. */
		void setFST1RampFull(bool FST1RampFull) noexcept;
		/*! Gets the value of the variable 'timePassed' that is defined in the default interface scope. */
		sc::integer getTimePassed() const noexcept;
		/*! Sets the value of the variable 'timePassed' that is defined in the default interface scope. */
		void setTimePassed(sc::integer timePassed) noexcept;
		/*! Gets the value of the variable 'motorStop' that is defined in the default interface scope. */
		sc::integer getMotorStop() const noexcept;
		/*! Sets the value of the variable 'motorStop' that is defined in the default interface scope. */
		void setMotorStop(sc::integer motorStop) noexcept;
		/*! Gets the value of the variable 'motorSlow' that is defined in the default interface scope. */
		sc::integer getMotorSlow() const noexcept;
		/*! Sets the value of the variable 'motorSlow' that is defined in the default interface scope. */
		void setMotorSlow(sc::integer motorSlow) noexcept;
		/*! Gets the value of the variable 'motorForward' that is defined in the default interface scope. */
		sc::integer getMotorForward() const noexcept;
		/*! Sets the value of the variable 'motorForward' that is defined in the default interface scope. */
		void setMotorForward(sc::integer motorForward) noexcept;
		/*! Gets the value of the variable 'eStop_lamp_active' that is defined in the default interface scope. */
		bool getEStop_lamp_active() const noexcept;
		/*! Sets the value of the variable 'eStop_lamp_active' that is defined in the default interface scope. */
		void setEStop_lamp_active(bool eStop_lamp_active) noexcept;
		/*! Gets the value of the variable 'running_lamp_active' that is defined in the default interface scope. */
		bool getRunning_lamp_active() const noexcept;
		/*! Sets the value of the variable 'running_lamp_active' that is defined in the default interface scope. */
		void setRunning_lamp_active(bool running_lamp_active) noexcept;
		/*! Gets the value of the variable 'warning_lamp_active' that is defined in the default interface scope. */
		bool getWarning_lamp_active() const noexcept;
		/*! Sets the value of the variable 'warning_lamp_active' that is defined in the default interface scope. */
		void setWarning_lamp_active(bool warning_lamp_active) noexcept;
		
		/*! Can be used by the client code to trigger a run to completion step without raising an event. */
		void triggerWithoutEvent() override;
		
		/*
		 * Functions inherited from StatemachineInterface
		 */
		 void enter() override;
		
		 void exit() override;
		
		/*!
		 * Checks if the state machine is active (until 2.4.1 this method was used for states).
		 * A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		 */
		 bool isActive() const noexcept override;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		 bool isFinal() const noexcept override;
		
		/*! 
		 * Checks if member of the state machine must be set. For example an operation callback.
		 */
		bool check() const noexcept;
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		bool isStateActive(State state) const noexcept;
		
		
		
	protected:
		
		
		std::deque<EventInstance*> incomingEventQueue;
		
		std::deque<EventInstance*> internalEventQueue;
		
		EventInstance* getNextEvent() noexcept;
		
		bool dispatchEvent(EventInstance* event) noexcept;
		
		
		
	private:
		
		bool EStopFST_1_Toggle {false};
		bool FST1RampFull {false};
		sc::integer timePassed {0};
		sc::integer motorStop {0};
		sc::integer motorSlow {0};
		sc::integer motorForward {0};
		bool eStop_lamp_active {false};
		bool running_lamp_active {false};
		bool warning_lamp_active {false};
		
		
		
		
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc::ushort maxOrthogonalStates {9};
		//! dimension of the state configuration vector for history states
		static const sc::ushort maxHistoryStates {1};
		
		
		
		State stateConfVector[maxOrthogonalStates];
		
		State historyVector[maxHistoryStates];
		
		
		
		bool isExecuting {false};
		sc::integer stateConfVectorPosition {0};
		
		
		
		// prototypes of all internal functions
		
		void enact_FSM_QualityGate_Ingress_Ingress_Ingress_Idle();
		void enact_FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent();
		void enact_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring();
		void enact_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent();
		void enact_FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent();
		void enact_FSM_QualityGate__Sorting_RampFull();
		void enact_FSM_QualityGate__Egress_Egress_Egress_PukPresent();
		void enact_FSM_QualityGate__Egress_Egress_Egress_Transfer();
		void enact_FSM_System_Operational_FSM_Operational_Running();
		void enact_FSM_System_EStop();
		void exact_FSM_QualityGate_Ingress_Ingress_Ingress_Idle();
		void exact_FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance();
		void exact_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring();
		void exact_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent();
		void exact_FSM_QualityGate__Sorting_RampFull();
		void exact_FSM_QualityGate__Egress_Egress_Egress_PukPresent();
		void exact_FSM_QualityGate__Egress_Egress_Egress_Transfer();
		void exact_FSM_System_Operational_FSM_Operational_Running();
		void exact_FSM_System_EStop();
		void enseq_FSM_QualityGate_Ingress_Ingress_default();
		void enseq_FSM_QualityGate_Ingress_Ingress_Ingress_Idle_default();
		void enseq_FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent_default();
		void enseq_FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance_default();
		void enseq_FSM_QualityGate_Ingress_EStop_default();
		void enseq_FSM_QualityGate_Ingress_SystemStopped_default();
		void enseq_FSM_QualityGate_Ingress_SystemIdle_default();
		void enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_default();
		void enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle_default();
		void enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring_default();
		void enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent_default();
		void enseq_FSM_QualityGate__HeightMeasurement_EStop_default();
		void enseq_FSM_QualityGate__HeightMeasurement_SystemStopped_default();
		void enseq_FSM_QualityGate__HeightMeasurement_SystemIdle_default();
		void enseq_FSM_QualityGate__Sorting_Sorting_default();
		void enseq_FSM_QualityGate__Sorting_Sorting_Sorting_Idle_default();
		void enseq_FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement_default();
		void enseq_FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting_default();
		void enseq_FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough_default();
		void enseq_FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent_default();
		void enseq_FSM_QualityGate__Sorting_RampFull_default();
		void enseq_FSM_QualityGate__Sorting_EStop_default();
		void enseq_FSM_QualityGate__Sorting_SystemIdle_default();
		void enseq_FSM_QualityGate__Sorting_SystemStopped_default();
		void enseq_FSM_QualityGate__Egress_Egress_default();
		void enseq_FSM_QualityGate__Egress_Egress_Egress_IDLE_default();
		void enseq_FSM_QualityGate__Egress_Egress_Egress_PukPresent_default();
		void enseq_FSM_QualityGate__Egress_Egress_Egress_Transfer_default();
		void enseq_FSM_QualityGate__Egress_SystemStopped_default();
		void enseq_FSM_QualityGate__Egress_EStop_default();
		void enseq_FSM_QualityGate__Egress_SystemIdle_default();
		void enseq_FSM_QualityGate__Motor_SystemMotor_default();
		void enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle_default();
		void enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_default();
		void enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_default();
		void enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_default();
		void enseq_FSM_System_Operational_default();
		void enseq_FSM_System_Operational_FSM_Operational_Ready_default();
		void enseq_FSM_System_Operational_FSM_Operational_Running_default();
		void enseq_FSM_System_EStop_default();
		void enseq_FSM_Signaling_FSM_LAMP_default();
		void enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_default();
		void enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_default();
		void enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_default();
		void enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_default();
		void enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_default();
		void enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz_default();
		void enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_default();
		void enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_default();
		void enseq_FSM_QualityGate_Ingress_default();
		void enseq_FSM_QualityGate_Ingress_Ingress_Ingress_default();
		void enseq_FSM_QualityGate__HeightMeasurement_default();
		void enseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_default();
		void enseq_FSM_QualityGate__Sorting_default();
		void enseq_FSM_QualityGate__Sorting_Sorting_Sorting_default();
		void enseq_FSM_QualityGate__Egress_default();
		void enseq_FSM_QualityGate__Egress_Egress_Egress_default();
		void enseq_FSM_QualityGate__Motor_default();
		void enseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_default();
		void shenseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor();
		void enseq_FSM_System_default();
		void enseq_FSM_System_Operational_FSM_Operational_default();
		void enseq_FSM_Signaling_default();
		void enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_default();
		void enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_default();
		void enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_default();
		void enseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_default();
		void exseq_FSM_QualityGate_Ingress_Ingress();
		void exseq_FSM_QualityGate_Ingress_Ingress_Ingress_Idle();
		void exseq_FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent();
		void exseq_FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance();
		void exseq_FSM_QualityGate_Ingress_EStop();
		void exseq_FSM_QualityGate_Ingress_SystemStopped();
		void exseq_FSM_QualityGate_Ingress_SystemIdle();
		void exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement();
		void exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle();
		void exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring();
		void exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent();
		void exseq_FSM_QualityGate__HeightMeasurement_EStop();
		void exseq_FSM_QualityGate__HeightMeasurement_SystemStopped();
		void exseq_FSM_QualityGate__HeightMeasurement_SystemIdle();
		void exseq_FSM_QualityGate__Sorting_Sorting();
		void exseq_FSM_QualityGate__Sorting_Sorting_Sorting_Idle();
		void exseq_FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement();
		void exseq_FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting();
		void exseq_FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough();
		void exseq_FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent();
		void exseq_FSM_QualityGate__Sorting_RampFull();
		void exseq_FSM_QualityGate__Sorting_EStop();
		void exseq_FSM_QualityGate__Sorting_SystemIdle();
		void exseq_FSM_QualityGate__Sorting_SystemStopped();
		void exseq_FSM_QualityGate__Egress_Egress();
		void exseq_FSM_QualityGate__Egress_Egress_Egress_IDLE();
		void exseq_FSM_QualityGate__Egress_Egress_Egress_PukPresent();
		void exseq_FSM_QualityGate__Egress_Egress_Egress_Transfer();
		void exseq_FSM_QualityGate__Egress_SystemStopped();
		void exseq_FSM_QualityGate__Egress_EStop();
		void exseq_FSM_QualityGate__Egress_SystemIdle();
		void exseq_FSM_QualityGate__Motor_SystemMotor();
		void exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle();
		void exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward();
		void exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow();
		void exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop();
		void exseq_FSM_System_Operational();
		void exseq_FSM_System_Operational_FSM_Operational_Ready();
		void exseq_FSM_System_Operational_FSM_Operational_Running();
		void exseq_FSM_System_EStop();
		void exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off();
		void exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant();
		void exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off();
		void exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant();
		void exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz();
		void exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off();
		void exseq_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant();
		void exseq_FSM_QualityGate_Ingress();
		void exseq_FSM_QualityGate_Ingress_Ingress_Ingress();
		void exseq_FSM_QualityGate__HeightMeasurement();
		void exseq_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement();
		void exseq_FSM_QualityGate__Sorting();
		void exseq_FSM_QualityGate__Sorting_Sorting_Sorting();
		void exseq_FSM_QualityGate__Egress();
		void exseq_FSM_QualityGate__Egress_Egress_Egress();
		void exseq_FSM_QualityGate__Motor();
		void exseq_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor();
		void exseq_FSM_System();
		void exseq_FSM_System_Operational_FSM_Operational();
		void exseq_FSM_Signaling();
		void react_FSM_QualityGate_Ingress_Ingress_Ingress__entry_Default();
		void react_FSM_QualityGate_Ingress__entry_Default();
		void react_FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement__entry_Default();
		void react_FSM_QualityGate__HeightMeasurement__entry_Default();
		void react_FSM_QualityGate__Sorting_Sorting_Sorting__entry_Default();
		void react_FSM_QualityGate__Sorting__entry_Default();
		void react_FSM_QualityGate__Egress_Egress_Egress__entry_Default();
		void react_FSM_QualityGate__Egress__entry_Default();
		void react_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor__entry_Default();
		void react_FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_history();
		void react_FSM_QualityGate__Motor__entry_Default();
		void react_FSM_System__entry_Default();
		void react_FSM_System_Operational_FSM_Operational__entry_Default();
		void react_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green__entry_Default();
		void react_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow__entry_Default();
		void react_FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red__entry_Default();
		void react_FSM_Signaling_FSM_LAMP_FSM_LAMP__entry_Default();
		void react_FSM_Signaling__entry_Default();
		sc::integer react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate_Ingress_Ingress_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate_Ingress_Ingress_Ingress_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate_Ingress_Ingress_Ingress_PukPresent_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate_Ingress_Ingress_Ingress_CreatingDistance_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate_Ingress_EStop_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate_Ingress_SystemStopped_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate_Ingress_SystemIdle_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__HeightMeasurement_HeightMeasurement_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_Measuring_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__HeightMeasurement_HeightMeasurement_HeightMeasurement_PukPresent_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__HeightMeasurement_EStop_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__HeightMeasurement_SystemStopped_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__HeightMeasurement_SystemIdle_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Sorting_Sorting_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Sorting_Sorting_Sorting_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Sorting_Sorting_Sorting_MetalMeasurement_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Sorting_Sorting_Sorting_Ejecting_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Sorting_Sorting_Sorting_Passthrough_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Sorting_Sorting_Sorting_PUkPresent_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Sorting_RampFull_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Sorting_EStop_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Sorting_SystemIdle_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Sorting_SystemStopped_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Egress_Egress_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Egress_Egress_Egress_IDLE_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Egress_Egress_Egress_PukPresent_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Egress_Egress_Egress_Transfer_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Egress_SystemStopped_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Egress_EStop_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Egress_SystemIdle_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Motor_SystemMotor_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Idle_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Forward_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Slow_react(const sc::integer transitioned_before);
		sc::integer FSM_QualityGate__Motor_SystemMotor_FSM_SystemMotor_Stop_react(const sc::integer transitioned_before);
		sc::integer FSM_System_Operational_react(const sc::integer transitioned_before);
		sc::integer FSM_System_Operational_FSM_Operational_Ready_react(const sc::integer transitioned_before);
		sc::integer FSM_System_Operational_FSM_Operational_Running_react(const sc::integer transitioned_before);
		sc::integer FSM_System_EStop_react(const sc::integer transitioned_before);
		sc::integer FSM_Signaling_FSM_LAMP_react(const sc::integer transitioned_before);
		sc::integer FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_react(const sc::integer transitioned_before);
		sc::integer FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Off_react(const sc::integer transitioned_before);
		sc::integer FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Green_Constant_react(const sc::integer transitioned_before);
		sc::integer FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Off_react(const sc::integer transitioned_before);
		sc::integer FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Constant_react(const sc::integer transitioned_before);
		sc::integer FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Yellow_Blinking_1_Hz_react(const sc::integer transitioned_before);
		sc::integer FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Off_react(const sc::integer transitioned_before);
		sc::integer FSM_Signaling_FSM_LAMP_FSM_LAMP_FSM_Lamp_FSM_Lamp_Red_Constant_react(const sc::integer transitioned_before);
		void clearInEvents() noexcept;
		void clearInternalEvents() noexcept;
		void microStep();
		void runCycle();
		
		
		
		/*! Indicates event 'ESTOP_TOGGLED' of default interface scope is active. */
		bool ESTOP_TOGGLED_raised {false};
		
		/*! Indicates event 'ESTOP_CLEARED' of default interface scope is active. */
		bool ESTOP_CLEARED_raised {false};
		
		/*! Indicates event 'ESTOP_Received' of default interface scope is active. */
		bool ESTOP_Received_raised {false};
		
		/*! Indicates event 'LBF_1_INTERRUPTED' of default interface scope is active. */
		bool LBF_1_INTERRUPTED_raised {false};
		
		/*! Indicates event 'LBF_1_OPEN' of default interface scope is active. */
		bool LBF_1_OPEN_raised {false};
		
		/*! Indicates event 'PUK_ENTRY_HeightMeasurement' of default interface scope is active. */
		bool PUK_ENTRY_HeightMeasurement_raised {false};
		
		/*! Observable for event 'LAMP_YELLOW_BLINKING_1_HZ' of default interface scope. */
		sc::rx::Observable<void> LAMP_YELLOW_BLINKING_1_HZ_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'LAMP_YELLOW_BLINKING_1_HZ_RESET' of default interface scope. */
		sc::rx::Observable<void> LAMP_YELLOW_BLINKING_1_HZ_RESET_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'HS_1_OPEN' of default interface scope is active. */
		bool HS_1_OPEN_raised {false};
		
		/*! Indicates event 'HS_1_INTERRUPTED' of default interface scope is active. */
		bool HS_1_INTERRUPTED_raised {false};
		
		/*! Observable for event 'PUK_DISTANCE_VALID' of default interface scope. */
		sc::rx::Observable<void> PUK_DISTANCE_VALID_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'PUK_ENTRY_SORTING' of default interface scope is active. */
		bool PUK_ENTRY_SORTING_raised {false};
		
		/*! Indicates event 'LBM_1_INTERRUPTED' of default interface scope is active. */
		bool LBM_1_INTERRUPTED_raised {false};
		
		/*! Indicates event 'BGR_1_INTERRUPTED' of default interface scope is active. */
		bool BGR_1_INTERRUPTED_raised {false};
		
		/*! Indicates event 'PUK_DESIRED' of default interface scope is active. */
		bool PUK_DESIRED_raised {false};
		
		/*! Indicates event 'PUK_NOT_DESIRED' of default interface scope is active. */
		bool PUK_NOT_DESIRED_raised {false};
		
		/*! Observable for event 'PUK_ENTRY_EGRESS' of default interface scope. */
		sc::rx::Observable<void> PUK_ENTRY_EGRESS_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'PUK_EJECTOR_DISTANCE_VALID' of default interface scope is active. */
		bool PUK_EJECTOR_DISTANCE_VALID_raised {false};
		
		/*! Indicates event 'LBE_1_OPEN' of default interface scope is active. */
		bool LBE_1_OPEN_raised {false};
		
		/*! Indicates event 'LBE_1_INTERRUPTED' of default interface scope is active. */
		bool LBE_1_INTERRUPTED_raised {false};
		
		/*! Indicates event 'LBR_1_INTERRUPTED' of default interface scope is active. */
		bool LBR_1_INTERRUPTED_raised {false};
		
		/*! Indicates event 'MOTOR_STOP' of default interface scope is active. */
		bool MOTOR_STOP_raised {false};
		
		/*! Indicates event 'MOTOR_STOP_RESET' of default interface scope is active. */
		bool MOTOR_STOP_RESET_raised {false};
		
		/*! Indicates event 'MOTOR_SLOW' of default interface scope is active. */
		bool MOTOR_SLOW_raised {false};
		
		/*! Indicates event 'MOTOR_SLOW_RESET' of default interface scope is active. */
		bool MOTOR_SLOW_RESET_raised {false};
		
		/*! Indicates event 'MOTOR_FORWARD' of default interface scope is active. */
		bool MOTOR_FORWARD_raised {false};
		
		/*! Indicates event 'MOTOR_FORWARD_RESET' of default interface scope is active. */
		bool MOTOR_FORWARD_RESET_raised {false};
		
		/*! Indicates event 'LampEStop' of default interface scope is active. */
		bool LampEStop_raised {false};
		
		/*! Indicates event 'Lamp' of default interface scope is active. */
		bool Lamp_raised {false};
		
		/*! Indicates event 'BGS_1_INTERRUPTED' of default interface scope is active. */
		bool BGS_1_INTERRUPTED_raised {false};
		
		/*! Indicates event 'BRS_1_INTERRUPTED' of default interface scope is active. */
		bool BRS_1_INTERRUPTED_raised {false};
		
		/*! Observable for event 'SYSTEM_RUNNING' of default interface scope. */
		sc::rx::Observable<void> SYSTEM_RUNNING_observable = sc::rx::Observable<void>{};
		
		/*! Observable for event 'SYSTEM_STOPPED' of default interface scope. */
		sc::rx::Observable<void> SYSTEM_STOPPED_observable = sc::rx::Observable<void>{};
		
		/*! Indicates event 'ESTOP_SIGNAL' of default interface scope is active. */
		bool ESTOP_SIGNAL_raised {false};
		
		/*! Indicates event 'ESTOP_SIGNAL_RESET' of default interface scope is active. */
		bool ESTOP_SIGNAL_RESET_raised {false};
		
		/*! Indicates event 'RUNNING_SIGNAL' of default interface scope is active. */
		bool RUNNING_SIGNAL_raised {false};
		
		/*! Indicates event 'RUNNING_SIGNAL_RESET' of default interface scope is active. */
		bool RUNNING_SIGNAL_RESET_raised {false};
		
		/*! Indicates event 'WARNING_SIGNAL' of default interface scope is active. */
		bool WARNING_SIGNAL_raised {false};
		
		/*! Indicates event 'WARNING_SIGNAL_RESET' of default interface scope is active. */
		bool WARNING_SIGNAL_RESET_raised {false};
		
		/*! Indicates event 'READY_SIGNAL' of default interface scope is active. */
		bool READY_SIGNAL_raised {false};
		
		/*! Indicates event 'READY_RESET' of default interface scope is active. */
		bool READY_RESET_raised {false};
		
		/*! Indicates event 'ERROR_SIGNAL' of default interface scope is active. */
		bool ERROR_SIGNAL_raised {false};
		
		/*! Indicates event 'local_SYSTEM_STOPPED' of internal scope is active. */
		bool local_SYSTEM_STOPPED_raised {false};
		
		/*! Raises the out event 'local_SYSTEM_STOPPED' of internal scope as a local event. */
		void raiseLocal_SYSTEM_STOPPED();
		
		/*! Indicates event 'local_PUK_DISTANCE_VALID' of internal scope is active. */
		bool local_PUK_DISTANCE_VALID_raised {false};
		
		/*! Raises the out event 'local_PUK_DISTANCE_VALID' of internal scope as a local event. */
		void raiseLocal_PUK_DISTANCE_VALID();
		
		/*! Indicates event 'local_SYSTEM_RUNNING' of internal scope is active. */
		bool local_SYSTEM_RUNNING_raised {false};
		
		/*! Raises the out event 'local_SYSTEM_RUNNING' of internal scope as a local event. */
		void raiseLocal_SYSTEM_RUNNING();
		
		/*! Indicates event 'local_PUK_ENTRY_EGRESS' of internal scope is active. */
		bool local_PUK_ENTRY_EGRESS_raised {false};
		
		/*! Raises the out event 'local_PUK_ENTRY_EGRESS' of internal scope as a local event. */
		void raiseLocal_PUK_ENTRY_EGRESS();
		
		/*! Indicates event 'local_LAMP_YELLOW_BLINKING_1_HZ' of internal scope is active. */
		bool local_LAMP_YELLOW_BLINKING_1_HZ_raised {false};
		
		/*! Raises the out event 'local_LAMP_YELLOW_BLINKING_1_HZ' of internal scope as a local event. */
		void raiseLocal_LAMP_YELLOW_BLINKING_1_HZ();
		
		/*! Indicates event 'local_LAMP_YELLOW_BLINKING_1_HZ_RESET' of internal scope is active. */
		bool local_LAMP_YELLOW_BLINKING_1_HZ_RESET_raised {false};
		
		/*! Raises the out event 'local_LAMP_YELLOW_BLINKING_1_HZ_RESET' of internal scope as a local event. */
		void raiseLocal_LAMP_YELLOW_BLINKING_1_HZ_RESET();
		
		
		
};




#endif /* FSM_QUALITYGATE_H_ */
